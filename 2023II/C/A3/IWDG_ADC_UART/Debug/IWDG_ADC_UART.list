
IWDG_ADC_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008418  080002b0  080002b0  000102b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  080086c8  080086c8  000186c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080087c4  080087c4  000187c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080087cc  080087cc  000187cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  080087d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000140  24000074  08008848  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001b4  08008848  000201b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015590  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a42  00000000  00000000  00035632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e98  00000000  00000000  00038078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d70  00000000  00000000  00038f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032f17  00000000  00000000  00039c80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000145f8  00000000  00000000  0006cb97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a0bd  00000000  00000000  0008118f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cb24c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004370  00000000  00000000  001cb29c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002b0 <__do_global_dtors_aux>:
 80002b0:	b510      	push	{r4, lr}
 80002b2:	4c05      	ldr	r4, [pc, #20]	; (80002c8 <__do_global_dtors_aux+0x18>)
 80002b4:	7823      	ldrb	r3, [r4, #0]
 80002b6:	b933      	cbnz	r3, 80002c6 <__do_global_dtors_aux+0x16>
 80002b8:	4b04      	ldr	r3, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x1c>)
 80002ba:	b113      	cbz	r3, 80002c2 <__do_global_dtors_aux+0x12>
 80002bc:	4804      	ldr	r0, [pc, #16]	; (80002d0 <__do_global_dtors_aux+0x20>)
 80002be:	f3af 8000 	nop.w
 80002c2:	2301      	movs	r3, #1
 80002c4:	7023      	strb	r3, [r4, #0]
 80002c6:	bd10      	pop	{r4, pc}
 80002c8:	24000074 	.word	0x24000074
 80002cc:	00000000 	.word	0x00000000
 80002d0:	080086b0 	.word	0x080086b0

080002d4 <frame_dummy>:
 80002d4:	b508      	push	{r3, lr}
 80002d6:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <frame_dummy+0x10>)
 80002d8:	b11b      	cbz	r3, 80002e2 <frame_dummy+0xe>
 80002da:	4903      	ldr	r1, [pc, #12]	; (80002e8 <frame_dummy+0x14>)
 80002dc:	4803      	ldr	r0, [pc, #12]	; (80002ec <frame_dummy+0x18>)
 80002de:	f3af 8000 	nop.w
 80002e2:	bd08      	pop	{r3, pc}
 80002e4:	00000000 	.word	0x00000000
 80002e8:	24000078 	.word	0x24000078
 80002ec:	080086b0 	.word	0x080086b0

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <MX_ADC2_Init+0x74>)
 800069a:	4a1c      	ldr	r2, [pc, #112]	; (800070c <MX_ADC2_Init+0x78>)
 800069c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800069e:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <MX_ADC2_Init+0x74>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 80006a4:	4b18      	ldr	r3, [pc, #96]	; (8000708 <MX_ADC2_Init+0x74>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006aa:	4b17      	ldr	r3, [pc, #92]	; (8000708 <MX_ADC2_Init+0x74>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006b0:	4b15      	ldr	r3, [pc, #84]	; (8000708 <MX_ADC2_Init+0x74>)
 80006b2:	2204      	movs	r2, #4
 80006b4:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_ADC2_Init+0x74>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80006bc:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_ADC2_Init+0x74>)
 80006be:	2200      	movs	r2, #0
 80006c0:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_ADC2_Init+0x74>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_ADC2_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_ADC2_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_ADC2_Init+0x74>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_ADC2_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_ADC2_Init+0x74>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_ADC2_Init+0x74>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_ADC2_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <MX_ADC2_Init+0x74>)
 80006f6:	f000 ff5f 	bl	80015b8 <HAL_ADC_Init>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000700:	f000 fafe 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000704:	bf00      	nop
 8000706:	bd80      	pop	{r7, pc}
 8000708:	24000090 	.word	0x24000090
 800070c:	40022100 	.word	0x40022100

08000710 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0b4      	sub	sp, #208	; 0xd0
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000718:	f107 0310 	add.w	r3, r7, #16
 800071c:	22c0      	movs	r2, #192	; 0xc0
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f006 ffb9 	bl	8007698 <memset>
  if(adcHandle->Instance==ADC2)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a27      	ldr	r2, [pc, #156]	; (80007c8 <HAL_ADC_MspInit+0xb8>)
 800072c:	4293      	cmp	r3, r2
 800072e:	d146      	bne.n	80007be <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000730:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000734:	f04f 0300 	mov.w	r3, #0
 8000738:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8000740:	2310      	movs	r3, #16
 8000742:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 8000744:	2303      	movs	r3, #3
 8000746:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 8000748:	2301      	movs	r3, #1
 800074a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000750:	23c0      	movs	r3, #192	; 0xc0
 8000752:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000754:	2300      	movs	r3, #0
 8000756:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800075c:	2300      	movs	r3, #0
 800075e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	4618      	mov	r0, r3
 8000768:	f003 f8fa 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000772:	f000 fac5 	bl	8000d00 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <HAL_ADC_MspInit+0xbc>)
 8000778:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800077c:	4a13      	ldr	r2, [pc, #76]	; (80007cc <HAL_ADC_MspInit+0xbc>)
 800077e:	f043 0320 	orr.w	r3, r3, #32
 8000782:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <HAL_ADC_MspInit+0xbc>)
 8000788:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800078c:	f003 0320 	and.w	r3, r3, #32
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000794:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <HAL_ADC_MspInit+0xbc>)
 8000796:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800079a:	4a0c      	ldr	r2, [pc, #48]	; (80007cc <HAL_ADC_MspInit+0xbc>)
 800079c:	f043 0304 	orr.w	r3, r3, #4
 80007a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_ADC_MspInit+0xbc>)
 80007a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	60bb      	str	r3, [r7, #8]
 80007b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC2_C     ------> ADC2_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80007b2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80007b6:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80007ba:	f000 fda5 	bl	8001308 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007be:	bf00      	nop
 80007c0:	37d0      	adds	r7, #208	; 0xd0
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40022100 	.word	0x40022100
 80007cc:	58024400 	.word	0x58024400

080007d0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	2224      	movs	r2, #36	; 0x24
 80007da:	2100      	movs	r1, #0
 80007dc:	4618      	mov	r0, r3
 80007de:	f006 ff5b 	bl	8007698 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007e2:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_DAC1_Init+0x5c>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_DAC1_Init+0x60>)
 80007e6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007e8:	4810      	ldr	r0, [pc, #64]	; (800082c <MX_DAC1_Init+0x5c>)
 80007ea:	f001 fd5c 	bl	80022a6 <HAL_DAC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007f4:	f000 fa84 	bl	8000d00 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	4806      	ldr	r0, [pc, #24]	; (800082c <MX_DAC1_Init+0x5c>)
 8000814:	f001 fd6a 	bl	80022ec <HAL_DAC_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800081e:	f000 fa6f 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	240000f4 	.word	0x240000f4
 8000830:	40007400 	.word	0x40007400

08000834 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
 800084a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <HAL_DAC_MspInit+0x80>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d129      	bne.n	80008aa <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_DAC_MspInit+0x84>)
 8000858:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800085c:	4a16      	ldr	r2, [pc, #88]	; (80008b8 <HAL_DAC_MspInit+0x84>)
 800085e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000862:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8000866:	4b14      	ldr	r3, [pc, #80]	; (80008b8 <HAL_DAC_MspInit+0x84>)
 8000868:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800086c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_DAC_MspInit+0x84>)
 8000876:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_DAC_MspInit+0x84>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_DAC_MspInit+0x84>)
 8000886:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 8000892:	2310      	movs	r3, #16
 8000894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000896:	2303      	movs	r3, #3
 8000898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4619      	mov	r1, r3
 80008a4:	4805      	ldr	r0, [pc, #20]	; (80008bc <HAL_DAC_MspInit+0x88>)
 80008a6:	f001 fe5f 	bl	8002568 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 80008aa:	bf00      	nop
 80008ac:	3728      	adds	r7, #40	; 0x28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40007400 	.word	0x40007400
 80008b8:	58024400 	.word	0x58024400
 80008bc:	58020000 	.word	0x58020000

080008c0 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08e      	sub	sp, #56	; 0x38
 80008c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
 80008ce:	605a      	str	r2, [r3, #4]
 80008d0:	609a      	str	r2, [r3, #8]
 80008d2:	60da      	str	r2, [r3, #12]
 80008d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008d6:	4b80      	ldr	r3, [pc, #512]	; (8000ad8 <MX_GPIO_Init+0x218>)
 80008d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008dc:	4a7e      	ldr	r2, [pc, #504]	; (8000ad8 <MX_GPIO_Init+0x218>)
 80008de:	f043 0304 	orr.w	r3, r3, #4
 80008e2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008e6:	4b7c      	ldr	r3, [pc, #496]	; (8000ad8 <MX_GPIO_Init+0x218>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	623b      	str	r3, [r7, #32]
 80008f2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f4:	4b78      	ldr	r3, [pc, #480]	; (8000ad8 <MX_GPIO_Init+0x218>)
 80008f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fa:	4a77      	ldr	r2, [pc, #476]	; (8000ad8 <MX_GPIO_Init+0x218>)
 80008fc:	f043 0320 	orr.w	r3, r3, #32
 8000900:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000904:	4b74      	ldr	r3, [pc, #464]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	61fb      	str	r3, [r7, #28]
 8000910:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	4b71      	ldr	r3, [pc, #452]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000914:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000918:	4a6f      	ldr	r2, [pc, #444]	; (8000ad8 <MX_GPIO_Init+0x218>)
 800091a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000922:	4b6d      	ldr	r3, [pc, #436]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000924:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000930:	4b69      	ldr	r3, [pc, #420]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000932:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000936:	4a68      	ldr	r2, [pc, #416]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000940:	4b65      	ldr	r3, [pc, #404]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000942:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	4b62      	ldr	r3, [pc, #392]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000950:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000954:	4a60      	ldr	r2, [pc, #384]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000956:	f043 0302 	orr.w	r3, r3, #2
 800095a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800095e:	4b5e      	ldr	r3, [pc, #376]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000960:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000964:	f003 0302 	and.w	r3, r3, #2
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096c:	4b5a      	ldr	r3, [pc, #360]	; (8000ad8 <MX_GPIO_Init+0x218>)
 800096e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000972:	4a59      	ldr	r2, [pc, #356]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800097c:	4b56      	ldr	r3, [pc, #344]	; (8000ad8 <MX_GPIO_Init+0x218>)
 800097e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000982:	f003 0308 	and.w	r3, r3, #8
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800098a:	4b53      	ldr	r3, [pc, #332]	; (8000ad8 <MX_GPIO_Init+0x218>)
 800098c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000990:	4a51      	ldr	r2, [pc, #324]	; (8000ad8 <MX_GPIO_Init+0x218>)
 8000992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000996:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800099a:	4b4f      	ldr	r3, [pc, #316]	; (8000ad8 <MX_GPIO_Init+0x218>)
 800099c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009a4:	60bb      	str	r3, [r7, #8]
 80009a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a8:	4b4b      	ldr	r3, [pc, #300]	; (8000ad8 <MX_GPIO_Init+0x218>)
 80009aa:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009ae:	4a4a      	ldr	r2, [pc, #296]	; (8000ad8 <MX_GPIO_Init+0x218>)
 80009b0:	f043 0310 	orr.w	r3, r3, #16
 80009b4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80009b8:	4b47      	ldr	r3, [pc, #284]	; (8000ad8 <MX_GPIO_Init+0x218>)
 80009ba:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80009be:	f003 0310 	and.w	r3, r3, #16
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009c6:	2200      	movs	r2, #0
 80009c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009cc:	4843      	ldr	r0, [pc, #268]	; (8000adc <MX_GPIO_Init+0x21c>)
 80009ce:	f001 ff7b 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f244 0101 	movw	r1, #16385	; 0x4001
 80009d8:	4841      	ldr	r0, [pc, #260]	; (8000ae0 <MX_GPIO_Init+0x220>)
 80009da:	f001 ff75 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2102      	movs	r1, #2
 80009e2:	4840      	ldr	r0, [pc, #256]	; (8000ae4 <MX_GPIO_Init+0x224>)
 80009e4:	f001 ff70 	bl	80028c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ee:	2300      	movs	r3, #0
 80009f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fa:	4619      	mov	r1, r3
 80009fc:	483a      	ldr	r0, [pc, #232]	; (8000ae8 <MX_GPIO_Init+0x228>)
 80009fe:	f001 fdb3 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000a02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4830      	ldr	r0, [pc, #192]	; (8000adc <MX_GPIO_Init+0x21c>)
 8000a1c:	f001 fda4 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a20:	f244 0301 	movw	r3, #16385	; 0x4001
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4829      	ldr	r0, [pc, #164]	; (8000ae0 <MX_GPIO_Init+0x220>)
 8000a3a:	f001 fd95 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000a3e:	2380      	movs	r3, #128	; 0x80
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	4826      	ldr	r0, [pc, #152]	; (8000aec <MX_GPIO_Init+0x22c>)
 8000a54:	f001 fd88 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4820      	ldr	r0, [pc, #128]	; (8000af0 <MX_GPIO_Init+0x230>)
 8000a6e:	f001 fd7b 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000a84:	230a      	movs	r3, #10
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4818      	ldr	r0, [pc, #96]	; (8000af0 <MX_GPIO_Init+0x230>)
 8000a90:	f001 fd6a 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 8000a94:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4810      	ldr	r0, [pc, #64]	; (8000af0 <MX_GPIO_Init+0x230>)
 8000aae:	f001 fd5b 	bl	8002568 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aba:	2300      	movs	r3, #0
 8000abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ac2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <MX_GPIO_Init+0x224>)
 8000aca:	f001 fd4d 	bl	8002568 <HAL_GPIO_Init>

}
 8000ace:	bf00      	nop
 8000ad0:	3738      	adds	r7, #56	; 0x38
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	58024400 	.word	0x58024400
 8000adc:	58021400 	.word	0x58021400
 8000ae0:	58020400 	.word	0x58020400
 8000ae4:	58021000 	.word	0x58021000
 8000ae8:	58020800 	.word	0x58020800
 8000aec:	58021800 	.word	0x58021800
 8000af0:	58020000 	.word	0x58020000

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b0b4      	sub	sp, #208	; 0xd0
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  uint16_t 	adc_value = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
  uint16_t adc[MUESTRAS] ;
  uint16_t sample = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b06:	f000 fb49 	bl	800119c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b0a:	f000 f85b 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b0e:	f7ff fed7 	bl	80008c0 <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 8000b12:	f000 fb11 	bl	8001138 <MX_USB_OTG_HS_USB_Init>
  MX_ADC2_Init();
 8000b16:	f7ff fdbd 	bl	8000694 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000b1a:	f000 fa57 	bl	8000fcc <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8000b1e:	f7ff fe57 	bl	80007d0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  CyclesCounterInit(FRE_CLOCK); // Enable the cycle counter
 8000b22:	4821      	ldr	r0, [pc, #132]	; (8000ba8 <main+0xb4>)
 8000b24:	f000 f8d8 	bl	8000cd8 <CyclesCounterInit>

  printf("Inicio ADC DAC \r\n");
 8000b28:	4820      	ldr	r0, [pc, #128]	; (8000bac <main+0xb8>)
 8000b2a:	f006 fe43 	bl	80077b4 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	CyclesCounterReset();
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <main+0xbc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]

	HAL_ADC_Start(&hadc2);
 8000b34:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <main+0xc0>)
 8000b36:	f000 fe99 	bl	800186c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 8000b3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000b3e:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <main+0xc0>)
 8000b40:	f000 ff82 	bl	8001a48 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc2);
 8000b44:	481b      	ldr	r0, [pc, #108]	; (8000bb4 <main+0xc0>)
 8000b46:	f001 f857 	bl	8001bf8 <HAL_ADC_GetValue>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
	HAL_ADC_Stop(&hadc2);
 8000b50:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <main+0xc0>)
 8000b52:	f000 ff45 	bl	80019e0 <HAL_ADC_Stop>

	adc[sample] = adc_value;
 8000b56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	33d0      	adds	r3, #208	; 0xd0
 8000b5e:	443b      	add	r3, r7
 8000b60:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
 8000b64:	f823 2ccc 	strh.w	r2, [r3, #-204]
	sample++;
 8000b68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce


	while(CyclesCounterRead() <  FS )
 8000b72:	bf00      	nop
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <main+0xbc>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	4a0f      	ldr	r2, [pc, #60]	; (8000bb8 <main+0xc4>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d3fa      	bcc.n	8000b74 <main+0x80>
	{}

    if(sample >= MUESTRAS)
 8000b7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8000b82:	2b63      	cmp	r3, #99	; 0x63
 8000b84:	d9d3      	bls.n	8000b2e <main+0x3a>
    {
    	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b86:	2101      	movs	r1, #1
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <main+0xc8>)
 8000b8a:	f001 feb6 	bl	80028fa <HAL_GPIO_TogglePin>
    	printf("ADC = %d size = %d  \r\n",adc_value,sample);
 8000b8e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
 8000b92:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8000b96:	4619      	mov	r1, r3
 8000b98:	4809      	ldr	r0, [pc, #36]	; (8000bc0 <main+0xcc>)
 8000b9a:	f006 fd85 	bl	80076a8 <iprintf>
    	sample = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	CyclesCounterReset();
 8000ba4:	e7c3      	b.n	8000b2e <main+0x3a>
 8000ba6:	bf00      	nop
 8000ba8:	10b07600 	.word	0x10b07600
 8000bac:	080086c8 	.word	0x080086c8
 8000bb0:	e0001000 	.word	0xe0001000
 8000bb4:	24000090 	.word	0x24000090
 8000bb8:	002ab980 	.word	0x002ab980
 8000bbc:	58020400 	.word	0x58020400
 8000bc0:	080086dc 	.word	0x080086dc

08000bc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b09c      	sub	sp, #112	; 0x70
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bce:	224c      	movs	r2, #76	; 0x4c
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f006 fd60 	bl	8007698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2220      	movs	r2, #32
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f006 fd5a 	bl	8007698 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000be4:	4b31      	ldr	r3, [pc, #196]	; (8000cac <SystemClock_Config+0xe8>)
 8000be6:	f04f 32ff 	mov.w	r2, #4294967295
 8000bea:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000bee:	2004      	movs	r0, #4
 8000bf0:	f001 fe9e 	bl	8002930 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	; (8000cb0 <SystemClock_Config+0xec>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a2c      	ldr	r2, [pc, #176]	; (8000cb0 <SystemClock_Config+0xec>)
 8000bfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b2a      	ldr	r3, [pc, #168]	; (8000cb0 <SystemClock_Config+0xec>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c10:	bf00      	nop
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <SystemClock_Config+0xec>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c1e:	d1f8      	bne.n	8000c12 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000c20:	2329      	movs	r3, #41	; 0x29
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c24:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c36:	2302      	movs	r3, #2
 8000c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000c3e:	2346      	movs	r3, #70	; 0x46
 8000c40:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000c42:	2302      	movs	r3, #2
 8000c44:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000c46:	2314      	movs	r3, #20
 8000c48:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c4e:	230c      	movs	r3, #12
 8000c50:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000c56:	2300      	movs	r3, #0
 8000c58:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f001 fec0 	bl	80029e4 <HAL_RCC_OscConfig>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000c6a:	f000 f849 	bl	8000d00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	233f      	movs	r3, #63	; 0x3f
 8000c70:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2303      	movs	r3, #3
 8000c74:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c7e:	2340      	movs	r3, #64	; 0x40
 8000c80:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c8a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c8c:	2340      	movs	r3, #64	; 0x40
 8000c8e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2107      	movs	r1, #7
 8000c94:	4618      	mov	r0, r3
 8000c96:	f002 fad7 	bl	8003248 <HAL_RCC_ClockConfig>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000ca0:	f000 f82e 	bl	8000d00 <Error_Handler>
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	3770      	adds	r7, #112	; 0x70
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	58024800 	.word	0x58024800

08000cb4 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000cbc:	1d39      	adds	r1, r7, #4
 8000cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <__io_putchar+0x20>)
 8000cc6:	f005 faa5 	bl	8006214 <HAL_UART_Transmit>

  return ch;
 8000cca:	687b      	ldr	r3, [r7, #4]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2400010c 	.word	0x2400010c

08000cd8 <CyclesCounterInit>:

int CyclesCounterInit( uint32_t clockSpeed )
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <CyclesCounterInit+0x24>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <CyclesCounterInit+0x24>)
 8000ce6:	f043 0301 	orr.w	r3, r3, #1
 8000cea:	6013      	str	r3, [r2, #0]
   return 1;
 8000cec:	2301      	movs	r3, #1
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e0001000 	.word	0xe0001000

08000d00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d04:	b672      	cpsid	i
}
 8000d06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <Error_Handler+0x8>
	...

08000d0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d12:	4b0a      	ldr	r3, [pc, #40]	; (8000d3c <HAL_MspInit+0x30>)
 8000d14:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d18:	4a08      	ldr	r2, [pc, #32]	; (8000d3c <HAL_MspInit+0x30>)
 8000d1a:	f043 0302 	orr.w	r3, r3, #2
 8000d1e:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_MspInit+0x30>)
 8000d24:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000d28:	f003 0302 	and.w	r3, r3, #2
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	58024400 	.word	0x58024400

08000d40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <NMI_Handler+0x4>

08000d46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	e7fe      	b.n	8000d50 <MemManage_Handler+0x4>

08000d52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <BusFault_Handler+0x4>

08000d58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <UsageFault_Handler+0x4>

08000d5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 fa78 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b086      	sub	sp, #24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	2300      	movs	r3, #0
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	e00a      	b.n	8000dbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000da6:	f3af 8000 	nop.w
 8000daa:	4601      	mov	r1, r0
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	1c5a      	adds	r2, r3, #1
 8000db0:	60ba      	str	r2, [r7, #8]
 8000db2:	b2ca      	uxtb	r2, r1
 8000db4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000db6:	697b      	ldr	r3, [r7, #20]
 8000db8:	3301      	adds	r3, #1
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	697a      	ldr	r2, [r7, #20]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	dbf0      	blt.n	8000da6 <_read+0x12>
  }

  return len;
 8000dc4:	687b      	ldr	r3, [r7, #4]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b086      	sub	sp, #24
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	60f8      	str	r0, [r7, #12]
 8000dd6:	60b9      	str	r1, [r7, #8]
 8000dd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	e009      	b.n	8000df4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	1c5a      	adds	r2, r3, #1
 8000de4:	60ba      	str	r2, [r7, #8]
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff ff63 	bl	8000cb4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	3301      	adds	r3, #1
 8000df2:	617b      	str	r3, [r7, #20]
 8000df4:	697a      	ldr	r2, [r7, #20]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	dbf1      	blt.n	8000de0 <_write+0x12>
  }
  return len;
 8000dfc:	687b      	ldr	r3, [r7, #4]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3718      	adds	r7, #24
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}

08000e06 <_close>:

int _close(int file)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b083      	sub	sp, #12
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
 8000e26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <_isatty>:

int _isatty(int file)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	b083      	sub	sp, #12
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e60:	2300      	movs	r3, #0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b086      	sub	sp, #24
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e78:	4a14      	ldr	r2, [pc, #80]	; (8000ecc <_sbrk+0x5c>)
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <_sbrk+0x60>)
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <_sbrk+0x64>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e8c:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <_sbrk+0x64>)
 8000e8e:	4a12      	ldr	r2, [pc, #72]	; (8000ed8 <_sbrk+0x68>)
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e92:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <_sbrk+0x64>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4413      	add	r3, r2
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d207      	bcs.n	8000eb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea0:	f006 fbd0 	bl	8007644 <__errno>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8000eae:	e009      	b.n	8000ec4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <_sbrk+0x64>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000eb6:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <_sbrk+0x64>)
 8000eb8:	681a      	ldr	r2, [r3, #0]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a05      	ldr	r2, [pc, #20]	; (8000ed4 <_sbrk+0x64>)
 8000ec0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ec2:	68fb      	ldr	r3, [r7, #12]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3718      	adds	r7, #24
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	24100000 	.word	0x24100000
 8000ed0:	00000400 	.word	0x00000400
 8000ed4:	24000108 	.word	0x24000108
 8000ed8:	240001b8 	.word	0x240001b8

08000edc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b32      	ldr	r3, [pc, #200]	; (8000fac <SystemInit+0xd0>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a31      	ldr	r2, [pc, #196]	; (8000fac <SystemInit+0xd0>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ef0:	4b2f      	ldr	r3, [pc, #188]	; (8000fb0 <SystemInit+0xd4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f003 030f 	and.w	r3, r3, #15
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d807      	bhi.n	8000f0c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000efc:	4b2c      	ldr	r3, [pc, #176]	; (8000fb0 <SystemInit+0xd4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f023 030f 	bic.w	r3, r3, #15
 8000f04:	4a2a      	ldr	r2, [pc, #168]	; (8000fb0 <SystemInit+0xd4>)
 8000f06:	f043 0303 	orr.w	r3, r3, #3
 8000f0a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f0c:	4b29      	ldr	r3, [pc, #164]	; (8000fb4 <SystemInit+0xd8>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a28      	ldr	r2, [pc, #160]	; (8000fb4 <SystemInit+0xd8>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f18:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <SystemInit+0xd8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f1e:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <SystemInit+0xd8>)
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	4924      	ldr	r1, [pc, #144]	; (8000fb4 <SystemInit+0xd8>)
 8000f24:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <SystemInit+0xdc>)
 8000f26:	4013      	ands	r3, r2
 8000f28:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <SystemInit+0xd4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 030c 	and.w	r3, r3, #12
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d007      	beq.n	8000f46 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f36:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <SystemInit+0xd4>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f023 030f 	bic.w	r3, r3, #15
 8000f3e:	4a1c      	ldr	r2, [pc, #112]	; (8000fb0 <SystemInit+0xd4>)
 8000f40:	f043 0303 	orr.w	r3, r3, #3
 8000f44:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8000f46:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <SystemInit+0xd8>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8000f4c:	4b19      	ldr	r3, [pc, #100]	; (8000fb4 <SystemInit+0xd8>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8000f52:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <SystemInit+0xd8>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <SystemInit+0xd8>)
 8000f5a:	4a18      	ldr	r2, [pc, #96]	; (8000fbc <SystemInit+0xe0>)
 8000f5c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <SystemInit+0xd8>)
 8000f60:	4a17      	ldr	r2, [pc, #92]	; (8000fc0 <SystemInit+0xe4>)
 8000f62:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f64:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <SystemInit+0xd8>)
 8000f66:	4a17      	ldr	r2, [pc, #92]	; (8000fc4 <SystemInit+0xe8>)
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f6a:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <SystemInit+0xd8>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f70:	4b10      	ldr	r3, [pc, #64]	; (8000fb4 <SystemInit+0xd8>)
 8000f72:	4a14      	ldr	r2, [pc, #80]	; (8000fc4 <SystemInit+0xe8>)
 8000f74:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f76:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <SystemInit+0xd8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f7c:	4b0d      	ldr	r3, [pc, #52]	; (8000fb4 <SystemInit+0xd8>)
 8000f7e:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <SystemInit+0xe8>)
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <SystemInit+0xd8>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <SystemInit+0xd8>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <SystemInit+0xd8>)
 8000f8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f92:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <SystemInit+0xd8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <SystemInit+0xec>)
 8000f9c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000fa0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000ed00 	.word	0xe000ed00
 8000fb0:	52002000 	.word	0x52002000
 8000fb4:	58024400 	.word	0x58024400
 8000fb8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fbc:	02020200 	.word	0x02020200
 8000fc0:	01ff0000 	.word	0x01ff0000
 8000fc4:	01010280 	.word	0x01010280
 8000fc8:	52004000 	.word	0x52004000

08000fcc <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fd0:	4b22      	ldr	r3, [pc, #136]	; (800105c <MX_USART3_UART_Init+0x90>)
 8000fd2:	4a23      	ldr	r2, [pc, #140]	; (8001060 <MX_USART3_UART_Init+0x94>)
 8000fd4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <MX_USART3_UART_Init+0x90>)
 8000fd8:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000fdc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <MX_USART3_UART_Init+0x90>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000fe4:	4b1d      	ldr	r3, [pc, #116]	; (800105c <MX_USART3_UART_Init+0x90>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <MX_USART3_UART_Init+0x90>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_USART3_UART_Init+0x90>)
 8000ff2:	220c      	movs	r2, #12
 8000ff4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <MX_USART3_UART_Init+0x90>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_USART3_UART_Init+0x90>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001002:	4b16      	ldr	r3, [pc, #88]	; (800105c <MX_USART3_UART_Init+0x90>)
 8001004:	2200      	movs	r2, #0
 8001006:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_USART3_UART_Init+0x90>)
 800100a:	2200      	movs	r2, #0
 800100c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <MX_USART3_UART_Init+0x90>)
 8001010:	2200      	movs	r2, #0
 8001012:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001014:	4811      	ldr	r0, [pc, #68]	; (800105c <MX_USART3_UART_Init+0x90>)
 8001016:	f005 f8ad 	bl	8006174 <HAL_UART_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001020:	f7ff fe6e 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001024:	2100      	movs	r1, #0
 8001026:	480d      	ldr	r0, [pc, #52]	; (800105c <MX_USART3_UART_Init+0x90>)
 8001028:	f006 fa41 	bl	80074ae <HAL_UARTEx_SetTxFifoThreshold>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001032:	f7ff fe65 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001036:	2100      	movs	r1, #0
 8001038:	4808      	ldr	r0, [pc, #32]	; (800105c <MX_USART3_UART_Init+0x90>)
 800103a:	f006 fa76 	bl	800752a <HAL_UARTEx_SetRxFifoThreshold>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001044:	f7ff fe5c 	bl	8000d00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001048:	4804      	ldr	r0, [pc, #16]	; (800105c <MX_USART3_UART_Init+0x90>)
 800104a:	f006 f9f7 	bl	800743c <HAL_UARTEx_DisableFifoMode>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001054:	f7ff fe54 	bl	8000d00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	2400010c 	.word	0x2400010c
 8001060:	40004800 	.word	0x40004800

08001064 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0ba      	sub	sp, #232	; 0xe8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	22c0      	movs	r2, #192	; 0xc0
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f006 fb07 	bl	8007698 <memset>
  if(uartHandle->Instance==USART3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a27      	ldr	r2, [pc, #156]	; (800112c <HAL_UART_MspInit+0xc8>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d146      	bne.n	8001122 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001094:	f04f 0202 	mov.w	r2, #2
 8001098:	f04f 0300 	mov.w	r3, #0
 800109c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fc58 	bl	8003960 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80010b6:	f7ff fe23 	bl	8000d00 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010bc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c6:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010cc:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80010d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_UART_MspInit+0xcc>)
 80010ea:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001110:	2307      	movs	r3, #7
 8001112:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_UART_MspInit+0xd0>)
 800111e:	f001 fa23 	bl	8002568 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001122:	bf00      	nop
 8001124:	37e8      	adds	r7, #232	; 0xe8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40004800 	.word	0x40004800
 8001130:	58024400 	.word	0x58024400
 8001134:	58020c00 	.word	0x58020c00

08001138 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 800113c:	bf00      	nop
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800114c:	f7ff fec6 	bl	8000edc <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	; (8001188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	; (8001194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001176:	f006 fa6b 	bl	8007650 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fcbb 	bl	8000af4 <main>
  bx  lr
 800117e:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001180:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001184:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001188:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 800118c:	080087d4 	.word	0x080087d4
  ldr r2, =_sbss
 8001190:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001194:	240001b4 	.word	0x240001b4

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a2:	2003      	movs	r0, #3
 80011a4:	f001 f84e 	bl	8002244 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 80011a8:	f002 fa04 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 80011ac:	4602      	mov	r2, r0
 80011ae:	4b15      	ldr	r3, [pc, #84]	; (8001204 <HAL_Init+0x68>)
 80011b0:	699b      	ldr	r3, [r3, #24]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	f003 030f 	and.w	r3, r3, #15
 80011b8:	4913      	ldr	r1, [pc, #76]	; (8001208 <HAL_Init+0x6c>)
 80011ba:	5ccb      	ldrb	r3, [r1, r3]
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	fa22 f303 	lsr.w	r3, r2, r3
 80011c4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80011c6:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <HAL_Init+0x68>)
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <HAL_Init+0x6c>)
 80011d0:	5cd3      	ldrb	r3, [r2, r3]
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	fa22 f303 	lsr.w	r3, r2, r3
 80011dc:	4a0b      	ldr	r2, [pc, #44]	; (800120c <HAL_Init+0x70>)
 80011de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011e0:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <HAL_Init+0x74>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f814 	bl	8001214 <HAL_InitTick>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011f2:	2301      	movs	r3, #1
 80011f4:	e002      	b.n	80011fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011f6:	f7ff fd89 	bl	8000d0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	58024400 	.word	0x58024400
 8001208:	080086f4 	.word	0x080086f4
 800120c:	24000004 	.word	0x24000004
 8001210:	24000000 	.word	0x24000000

08001214 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_InitTick+0x60>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d101      	bne.n	8001228 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e021      	b.n	800126c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <HAL_InitTick+0x64>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_InitTick+0x60>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f001 f825 	bl	800228e <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 fffd 	bl	800225a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	; (800127c <HAL_InitTick+0x68>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	2400000c 	.word	0x2400000c
 8001278:	24000000 	.word	0x24000000
 800127c:	24000008 	.word	0x24000008

08001280 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x20>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_IncTick+0x24>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a04      	ldr	r2, [pc, #16]	; (80012a4 <HAL_IncTick+0x24>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	2400000c 	.word	0x2400000c
 80012a4:	240001a0 	.word	0x240001a0

080012a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b03      	ldr	r3, [pc, #12]	; (80012bc <HAL_GetTick+0x14>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	240001a0 	.word	0x240001a0

080012c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c8:	f7ff ffee 	bl	80012a8 <HAL_GetTick>
 80012cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d8:	d005      	beq.n	80012e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012da:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <HAL_Delay+0x44>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	461a      	mov	r2, r3
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	4413      	add	r3, r2
 80012e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e6:	bf00      	nop
 80012e8:	f7ff ffde 	bl	80012a8 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d8f7      	bhi.n	80012e8 <HAL_Delay+0x28>
  {
  }
}
 80012f8:	bf00      	nop
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2400000c 	.word	0x2400000c

08001308 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	43db      	mvns	r3, r3
 800131a:	401a      	ands	r2, r3
 800131c:	4904      	ldr	r1, [pc, #16]	; (8001330 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	58000400 	.word	0x58000400

08001334 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	431a      	orrs	r2, r3
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	609a      	str	r2, [r3, #8]
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr

0800135a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800135a:	b480      	push	{r7}
 800135c:	b083      	sub	sp, #12
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800136e:	2301      	movs	r3, #1
 8001370:	e000      	b.n	8001374 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f003 031f 	and.w	r3, r3, #31
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <LL_ADC_DisableDeepPowerDown+0x20>)
 80013c6:	4013      	ands	r3, r2
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	6093      	str	r3, [r2, #8]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	5fffffc0 	.word	0x5fffffc0

080013dc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80013f0:	d101      	bne.n	80013f6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80013f2:	2301      	movs	r3, #1
 80013f4:	e000      	b.n	80013f8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr

08001404 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <LL_ADC_EnableInternalRegulator+0x24>)
 8001412:	4013      	ands	r3, r2
 8001414:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800141c:	bf00      	nop
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	6fffffc0 	.word	0x6fffffc0

0800142c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001440:	d101      	bne.n	8001446 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <LL_ADC_Enable+0x24>)
 8001462:	4013      	ands	r3, r2
 8001464:	f043 0201 	orr.w	r2, r3, #1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	7fffffc0 	.word	0x7fffffc0

0800147c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689a      	ldr	r2, [r3, #8]
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <LL_ADC_Disable+0x24>)
 800148a:	4013      	ands	r3, r2
 800148c:	f043 0202 	orr.w	r2, r3, #2
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	7fffffc0 	.word	0x7fffffc0

080014a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <LL_ADC_IsEnabled+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_ADC_IsEnabled+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d101      	bne.n	80014e2 <LL_ADC_IsDisableOngoing+0x18>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_ADC_IsDisableOngoing+0x1a>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <LL_ADC_REG_StartConversion+0x24>)
 80014fe:	4013      	ands	r3, r2
 8001500:	f043 0204 	orr.w	r2, r3, #4
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	7fffffc0 	.word	0x7fffffc0

08001518 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <LL_ADC_REG_StopConversion+0x24>)
 8001526:	4013      	ands	r3, r2
 8001528:	f043 0210 	orr.w	r2, r3, #16
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr
 800153c:	7fffffc0 	.word	0x7fffffc0

08001540 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b04      	cmp	r3, #4
 8001552:	d101      	bne.n	8001558 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
	...

08001568 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <LL_ADC_INJ_StopConversion+0x24>)
 8001576:	4013      	ands	r3, r2
 8001578:	f043 0220 	orr.w	r2, r3, #32
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	7fffffc0 	.word	0x7fffffc0

08001590 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b089      	sub	sp, #36	; 0x24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e138      	b.n	8001844 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff f895 	bl	8000710 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff feef 	bl	80013dc <LL_ADC_IsDeepPowerDownEnabled>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fed5 	bl	80013b8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff0a 	bl	800142c <LL_ADC_IsInternalRegulatorEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d114      	bne.n	8001648 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff feee 	bl	8001404 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001628:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_ADC_Init+0x294>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	4a88      	ldr	r2, [pc, #544]	; (8001850 <HAL_ADC_Init+0x298>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	3301      	adds	r3, #1
 8001638:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800163a:	e002      	b.n	8001642 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	3b01      	subs	r3, #1
 8001640:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f9      	bne.n	800163c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff feed 	bl	800142c <LL_ADC_IsInternalRegulatorEnabled>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165c:	f043 0210 	orr.w	r2, r3, #16
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	f043 0201 	orr.w	r2, r3, #1
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff61 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 800167e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	2b00      	cmp	r3, #0
 800168a:	f040 80d2 	bne.w	8001832 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f040 80ce 	bne.w	8001832 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff fefa 	bl	80014a4 <LL_ADC_IsEnabled>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d110      	bne.n	80016d8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016b6:	4867      	ldr	r0, [pc, #412]	; (8001854 <HAL_ADC_Init+0x29c>)
 80016b8:	f7ff fef4 	bl	80014a4 <LL_ADC_IsEnabled>
 80016bc:	4604      	mov	r4, r0
 80016be:	4866      	ldr	r0, [pc, #408]	; (8001858 <HAL_ADC_Init+0x2a0>)
 80016c0:	f7ff fef0 	bl	80014a4 <LL_ADC_IsEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4323      	orrs	r3, r4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d105      	bne.n	80016d8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4862      	ldr	r0, [pc, #392]	; (800185c <HAL_ADC_Init+0x2a4>)
 80016d4:	f7ff fe2e 	bl	8001334 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7d5b      	ldrb	r3, [r3, #21]
 80016dc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016e2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80016e8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7f1b      	ldrb	r3, [r3, #28]
 80016ee:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7f1b      	ldrb	r3, [r3, #28]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d106      	bne.n	800170a <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	3b01      	subs	r3, #1
 8001702:	045b      	lsls	r3, r3, #17
 8001704:	69ba      	ldr	r2, [r7, #24]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001716:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4313      	orrs	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b4c      	ldr	r3, [pc, #304]	; (8001860 <HAL_ADC_Init+0x2a8>)
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	69b9      	ldr	r1, [r7, #24]
 8001736:	430b      	orrs	r3, r1
 8001738:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fefe 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001744:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff20 	bl	8001590 <LL_ADC_INJ_IsConversionOngoing>
 8001750:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d14a      	bne.n	80017ee <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d147      	bne.n	80017ee <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7d1b      	ldrb	r3, [r3, #20]
 8001762:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001768:	4313      	orrs	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	68da      	ldr	r2, [r3, #12]
 8001772:	4b3c      	ldr	r3, [pc, #240]	; (8001864 <HAL_ADC_Init+0x2ac>)
 8001774:	4013      	ands	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	69b9      	ldr	r1, [r7, #24]
 800177c:	430b      	orrs	r3, r1
 800177e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001786:	2b01      	cmp	r3, #1
 8001788:	d11b      	bne.n	80017c2 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	691a      	ldr	r2, [r3, #16]
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <HAL_ADC_Init+0x2b0>)
 8001798:	4013      	ands	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800179e:	3a01      	subs	r2, #1
 80017a0:	0411      	lsls	r1, r2, #16
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80017a6:	4311      	orrs	r1, r2
 80017a8:	687a      	ldr	r2, [r7, #4]
 80017aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017ac:	4311      	orrs	r1, r2
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017b2:	430a      	orrs	r2, r1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0201 	orr.w	r2, r2, #1
 80017be:	611a      	str	r2, [r3, #16]
 80017c0:	e007      	b.n	80017d2 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 0201 	bic.w	r2, r2, #1
 80017d0:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	430a      	orrs	r2, r1
 80017e6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f000 fbab 	bl	8001f44 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d10c      	bne.n	8001810 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fc:	f023 010f 	bic.w	r1, r3, #15
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	1e5a      	subs	r2, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	430a      	orrs	r2, r1
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
 800180e:	e007      	b.n	8001820 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020f 	bic.w	r2, r2, #15
 800181e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001824:	f023 0303 	bic.w	r3, r3, #3
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	655a      	str	r2, [r3, #84]	; 0x54
 8001830:	e007      	b.n	8001842 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	f043 0210 	orr.w	r2, r3, #16
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001842:	7ffb      	ldrb	r3, [r7, #31]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3724      	adds	r7, #36	; 0x24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd90      	pop	{r4, r7, pc}
 800184c:	24000000 	.word	0x24000000
 8001850:	053e2d63 	.word	0x053e2d63
 8001854:	40022000 	.word	0x40022000
 8001858:	40022100 	.word	0x40022100
 800185c:	40022300 	.word	0x40022300
 8001860:	fff0c003 	.word	0xfff0c003
 8001864:	ffffbffc 	.word	0xffffbffc
 8001868:	fc00f81e 	.word	0xfc00f81e

0800186c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001874:	4856      	ldr	r0, [pc, #344]	; (80019d0 <HAL_ADC_Start+0x164>)
 8001876:	f7ff fd83 	bl	8001380 <LL_ADC_GetMultimode>
 800187a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fe5d 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	f040 809a 	bne.w	80019c2 <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001894:	2b01      	cmp	r3, #1
 8001896:	d101      	bne.n	800189c <HAL_ADC_Start+0x30>
 8001898:	2302      	movs	r3, #2
 800189a:	e095      	b.n	80019c8 <HAL_ADC_Start+0x15c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f000 fa71 	bl	8001d8c <ADC_Enable>
 80018aa:	4603      	mov	r3, r0
 80018ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018ae:	7dfb      	ldrb	r3, [r7, #23]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f040 8081 	bne.w	80019b8 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80018ba:	4b46      	ldr	r3, [pc, #280]	; (80019d4 <HAL_ADC_Start+0x168>)
 80018bc:	4013      	ands	r3, r2
 80018be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a43      	ldr	r2, [pc, #268]	; (80019d8 <HAL_ADC_Start+0x16c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d002      	beq.n	80018d6 <HAL_ADC_Start+0x6a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	e000      	b.n	80018d8 <HAL_ADC_Start+0x6c>
 80018d6:	4b41      	ldr	r3, [pc, #260]	; (80019dc <HAL_ADC_Start+0x170>)
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	4293      	cmp	r3, r2
 80018de:	d002      	beq.n	80018e6 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ea:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018fe:	d106      	bne.n	800190e <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001904:	f023 0206 	bic.w	r2, r3, #6
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	659a      	str	r2, [r3, #88]	; 0x58
 800190c:	e002      	b.n	8001914 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	221c      	movs	r2, #28
 800191a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2b      	ldr	r2, [pc, #172]	; (80019d8 <HAL_ADC_Start+0x16c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d002      	beq.n	8001934 <HAL_ADC_Start+0xc8>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	e000      	b.n	8001936 <HAL_ADC_Start+0xca>
 8001934:	4b29      	ldr	r3, [pc, #164]	; (80019dc <HAL_ADC_Start+0x170>)
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	4293      	cmp	r3, r2
 800193c:	d008      	beq.n	8001950 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	2b05      	cmp	r3, #5
 8001948:	d002      	beq.n	8001950 <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b09      	cmp	r3, #9
 800194e:	d114      	bne.n	800197a <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d007      	beq.n	800196e <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001966:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff fdbc 	bl	80014f0 <LL_ADC_REG_StartConversion>
 8001978:	e025      	b.n	80019c6 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800197e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <HAL_ADC_Start+0x16c>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d002      	beq.n	8001996 <HAL_ADC_Start+0x12a>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	e000      	b.n	8001998 <HAL_ADC_Start+0x12c>
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <HAL_ADC_Start+0x170>)
 8001998:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00f      	beq.n	80019c6 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80019ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54
 80019b6:	e006      	b.n	80019c6 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019c0:	e001      	b.n	80019c6 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019c2:	2302      	movs	r3, #2
 80019c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40022300 	.word	0x40022300
 80019d4:	fffff0fe 	.word	0xfffff0fe
 80019d8:	40022100 	.word	0x40022100
 80019dc:	40022000 	.word	0x40022000

080019e0 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d101      	bne.n	80019f6 <HAL_ADC_Stop+0x16>
 80019f2:	2302      	movs	r3, #2
 80019f4:	e021      	b.n	8001a3a <HAL_ADC_Stop+0x5a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80019fe:	2103      	movs	r1, #3
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f907 	bl	8001c14 <ADC_ConversionStop>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d10f      	bne.n	8001a30 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fa37 	bl	8001e84 <ADC_Disable>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d107      	bne.n	8001a30 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a24:	4b07      	ldr	r3, [pc, #28]	; (8001a44 <HAL_ADC_Stop+0x64>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	f043 0201 	orr.w	r2, r3, #1
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	ffffeefe 	.word	0xffffeefe

08001a48 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a52:	4866      	ldr	r0, [pc, #408]	; (8001bec <HAL_ADC_PollForConversion+0x1a4>)
 8001a54:	f7ff fc94 	bl	8001380 <LL_ADC_GetMultimode>
 8001a58:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d102      	bne.n	8001a68 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001a62:	2308      	movs	r3, #8
 8001a64:	61fb      	str	r3, [r7, #28]
 8001a66:	e02a      	b.n	8001abe <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d005      	beq.n	8001a7a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	2b05      	cmp	r3, #5
 8001a72:	d002      	beq.n	8001a7a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	2b09      	cmp	r3, #9
 8001a78:	d111      	bne.n	8001a9e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0301 	and.w	r3, r3, #1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d007      	beq.n	8001a98 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0a4      	b.n	8001be2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a98:	2304      	movs	r3, #4
 8001a9a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001a9c:	e00f      	b.n	8001abe <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001a9e:	4853      	ldr	r0, [pc, #332]	; (8001bec <HAL_ADC_PollForConversion+0x1a4>)
 8001aa0:	f7ff fc7c 	bl	800139c <LL_ADC_GetMultiDMATransfer>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d007      	beq.n	8001aba <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	f043 0220 	orr.w	r2, r3, #32
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e093      	b.n	8001be2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001aba:	2304      	movs	r3, #4
 8001abc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001abe:	f7ff fbf3 	bl	80012a8 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ac4:	e021      	b.n	8001b0a <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d01d      	beq.n	8001b0a <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001ace:	f7ff fbeb 	bl	80012a8 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d302      	bcc.n	8001ae4 <HAL_ADC_PollForConversion+0x9c>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d112      	bne.n	8001b0a <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10b      	bne.n	8001b0a <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f043 0204 	orr.w	r2, r3, #4
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e06b      	b.n	8001be2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0d6      	beq.n	8001ac6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fc16 	bl	800135a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d01c      	beq.n	8001b6e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	7d5b      	ldrb	r3, [r3, #21]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d118      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0308 	and.w	r3, r3, #8
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d111      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a1f      	ldr	r2, [pc, #124]	; (8001bf0 <HAL_ADC_PollForConversion+0x1a8>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d002      	beq.n	8001b7e <HAL_ADC_PollForConversion+0x136>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	e000      	b.n	8001b80 <HAL_ADC_PollForConversion+0x138>
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_ADC_PollForConversion+0x1ac>)
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d008      	beq.n	8001b9a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d005      	beq.n	8001b9a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	d002      	beq.n	8001b9a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b09      	cmp	r3, #9
 8001b98:	d104      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
 8001ba2:	e00c      	b.n	8001bbe <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a11      	ldr	r2, [pc, #68]	; (8001bf0 <HAL_ADC_PollForConversion+0x1a8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d002      	beq.n	8001bb4 <HAL_ADC_PollForConversion+0x16c>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADC_PollForConversion+0x16e>
 8001bb4:	4b0f      	ldr	r3, [pc, #60]	; (8001bf4 <HAL_ADC_PollForConversion+0x1ac>)
 8001bb6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	2b08      	cmp	r3, #8
 8001bc2:	d104      	bne.n	8001bce <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2208      	movs	r2, #8
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e008      	b.n	8001be0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	220c      	movs	r2, #12
 8001bde:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40022300 	.word	0x40022300
 8001bf0:	40022100 	.word	0x40022100
 8001bf4:	40022000 	.word	0x40022000

08001bf8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fc88 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001c30:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fcaa 	bl	8001590 <LL_ADC_INJ_IsConversionOngoing>
 8001c3c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d103      	bne.n	8001c4c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 8098 	beq.w	8001d7c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d02a      	beq.n	8001cb0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7d5b      	ldrb	r3, [r3, #21]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d126      	bne.n	8001cb0 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	7d1b      	ldrb	r3, [r3, #20]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d122      	bne.n	8001cb0 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001c6e:	e014      	b.n	8001c9a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	4a45      	ldr	r2, [pc, #276]	; (8001d88 <ADC_ConversionStop+0x174>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d90d      	bls.n	8001c94 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f043 0210 	orr.w	r2, r3, #16
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c88:	f043 0201 	orr.w	r2, r3, #1
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e074      	b.n	8001d7e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	3301      	adds	r3, #1
 8001c98:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca4:	2b40      	cmp	r3, #64	; 0x40
 8001ca6:	d1e3      	bne.n	8001c70 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2240      	movs	r2, #64	; 0x40
 8001cae:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d014      	beq.n	8001ce0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fc40 	bl	8001540 <LL_ADC_REG_IsConversionOngoing>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d00c      	beq.n	8001ce0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fbfd 	bl	80014ca <LL_ADC_IsDisableOngoing>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d104      	bne.n	8001ce0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fc1c 	bl	8001518 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d014      	beq.n	8001d10 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fc50 	bl	8001590 <LL_ADC_INJ_IsConversionOngoing>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00c      	beq.n	8001d10 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fbe5 	bl	80014ca <LL_ADC_IsDisableOngoing>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d104      	bne.n	8001d10 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fc2c 	bl	8001568 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d005      	beq.n	8001d22 <ADC_ConversionStop+0x10e>
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	2b03      	cmp	r3, #3
 8001d1a:	d105      	bne.n	8001d28 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d1c:	230c      	movs	r3, #12
 8001d1e:	617b      	str	r3, [r7, #20]
        break;
 8001d20:	e005      	b.n	8001d2e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d22:	2308      	movs	r3, #8
 8001d24:	617b      	str	r3, [r7, #20]
        break;
 8001d26:	e002      	b.n	8001d2e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d28:	2304      	movs	r3, #4
 8001d2a:	617b      	str	r3, [r7, #20]
        break;
 8001d2c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d2e:	f7ff fabb 	bl	80012a8 <HAL_GetTick>
 8001d32:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d34:	e01b      	b.n	8001d6e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d36:	f7ff fab7 	bl	80012a8 <HAL_GetTick>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	2b05      	cmp	r3, #5
 8001d42:	d914      	bls.n	8001d6e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e007      	b.n	8001d7e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	689a      	ldr	r2, [r3, #8]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d1dc      	bne.n	8001d36 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3720      	adds	r7, #32
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	000cdbff 	.word	0x000cdbff

08001d8c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fb83 	bl	80014a4 <LL_ADC_IsEnabled>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d161      	bne.n	8001e68 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	4b32      	ldr	r3, [pc, #200]	; (8001e74 <ADC_Enable+0xe8>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d00d      	beq.n	8001dce <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e04d      	b.n	8001e6a <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fb3e 	bl	8001454 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001dd8:	f7ff fa66 	bl	80012a8 <HAL_GetTick>
 8001ddc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001dde:	4826      	ldr	r0, [pc, #152]	; (8001e78 <ADC_Enable+0xec>)
 8001de0:	f7ff face 	bl	8001380 <LL_ADC_GetMultimode>
 8001de4:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a24      	ldr	r2, [pc, #144]	; (8001e7c <ADC_Enable+0xf0>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d002      	beq.n	8001df6 <ADC_Enable+0x6a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e000      	b.n	8001df8 <ADC_Enable+0x6c>
 8001df6:	4b22      	ldr	r3, [pc, #136]	; (8001e80 <ADC_Enable+0xf4>)
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	6812      	ldr	r2, [r2, #0]
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d02c      	beq.n	8001e5a <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d130      	bne.n	8001e68 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e06:	e028      	b.n	8001e5a <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fb49 	bl	80014a4 <LL_ADC_IsEnabled>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d104      	bne.n	8001e22 <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fb19 	bl	8001454 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e22:	f7ff fa41 	bl	80012a8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d914      	bls.n	8001e5a <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d00d      	beq.n	8001e5a <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e42:	f043 0210 	orr.w	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	f043 0201 	orr.w	r2, r3, #1
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e007      	b.n	8001e6a <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d1cf      	bne.n	8001e08 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	8000003f 	.word	0x8000003f
 8001e78:	40022300 	.word	0x40022300
 8001e7c:	40022100 	.word	0x40022100
 8001e80:	40022000 	.word	0x40022000

08001e84 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fb1a 	bl	80014ca <LL_ADC_IsDisableOngoing>
 8001e96:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fb01 	bl	80014a4 <LL_ADC_IsEnabled>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d047      	beq.n	8001f38 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d144      	bne.n	8001f38 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 030d 	and.w	r3, r3, #13
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d10c      	bne.n	8001ed6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fadb 	bl	800147c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2203      	movs	r2, #3
 8001ecc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ece:	f7ff f9eb 	bl	80012a8 <HAL_GetTick>
 8001ed2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001ed4:	e029      	b.n	8001f2a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eda:	f043 0210 	orr.w	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f043 0201 	orr.w	r2, r3, #1
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e023      	b.n	8001f3a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001ef2:	f7ff f9d9 	bl	80012a8 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d914      	bls.n	8001f2a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f043 0210 	orr.w	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e007      	b.n	8001f3a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1dc      	bne.n	8001ef2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
	...

08001f44 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8001f4c:	4b60      	ldr	r3, [pc, #384]	; (80020d0 <ADC_ConfigureBoostMode+0x18c>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01c      	beq.n	8001f92 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8001f58:	f001 fca6 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 8001f5c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001f66:	d010      	beq.n	8001f8a <ADC_ConfigureBoostMode+0x46>
 8001f68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001f6c:	d873      	bhi.n	8002056 <ADC_ConfigureBoostMode+0x112>
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f72:	d002      	beq.n	8001f7a <ADC_ConfigureBoostMode+0x36>
 8001f74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001f78:	d16d      	bne.n	8002056 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	68fa      	ldr	r2, [r7, #12]
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	60fb      	str	r3, [r7, #12]
        break;
 8001f88:	e068      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	60fb      	str	r3, [r7, #12]
        break;
 8001f90:	e064      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8001f92:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001f96:	f04f 0100 	mov.w	r1, #0
 8001f9a:	f002 fe9f 	bl	8004cdc <HAL_RCCEx_GetPeriphCLKFreq>
 8001f9e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001fa8:	d051      	beq.n	800204e <ADC_ConfigureBoostMode+0x10a>
 8001faa:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8001fae:	d854      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8001fb0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001fb4:	d047      	beq.n	8002046 <ADC_ConfigureBoostMode+0x102>
 8001fb6:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001fba:	d84e      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8001fbc:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001fc0:	d03d      	beq.n	800203e <ADC_ConfigureBoostMode+0xfa>
 8001fc2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001fc6:	d848      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8001fc8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fcc:	d033      	beq.n	8002036 <ADC_ConfigureBoostMode+0xf2>
 8001fce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001fd2:	d842      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8001fd4:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001fd8:	d029      	beq.n	800202e <ADC_ConfigureBoostMode+0xea>
 8001fda:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001fde:	d83c      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8001fe0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001fe4:	d01a      	beq.n	800201c <ADC_ConfigureBoostMode+0xd8>
 8001fe6:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001fea:	d836      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8001fec:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001ff0:	d014      	beq.n	800201c <ADC_ConfigureBoostMode+0xd8>
 8001ff2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001ff6:	d830      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8001ff8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ffc:	d00e      	beq.n	800201c <ADC_ConfigureBoostMode+0xd8>
 8001ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002002:	d82a      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8002004:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002008:	d008      	beq.n	800201c <ADC_ConfigureBoostMode+0xd8>
 800200a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800200e:	d824      	bhi.n	800205a <ADC_ConfigureBoostMode+0x116>
 8002010:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002014:	d002      	beq.n	800201c <ADC_ConfigureBoostMode+0xd8>
 8002016:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800201a:	d11e      	bne.n	800205a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	0c9b      	lsrs	r3, r3, #18
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	fbb2 f3f3 	udiv	r3, r2, r3
 800202a:	60fb      	str	r3, [r7, #12]
        break;
 800202c:	e016      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	091b      	lsrs	r3, r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
        break;
 8002034:	e012      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	095b      	lsrs	r3, r3, #5
 800203a:	60fb      	str	r3, [r7, #12]
        break;
 800203c:	e00e      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	099b      	lsrs	r3, r3, #6
 8002042:	60fb      	str	r3, [r7, #12]
        break;
 8002044:	e00a      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	09db      	lsrs	r3, r3, #7
 800204a:	60fb      	str	r3, [r7, #12]
        break;
 800204c:	e006      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	60fb      	str	r3, [r7, #12]
        break;
 8002054:	e002      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
        break;
 8002056:	bf00      	nop
 8002058:	e000      	b.n	800205c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 800205a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	4a1b      	ldr	r2, [pc, #108]	; (80020d4 <ADC_ConfigureBoostMode+0x190>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d808      	bhi.n	800207c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002078:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800207a:	e025      	b.n	80020c8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a16      	ldr	r2, [pc, #88]	; (80020d8 <ADC_ConfigureBoostMode+0x194>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d80a      	bhi.n	800209a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002096:	609a      	str	r2, [r3, #8]
}
 8002098:	e016      	b.n	80020c8 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4a0f      	ldr	r2, [pc, #60]	; (80020dc <ADC_ConfigureBoostMode+0x198>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d80a      	bhi.n	80020b8 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020b4:	609a      	str	r2, [r3, #8]
}
 80020b6:	e007      	b.n	80020c8 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80020c6:	609a      	str	r2, [r3, #8]
}
 80020c8:	bf00      	nop
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022300 	.word	0x40022300
 80020d4:	005f5e10 	.word	0x005f5e10
 80020d8:	00bebc20 	.word	0x00bebc20
 80020dc:	017d7840 	.word	0x017d7840

080020e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f0:	4b0b      	ldr	r3, [pc, #44]	; (8002120 <__NVIC_SetPriorityGrouping+0x40>)
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020fc:	4013      	ands	r3, r2
 80020fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002108:	4b06      	ldr	r3, [pc, #24]	; (8002124 <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	4313      	orrs	r3, r2
 800210c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <__NVIC_SetPriorityGrouping+0x40>)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	60d3      	str	r3, [r2, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	e000ed00 	.word	0xe000ed00
 8002124:	05fa0000 	.word	0x05fa0000

08002128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <__NVIC_GetPriorityGrouping+0x18>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	f003 0307 	and.w	r3, r3, #7
}
 8002136:	4618      	mov	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3b01      	subs	r3, #1
 800220c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002210:	d301      	bcc.n	8002216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002212:	2301      	movs	r3, #1
 8002214:	e00f      	b.n	8002236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002216:	4a0a      	ldr	r2, [pc, #40]	; (8002240 <SysTick_Config+0x40>)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3b01      	subs	r3, #1
 800221c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221e:	210f      	movs	r1, #15
 8002220:	f04f 30ff 	mov.w	r0, #4294967295
 8002224:	f7ff ff8e 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002228:	4b05      	ldr	r3, [pc, #20]	; (8002240 <SysTick_Config+0x40>)
 800222a:	2200      	movs	r2, #0
 800222c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222e:	4b04      	ldr	r3, [pc, #16]	; (8002240 <SysTick_Config+0x40>)
 8002230:	2207      	movs	r2, #7
 8002232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002234:	2300      	movs	r3, #0
}
 8002236:	4618      	mov	r0, r3
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	e000e010 	.word	0xe000e010

08002244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f7ff ff47 	bl	80020e0 <__NVIC_SetPriorityGrouping>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b086      	sub	sp, #24
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002268:	f7ff ff5e 	bl	8002128 <__NVIC_GetPriorityGrouping>
 800226c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff ff90 	bl	8002198 <NVIC_EncodePriority>
 8002278:	4602      	mov	r2, r0
 800227a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff5f 	bl	8002144 <__NVIC_SetPriority>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	f7ff ffb2 	bl	8002200 <SysTick_Config>
 800229c:	4603      	mov	r3, r0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e014      	b.n	80022e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	791b      	ldrb	r3, [r3, #4]
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d105      	bne.n	80022ce <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f7fe fab3 	bl	8000834 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2202      	movs	r2, #2
 80022d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2201      	movs	r2, #1
 80022de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
	...

080022ec <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	795b      	ldrb	r3, [r3, #5]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d101      	bne.n	8002304 <HAL_DAC_ConfigChannel+0x18>
 8002300:	2302      	movs	r3, #2
 8002302:	e12a      	b.n	800255a <HAL_DAC_ConfigChannel+0x26e>
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2201      	movs	r2, #1
 8002308:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2202      	movs	r2, #2
 800230e:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b04      	cmp	r3, #4
 8002316:	f040 8081 	bne.w	800241c <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800231a:	f7fe ffc5 	bl	80012a8 <HAL_GetTick>
 800231e:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d140      	bne.n	80023a8 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002326:	e018      	b.n	800235a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002328:	f7fe ffbe 	bl	80012a8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d911      	bls.n	800235a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800233c:	4b89      	ldr	r3, [pc, #548]	; (8002564 <HAL_DAC_ConfigChannel+0x278>)
 800233e:	4013      	ands	r3, r2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d00a      	beq.n	800235a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f043 0208 	orr.w	r2, r3, #8
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2203      	movs	r2, #3
 8002354:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e0ff      	b.n	800255a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002360:	4b80      	ldr	r3, [pc, #512]	; (8002564 <HAL_DAC_ConfigChannel+0x278>)
 8002362:	4013      	ands	r3, r2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1df      	bne.n	8002328 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8002368:	2001      	movs	r0, #1
 800236a:	f7fe ffa9 	bl	80012c0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	6992      	ldr	r2, [r2, #24]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
 8002378:	e023      	b.n	80023c2 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800237a:	f7fe ff95 	bl	80012a8 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b01      	cmp	r3, #1
 8002386:	d90f      	bls.n	80023a8 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800238e:	2b00      	cmp	r3, #0
 8002390:	da0a      	bge.n	80023a8 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	f043 0208 	orr.w	r2, r3, #8
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2203      	movs	r2, #3
 80023a2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e0d8      	b.n	800255a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	dbe3      	blt.n	800237a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 80023b2:	2001      	movs	r0, #1
 80023b4:	f7fe ff84 	bl	80012c0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68ba      	ldr	r2, [r7, #8]
 80023be:	6992      	ldr	r2, [r2, #24]
 80023c0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	ea02 0103 	and.w	r1, r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	409a      	lsls	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	430a      	orrs	r2, r1
 80023ee:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f003 0310 	and.w	r3, r3, #16
 80023fc:	21ff      	movs	r1, #255	; 0xff
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	ea02 0103 	and.w	r1, r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	6a1a      	ldr	r2, [r3, #32]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f003 0310 	and.w	r3, r3, #16
 8002412:	409a      	lsls	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	2b01      	cmp	r3, #1
 8002422:	d11d      	bne.n	8002460 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800242a:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	221f      	movs	r2, #31
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	695b      	ldr	r3, [r3, #20]
 8002444:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f003 0310 	and.w	r3, r3, #16
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0310 	and.w	r3, r3, #16
 800246e:	2207      	movs	r2, #7
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4013      	ands	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d102      	bne.n	800248a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002484:	2300      	movs	r3, #0
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	e00f      	b.n	80024aa <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	2b02      	cmp	r3, #2
 8002490:	d102      	bne.n	8002498 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002492:	2301      	movs	r3, #1
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e008      	b.n	80024aa <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d102      	bne.n	80024a6 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80024a0:	2301      	movs	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	e001      	b.n	80024aa <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f003 0310 	and.w	r3, r3, #16
 80024c0:	693a      	ldr	r2, [r7, #16]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43da      	mvns	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	400a      	ands	r2, r1
 80024f0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f003 0310 	and.w	r3, r3, #16
 8002500:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4013      	ands	r3, r2
 800250e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4313      	orrs	r3, r2
 8002526:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	697a      	ldr	r2, [r7, #20]
 800252e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6819      	ldr	r1, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	22c0      	movs	r2, #192	; 0xc0
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	43da      	mvns	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	400a      	ands	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2201      	movs	r2, #1
 8002550:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20008000 	.word	0x20008000

08002568 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	; 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002576:	4b89      	ldr	r3, [pc, #548]	; (800279c <HAL_GPIO_Init+0x234>)
 8002578:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800257a:	e194      	b.n	80028a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	2101      	movs	r1, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa01 f303 	lsl.w	r3, r1, r3
 8002588:	4013      	ands	r3, r2
 800258a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	2b00      	cmp	r3, #0
 8002590:	f000 8186 	beq.w	80028a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b01      	cmp	r3, #1
 800259e:	d005      	beq.n	80025ac <HAL_GPIO_Init+0x44>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f003 0303 	and.w	r3, r3, #3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d130      	bne.n	800260e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	2203      	movs	r2, #3
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025e2:	2201      	movs	r2, #1
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 0201 	and.w	r2, r3, #1
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4313      	orrs	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69ba      	ldr	r2, [r7, #24]
 800260c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b03      	cmp	r3, #3
 8002618:	d017      	beq.n	800264a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	2203      	movs	r2, #3
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d123      	bne.n	800269e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	08da      	lsrs	r2, r3, #3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	3208      	adds	r2, #8
 800265e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	220f      	movs	r2, #15
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	4013      	ands	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	f003 0307 	and.w	r3, r3, #7
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	08da      	lsrs	r2, r3, #3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3208      	adds	r2, #8
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0203 	and.w	r2, r3, #3
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 80e0 	beq.w	80028a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026e0:	4b2f      	ldr	r3, [pc, #188]	; (80027a0 <HAL_GPIO_Init+0x238>)
 80026e2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80026e6:	4a2e      	ldr	r2, [pc, #184]	; (80027a0 <HAL_GPIO_Init+0x238>)
 80026e8:	f043 0302 	orr.w	r3, r3, #2
 80026ec:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80026f0:	4b2b      	ldr	r3, [pc, #172]	; (80027a0 <HAL_GPIO_Init+0x238>)
 80026f2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026fe:	4a29      	ldr	r2, [pc, #164]	; (80027a4 <HAL_GPIO_Init+0x23c>)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	089b      	lsrs	r3, r3, #2
 8002704:	3302      	adds	r3, #2
 8002706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800270a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 0303 	and.w	r3, r3, #3
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	220f      	movs	r2, #15
 8002716:	fa02 f303 	lsl.w	r3, r2, r3
 800271a:	43db      	mvns	r3, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4013      	ands	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a20      	ldr	r2, [pc, #128]	; (80027a8 <HAL_GPIO_Init+0x240>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d052      	beq.n	80027d0 <HAL_GPIO_Init+0x268>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a1f      	ldr	r2, [pc, #124]	; (80027ac <HAL_GPIO_Init+0x244>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d031      	beq.n	8002796 <HAL_GPIO_Init+0x22e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a1e      	ldr	r2, [pc, #120]	; (80027b0 <HAL_GPIO_Init+0x248>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d02b      	beq.n	8002792 <HAL_GPIO_Init+0x22a>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_GPIO_Init+0x24c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d025      	beq.n	800278e <HAL_GPIO_Init+0x226>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_GPIO_Init+0x250>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <HAL_GPIO_Init+0x222>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a1b      	ldr	r2, [pc, #108]	; (80027bc <HAL_GPIO_Init+0x254>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d019      	beq.n	8002786 <HAL_GPIO_Init+0x21e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a1a      	ldr	r2, [pc, #104]	; (80027c0 <HAL_GPIO_Init+0x258>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d013      	beq.n	8002782 <HAL_GPIO_Init+0x21a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a19      	ldr	r2, [pc, #100]	; (80027c4 <HAL_GPIO_Init+0x25c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d00d      	beq.n	800277e <HAL_GPIO_Init+0x216>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a18      	ldr	r2, [pc, #96]	; (80027c8 <HAL_GPIO_Init+0x260>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d007      	beq.n	800277a <HAL_GPIO_Init+0x212>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a17      	ldr	r2, [pc, #92]	; (80027cc <HAL_GPIO_Init+0x264>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d101      	bne.n	8002776 <HAL_GPIO_Init+0x20e>
 8002772:	2309      	movs	r3, #9
 8002774:	e02d      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002776:	230a      	movs	r3, #10
 8002778:	e02b      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800277a:	2308      	movs	r3, #8
 800277c:	e029      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800277e:	2307      	movs	r3, #7
 8002780:	e027      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002782:	2306      	movs	r3, #6
 8002784:	e025      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002786:	2305      	movs	r3, #5
 8002788:	e023      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800278a:	2304      	movs	r3, #4
 800278c:	e021      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800278e:	2303      	movs	r3, #3
 8002790:	e01f      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002792:	2302      	movs	r3, #2
 8002794:	e01d      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 8002796:	2301      	movs	r3, #1
 8002798:	e01b      	b.n	80027d2 <HAL_GPIO_Init+0x26a>
 800279a:	bf00      	nop
 800279c:	58000080 	.word	0x58000080
 80027a0:	58024400 	.word	0x58024400
 80027a4:	58000400 	.word	0x58000400
 80027a8:	58020000 	.word	0x58020000
 80027ac:	58020400 	.word	0x58020400
 80027b0:	58020800 	.word	0x58020800
 80027b4:	58020c00 	.word	0x58020c00
 80027b8:	58021000 	.word	0x58021000
 80027bc:	58021400 	.word	0x58021400
 80027c0:	58021800 	.word	0x58021800
 80027c4:	58021c00 	.word	0x58021c00
 80027c8:	58022000 	.word	0x58022000
 80027cc:	58022400 	.word	0x58022400
 80027d0:	2300      	movs	r3, #0
 80027d2:	69fa      	ldr	r2, [r7, #28]
 80027d4:	f002 0203 	and.w	r2, r2, #3
 80027d8:	0092      	lsls	r2, r2, #2
 80027da:	4093      	lsls	r3, r2
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027e2:	4938      	ldr	r1, [pc, #224]	; (80028c4 <HAL_GPIO_Init+0x35c>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80027f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002816:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800281e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002844:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3301      	adds	r3, #1
 80028a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f47f ae63 	bne.w	800257c <HAL_GPIO_Init+0x14>
  }
}
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	3724      	adds	r7, #36	; 0x24
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	58000400 	.word	0x58000400

080028c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	460b      	mov	r3, r1
 80028d2:	807b      	strh	r3, [r7, #2]
 80028d4:	4613      	mov	r3, r2
 80028d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028d8:	787b      	ldrb	r3, [r7, #1]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028de:	887a      	ldrh	r2, [r7, #2]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80028e4:	e003      	b.n	80028ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80028e6:	887b      	ldrh	r3, [r7, #2]
 80028e8:	041a      	lsls	r2, r3, #16
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	619a      	str	r2, [r3, #24]
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
 8002902:	460b      	mov	r3, r1
 8002904:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800290c:	887a      	ldrh	r2, [r7, #2]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	041a      	lsls	r2, r3, #16
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	43d9      	mvns	r1, r3
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	400b      	ands	r3, r1
 800291c:	431a      	orrs	r2, r3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002938:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	2b06      	cmp	r3, #6
 8002942:	d00a      	beq.n	800295a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002944:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e040      	b.n	80029d8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e03e      	b.n	80029d8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800295a:	4b21      	ldr	r3, [pc, #132]	; (80029e0 <HAL_PWREx_ConfigSupply+0xb0>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002962:	491f      	ldr	r1, [pc, #124]	; (80029e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4313      	orrs	r3, r2
 8002968:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800296a:	f7fe fc9d 	bl	80012a8 <HAL_GetTick>
 800296e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002970:	e009      	b.n	8002986 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002972:	f7fe fc99 	bl	80012a8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002980:	d901      	bls.n	8002986 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e028      	b.n	80029d8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_PWREx_ConfigSupply+0xb0>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800298e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002992:	d1ee      	bne.n	8002972 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b1e      	cmp	r3, #30
 8002998:	d008      	beq.n	80029ac <HAL_PWREx_ConfigSupply+0x7c>
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b2e      	cmp	r3, #46	; 0x2e
 800299e:	d005      	beq.n	80029ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b1d      	cmp	r3, #29
 80029a4:	d002      	beq.n	80029ac <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b2d      	cmp	r3, #45	; 0x2d
 80029aa:	d114      	bne.n	80029d6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80029ac:	f7fe fc7c 	bl	80012a8 <HAL_GetTick>
 80029b0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029b2:	e009      	b.n	80029c8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80029b4:	f7fe fc78 	bl	80012a8 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029c2:	d901      	bls.n	80029c8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e007      	b.n	80029d8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_PWREx_ConfigSupply+0xb0>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d1ee      	bne.n	80029b4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	58024800 	.word	0x58024800

080029e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b08c      	sub	sp, #48	; 0x30
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	f000 bc1f 	b.w	8003236 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0301 	and.w	r3, r3, #1
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80b3 	beq.w	8002b6c <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a06:	4b95      	ldr	r3, [pc, #596]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a10:	4b92      	ldr	r3, [pc, #584]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d007      	beq.n	8002a2c <HAL_RCC_OscConfig+0x48>
 8002a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1e:	2b18      	cmp	r3, #24
 8002a20:	d112      	bne.n	8002a48 <HAL_RCC_OscConfig+0x64>
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d10d      	bne.n	8002a48 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	4b8b      	ldr	r3, [pc, #556]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 8098 	beq.w	8002b6a <HAL_RCC_OscConfig+0x186>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8093 	bne.w	8002b6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e3f6      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a50:	d106      	bne.n	8002a60 <HAL_RCC_OscConfig+0x7c>
 8002a52:	4b82      	ldr	r3, [pc, #520]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a81      	ldr	r2, [pc, #516]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e058      	b.n	8002b12 <HAL_RCC_OscConfig+0x12e>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d112      	bne.n	8002a8e <HAL_RCC_OscConfig+0xaa>
 8002a68:	4b7c      	ldr	r3, [pc, #496]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a7b      	ldr	r2, [pc, #492]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b79      	ldr	r3, [pc, #484]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a78      	ldr	r2, [pc, #480]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4b76      	ldr	r3, [pc, #472]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a75      	ldr	r2, [pc, #468]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a8a:	6013      	str	r3, [r2, #0]
 8002a8c:	e041      	b.n	8002b12 <HAL_RCC_OscConfig+0x12e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a96:	d112      	bne.n	8002abe <HAL_RCC_OscConfig+0xda>
 8002a98:	4b70      	ldr	r3, [pc, #448]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6f      	ldr	r2, [pc, #444]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002a9e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a6c      	ldr	r2, [pc, #432]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002aaa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a69      	ldr	r2, [pc, #420]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aba:	6013      	str	r3, [r2, #0]
 8002abc:	e029      	b.n	8002b12 <HAL_RCC_OscConfig+0x12e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002ac6:	d112      	bne.n	8002aee <HAL_RCC_OscConfig+0x10a>
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a63      	ldr	r2, [pc, #396]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002ace:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b61      	ldr	r3, [pc, #388]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a60      	ldr	r2, [pc, #384]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002ada:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ade:	6013      	str	r3, [r2, #0]
 8002ae0:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a5d      	ldr	r2, [pc, #372]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002ae6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	e011      	b.n	8002b12 <HAL_RCC_OscConfig+0x12e>
 8002aee:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a5a      	ldr	r2, [pc, #360]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002af4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af8:	6013      	str	r3, [r2, #0]
 8002afa:	4b58      	ldr	r3, [pc, #352]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a57      	ldr	r2, [pc, #348]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002b00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b04:	6013      	str	r3, [r2, #0]
 8002b06:	4b55      	ldr	r3, [pc, #340]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a54      	ldr	r2, [pc, #336]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002b0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002b10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d013      	beq.n	8002b42 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fbc5 	bl	80012a8 <HAL_GetTick>
 8002b1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b22:	f7fe fbc1 	bl	80012a8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b64      	cmp	r3, #100	; 0x64
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e380      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b34:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d0f0      	beq.n	8002b22 <HAL_RCC_OscConfig+0x13e>
 8002b40:	e014      	b.n	8002b6c <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b42:	f7fe fbb1 	bl	80012a8 <HAL_GetTick>
 8002b46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b4a:	f7fe fbad 	bl	80012a8 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e36c      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b5c:	4b3f      	ldr	r3, [pc, #252]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1f0      	bne.n	8002b4a <HAL_RCC_OscConfig+0x166>
 8002b68:	e000      	b.n	8002b6c <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 808c 	beq.w	8002c92 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7a:	4b38      	ldr	r3, [pc, #224]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b82:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b88:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b8a:	6a3b      	ldr	r3, [r7, #32]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d007      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x1bc>
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	2b18      	cmp	r3, #24
 8002b94:	d137      	bne.n	8002c06 <HAL_RCC_OscConfig+0x222>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d132      	bne.n	8002c06 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x1d4>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d101      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e33e      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bb8:	4b28      	ldr	r3, [pc, #160]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 0219 	bic.w	r2, r3, #25
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	4925      	ldr	r1, [pc, #148]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bca:	f7fe fb6d 	bl	80012a8 <HAL_GetTick>
 8002bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bd0:	e008      	b.n	8002be4 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd2:	f7fe fb69 	bl	80012a8 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d901      	bls.n	8002be4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002be0:	2303      	movs	r3, #3
 8002be2:	e328      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be4:	4b1d      	ldr	r3, [pc, #116]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0f0      	beq.n	8002bd2 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf0:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	061b      	lsls	r3, r3, #24
 8002bfe:	4917      	ldr	r1, [pc, #92]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c04:	e045      	b.n	8002c92 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d028      	beq.n	8002c60 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c0e:	4b13      	ldr	r3, [pc, #76]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 0219 	bic.w	r2, r3, #25
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	4910      	ldr	r1, [pc, #64]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c20:	f7fe fb42 	bl	80012a8 <HAL_GetTick>
 8002c24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c28:	f7fe fb3e 	bl	80012a8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e2fd      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c3a:	4b08      	ldr	r3, [pc, #32]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0304 	and.w	r3, r3, #4
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	061b      	lsls	r3, r3, #24
 8002c54:	4901      	ldr	r1, [pc, #4]	; (8002c5c <HAL_RCC_OscConfig+0x278>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	604b      	str	r3, [r1, #4]
 8002c5a:	e01a      	b.n	8002c92 <HAL_RCC_OscConfig+0x2ae>
 8002c5c:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c60:	4b97      	ldr	r3, [pc, #604]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a96      	ldr	r2, [pc, #600]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002c66:	f023 0301 	bic.w	r3, r3, #1
 8002c6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c6c:	f7fe fb1c 	bl	80012a8 <HAL_GetTick>
 8002c70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c72:	e008      	b.n	8002c86 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c74:	f7fe fb18 	bl	80012a8 <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d901      	bls.n	8002c86 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e2d7      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002c86:	4b8e      	ldr	r3, [pc, #568]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0304 	and.w	r3, r3, #4
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f0      	bne.n	8002c74 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d06a      	beq.n	8002d74 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c9e:	4b88      	ldr	r3, [pc, #544]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ca6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ca8:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d007      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x2e0>
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	2b18      	cmp	r3, #24
 8002cb8:	d11b      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x30e>
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d116      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cc4:	4b7e      	ldr	r3, [pc, #504]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_RCC_OscConfig+0x2f8>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	2b80      	cmp	r3, #128	; 0x80
 8002cd6:	d001      	beq.n	8002cdc <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e2ac      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002cdc:	4b78      	ldr	r3, [pc, #480]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a1b      	ldr	r3, [r3, #32]
 8002ce8:	061b      	lsls	r3, r3, #24
 8002cea:	4975      	ldr	r1, [pc, #468]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002cf0:	e040      	b.n	8002d74 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69db      	ldr	r3, [r3, #28]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d023      	beq.n	8002d42 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002cfa:	4b71      	ldr	r3, [pc, #452]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a70      	ldr	r2, [pc, #448]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d06:	f7fe facf 	bl	80012a8 <HAL_GetTick>
 8002d0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d0c:	e008      	b.n	8002d20 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d0e:	f7fe facb 	bl	80012a8 <HAL_GetTick>
 8002d12:	4602      	mov	r2, r0
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	2b02      	cmp	r3, #2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e28a      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d20:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0f0      	beq.n	8002d0e <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d2c:	4b64      	ldr	r3, [pc, #400]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	061b      	lsls	r3, r3, #24
 8002d3a:	4961      	ldr	r1, [pc, #388]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60cb      	str	r3, [r1, #12]
 8002d40:	e018      	b.n	8002d74 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a5e      	ldr	r2, [pc, #376]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4e:	f7fe faab 	bl	80012a8 <HAL_GetTick>
 8002d52:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002d56:	f7fe faa7 	bl	80012a8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e266      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1f0      	bne.n	8002d56 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d036      	beq.n	8002dee <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d019      	beq.n	8002dbc <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d88:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d8c:	4a4c      	ldr	r2, [pc, #304]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fe fa88 	bl	80012a8 <HAL_GetTick>
 8002d98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d9c:	f7fe fa84 	bl	80012a8 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e243      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002dae:	4b44      	ldr	r3, [pc, #272]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x3b8>
 8002dba:	e018      	b.n	8002dee <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002dbc:	4b40      	ldr	r3, [pc, #256]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002dbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dc0:	4a3f      	ldr	r2, [pc, #252]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002dc2:	f023 0301 	bic.w	r3, r3, #1
 8002dc6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe fa6e 	bl	80012a8 <HAL_GetTick>
 8002dcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7fe fa6a 	bl	80012a8 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e229      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002de2:	4b37      	ldr	r3, [pc, #220]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0320 	and.w	r3, r3, #32
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d036      	beq.n	8002e68 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d019      	beq.n	8002e36 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002e02:	4b2f      	ldr	r3, [pc, #188]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a2e      	ldr	r2, [pc, #184]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e08:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e0e:	f7fe fa4b 	bl	80012a8 <HAL_GetTick>
 8002e12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e16:	f7fe fa47 	bl	80012a8 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b02      	cmp	r3, #2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e206      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002e28:	4b25      	ldr	r3, [pc, #148]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x432>
 8002e34:	e018      	b.n	8002e68 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002e36:	4b22      	ldr	r3, [pc, #136]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a21      	ldr	r2, [pc, #132]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e40:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002e42:	f7fe fa31 	bl	80012a8 <HAL_GetTick>
 8002e46:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002e4a:	f7fe fa2d 	bl	80012a8 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e1ec      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002e5c:	4b18      	ldr	r3, [pc, #96]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f0      	bne.n	8002e4a <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80af 	beq.w	8002fd4 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_RCC_OscConfig+0x4e0>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a12      	ldr	r2, [pc, #72]	; (8002ec4 <HAL_RCC_OscConfig+0x4e0>)
 8002e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e82:	f7fe fa11 	bl	80012a8 <HAL_GetTick>
 8002e86:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e88:	e008      	b.n	8002e9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e8a:	f7fe fa0d 	bl	80012a8 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b64      	cmp	r3, #100	; 0x64
 8002e96:	d901      	bls.n	8002e9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e1cc      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e9c:	4b09      	ldr	r3, [pc, #36]	; (8002ec4 <HAL_RCC_OscConfig+0x4e0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d0f0      	beq.n	8002e8a <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10b      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x4e4>
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	4a02      	ldr	r2, [pc, #8]	; (8002ec0 <HAL_RCC_OscConfig+0x4dc>)
 8002eb6:	f043 0301 	orr.w	r3, r3, #1
 8002eba:	6713      	str	r3, [r2, #112]	; 0x70
 8002ebc:	e05b      	b.n	8002f76 <HAL_RCC_OscConfig+0x592>
 8002ebe:	bf00      	nop
 8002ec0:	58024400 	.word	0x58024400
 8002ec4:	58024800 	.word	0x58024800
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d112      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x512>
 8002ed0:	4b9d      	ldr	r3, [pc, #628]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed4:	4a9c      	ldr	r2, [pc, #624]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002ed6:	f023 0301 	bic.w	r3, r3, #1
 8002eda:	6713      	str	r3, [r2, #112]	; 0x70
 8002edc:	4b9a      	ldr	r3, [pc, #616]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	4a99      	ldr	r2, [pc, #612]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002ee2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee8:	4b97      	ldr	r3, [pc, #604]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eec:	4a96      	ldr	r2, [pc, #600]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef4:	e03f      	b.n	8002f76 <HAL_RCC_OscConfig+0x592>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d112      	bne.n	8002f24 <HAL_RCC_OscConfig+0x540>
 8002efe:	4b92      	ldr	r3, [pc, #584]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	4a91      	ldr	r2, [pc, #580]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6713      	str	r3, [r2, #112]	; 0x70
 8002f0a:	4b8f      	ldr	r3, [pc, #572]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0e:	4a8e      	ldr	r2, [pc, #568]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f14:	6713      	str	r3, [r2, #112]	; 0x70
 8002f16:	4b8c      	ldr	r3, [pc, #560]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f1a:	4a8b      	ldr	r2, [pc, #556]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f1c:	f043 0301 	orr.w	r3, r3, #1
 8002f20:	6713      	str	r3, [r2, #112]	; 0x70
 8002f22:	e028      	b.n	8002f76 <HAL_RCC_OscConfig+0x592>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	2b85      	cmp	r3, #133	; 0x85
 8002f2a:	d112      	bne.n	8002f52 <HAL_RCC_OscConfig+0x56e>
 8002f2c:	4b86      	ldr	r3, [pc, #536]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	4a85      	ldr	r2, [pc, #532]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f32:	f043 0304 	orr.w	r3, r3, #4
 8002f36:	6713      	str	r3, [r2, #112]	; 0x70
 8002f38:	4b83      	ldr	r3, [pc, #524]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a82      	ldr	r2, [pc, #520]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	4b80      	ldr	r3, [pc, #512]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a7f      	ldr	r2, [pc, #508]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f50:	e011      	b.n	8002f76 <HAL_RCC_OscConfig+0x592>
 8002f52:	4b7d      	ldr	r3, [pc, #500]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f56:	4a7c      	ldr	r2, [pc, #496]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f58:	f023 0301 	bic.w	r3, r3, #1
 8002f5c:	6713      	str	r3, [r2, #112]	; 0x70
 8002f5e:	4b7a      	ldr	r3, [pc, #488]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f62:	4a79      	ldr	r2, [pc, #484]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f64:	f023 0304 	bic.w	r3, r3, #4
 8002f68:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6a:	4b77      	ldr	r3, [pc, #476]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	4a76      	ldr	r2, [pc, #472]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d015      	beq.n	8002faa <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7e:	f7fe f993 	bl	80012a8 <HAL_GetTick>
 8002f82:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f84:	e00a      	b.n	8002f9c <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f86:	f7fe f98f 	bl	80012a8 <HAL_GetTick>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	1ad3      	subs	r3, r2, r3
 8002f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e14c      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002f9c:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d0ee      	beq.n	8002f86 <HAL_RCC_OscConfig+0x5a2>
 8002fa8:	e014      	b.n	8002fd4 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002faa:	f7fe f97d 	bl	80012a8 <HAL_GetTick>
 8002fae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fb2:	f7fe f979 	bl	80012a8 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d901      	bls.n	8002fc8 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	e136      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fc8:	4b5f      	ldr	r3, [pc, #380]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d1ee      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f000 812b 	beq.w	8003234 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002fde:	4b5a      	ldr	r3, [pc, #360]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fe6:	2b18      	cmp	r3, #24
 8002fe8:	f000 80bb 	beq.w	8003162 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	f040 8095 	bne.w	8003120 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ff6:	4b54      	ldr	r3, [pc, #336]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a53      	ldr	r2, [pc, #332]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8002ffc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003000:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003002:	f7fe f951 	bl	80012a8 <HAL_GetTick>
 8003006:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300a:	f7fe f94d 	bl	80012a8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e10c      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800301c:	4b4a      	ldr	r3, [pc, #296]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f0      	bne.n	800300a <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003028:	4b47      	ldr	r3, [pc, #284]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 800302a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800302c:	4b47      	ldr	r3, [pc, #284]	; (800314c <HAL_RCC_OscConfig+0x768>)
 800302e:	4013      	ands	r3, r2
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003038:	0112      	lsls	r2, r2, #4
 800303a:	430a      	orrs	r2, r1
 800303c:	4942      	ldr	r1, [pc, #264]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 800303e:	4313      	orrs	r3, r2
 8003040:	628b      	str	r3, [r1, #40]	; 0x28
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003046:	3b01      	subs	r3, #1
 8003048:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003050:	3b01      	subs	r3, #1
 8003052:	025b      	lsls	r3, r3, #9
 8003054:	b29b      	uxth	r3, r3
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305c:	3b01      	subs	r3, #1
 800305e:	041b      	lsls	r3, r3, #16
 8003060:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	3b01      	subs	r3, #1
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003072:	4935      	ldr	r1, [pc, #212]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003078:	4b33      	ldr	r3, [pc, #204]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	4a32      	ldr	r2, [pc, #200]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003084:	4b30      	ldr	r3, [pc, #192]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8003086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003088:	4b31      	ldr	r3, [pc, #196]	; (8003150 <HAL_RCC_OscConfig+0x76c>)
 800308a:	4013      	ands	r3, r2
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003090:	00d2      	lsls	r2, r2, #3
 8003092:	492d      	ldr	r1, [pc, #180]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8003094:	4313      	orrs	r3, r2
 8003096:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003098:	4b2b      	ldr	r3, [pc, #172]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	f023 020c 	bic.w	r2, r3, #12
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a4:	4928      	ldr	r1, [pc, #160]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80030aa:	4b27      	ldr	r3, [pc, #156]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	f023 0202 	bic.w	r2, r3, #2
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4924      	ldr	r1, [pc, #144]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80030bc:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	4a21      	ldr	r2, [pc, #132]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c8:	4b1f      	ldr	r3, [pc, #124]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80030d4:	4b1c      	ldr	r3, [pc, #112]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030e6:	f043 0301 	orr.w	r3, r3, #1
 80030ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030ec:	4b16      	ldr	r3, [pc, #88]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a15      	ldr	r2, [pc, #84]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 80030f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f8:	f7fe f8d6 	bl	80012a8 <HAL_GetTick>
 80030fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030fe:	e008      	b.n	8003112 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003100:	f7fe f8d2 	bl	80012a8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e091      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003112:	4b0d      	ldr	r3, [pc, #52]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d0f0      	beq.n	8003100 <HAL_RCC_OscConfig+0x71c>
 800311e:	e089      	b.n	8003234 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003120:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a08      	ldr	r2, [pc, #32]	; (8003148 <HAL_RCC_OscConfig+0x764>)
 8003126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312c:	f7fe f8bc 	bl	80012a8 <HAL_GetTick>
 8003130:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003132:	e00f      	b.n	8003154 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe f8b8 	bl	80012a8 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d908      	bls.n	8003154 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e077      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
 8003146:	bf00      	nop
 8003148:	58024400 	.word	0x58024400
 800314c:	fffffc0c 	.word	0xfffffc0c
 8003150:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003154:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1e9      	bne.n	8003134 <HAL_RCC_OscConfig+0x750>
 8003160:	e068      	b.n	8003234 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003162:	4b37      	ldr	r3, [pc, #220]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 8003164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003166:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003168:	4b35      	ldr	r3, [pc, #212]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b01      	cmp	r3, #1
 8003174:	d031      	beq.n	80031da <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f003 0203 	and.w	r2, r3, #3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d12a      	bne.n	80031da <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d122      	bne.n	80031da <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d11a      	bne.n	80031da <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	0a5b      	lsrs	r3, r3, #9
 80031a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80031b2:	429a      	cmp	r2, r3
 80031b4:	d111      	bne.n	80031da <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d108      	bne.n	80031da <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	0e1b      	lsrs	r3, r3, #24
 80031cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d001      	beq.n	80031de <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e02b      	b.n	8003236 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80031de:	4b18      	ldr	r3, [pc, #96]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	08db      	lsrs	r3, r3, #3
 80031e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031e8:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d01f      	beq.n	8003234 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	4a11      	ldr	r2, [pc, #68]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 80031fa:	f023 0301 	bic.w	r3, r3, #1
 80031fe:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003200:	f7fe f852 	bl	80012a8 <HAL_GetTick>
 8003204:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003206:	bf00      	nop
 8003208:	f7fe f84e 	bl	80012a8 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	4293      	cmp	r3, r2
 8003212:	d0f9      	beq.n	8003208 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003214:	4b0a      	ldr	r3, [pc, #40]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 8003216:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003218:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <HAL_RCC_OscConfig+0x860>)
 800321a:	4013      	ands	r3, r2
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003220:	00d2      	lsls	r2, r2, #3
 8003222:	4907      	ldr	r1, [pc, #28]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 8003224:	4313      	orrs	r3, r2
 8003226:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	4a04      	ldr	r2, [pc, #16]	; (8003240 <HAL_RCC_OscConfig+0x85c>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3730      	adds	r7, #48	; 0x30
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	58024400 	.word	0x58024400
 8003244:	ffff0007 	.word	0xffff0007

08003248 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b086      	sub	sp, #24
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e19c      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800325c:	4b8a      	ldr	r3, [pc, #552]	; (8003488 <HAL_RCC_ClockConfig+0x240>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d910      	bls.n	800328c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326a:	4b87      	ldr	r3, [pc, #540]	; (8003488 <HAL_RCC_ClockConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f023 020f 	bic.w	r2, r3, #15
 8003272:	4985      	ldr	r1, [pc, #532]	; (8003488 <HAL_RCC_ClockConfig+0x240>)
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	4313      	orrs	r3, r2
 8003278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b83      	ldr	r3, [pc, #524]	; (8003488 <HAL_RCC_ClockConfig+0x240>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e184      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d010      	beq.n	80032ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	4b7b      	ldr	r3, [pc, #492]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d908      	bls.n	80032ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80032a8:	4b78      	ldr	r3, [pc, #480]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	4975      	ldr	r1, [pc, #468]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0308 	and.w	r3, r3, #8
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d010      	beq.n	80032e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	695a      	ldr	r2, [r3, #20]
 80032ca:	4b70      	ldr	r3, [pc, #448]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d908      	bls.n	80032e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80032d6:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	496a      	ldr	r1, [pc, #424]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0310 	and.w	r3, r3, #16
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d010      	beq.n	8003316 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	699a      	ldr	r2, [r3, #24]
 80032f8:	4b64      	ldr	r3, [pc, #400]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003300:	429a      	cmp	r2, r3
 8003302:	d908      	bls.n	8003316 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003304:	4b61      	ldr	r3, [pc, #388]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	495e      	ldr	r1, [pc, #376]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003312:	4313      	orrs	r3, r2
 8003314:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0320 	and.w	r3, r3, #32
 800331e:	2b00      	cmp	r3, #0
 8003320:	d010      	beq.n	8003344 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69da      	ldr	r2, [r3, #28]
 8003326:	4b59      	ldr	r3, [pc, #356]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800332e:	429a      	cmp	r2, r3
 8003330:	d908      	bls.n	8003344 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003332:	4b56      	ldr	r3, [pc, #344]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003334:	6a1b      	ldr	r3, [r3, #32]
 8003336:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	69db      	ldr	r3, [r3, #28]
 800333e:	4953      	ldr	r1, [pc, #332]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003340:	4313      	orrs	r3, r2
 8003342:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d010      	beq.n	8003372 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	f003 030f 	and.w	r3, r3, #15
 800335c:	429a      	cmp	r2, r3
 800335e:	d908      	bls.n	8003372 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	4b4a      	ldr	r3, [pc, #296]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	f023 020f 	bic.w	r2, r3, #15
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4947      	ldr	r1, [pc, #284]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 800336e:	4313      	orrs	r3, r2
 8003370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d055      	beq.n	800342a <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800337e:	4b43      	ldr	r3, [pc, #268]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4940      	ldr	r1, [pc, #256]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 800338c:	4313      	orrs	r3, r2
 800338e:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	2b02      	cmp	r3, #2
 8003396:	d107      	bne.n	80033a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003398:	4b3c      	ldr	r3, [pc, #240]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d121      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0f6      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d107      	bne.n	80033c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80033b0:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d115      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0ea      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80033c8:	4b30      	ldr	r3, [pc, #192]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d109      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0de      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d8:	4b2c      	ldr	r3, [pc, #176]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f003 0304 	and.w	r3, r3, #4
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e0d6      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80033e8:	4b28      	ldr	r3, [pc, #160]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	f023 0207 	bic.w	r2, r3, #7
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4925      	ldr	r1, [pc, #148]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033fa:	f7fd ff55 	bl	80012a8 <HAL_GetTick>
 80033fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003400:	e00a      	b.n	8003418 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003402:	f7fd ff51 	bl	80012a8 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003410:	4293      	cmp	r3, r2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e0be      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003418:	4b1c      	ldr	r3, [pc, #112]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	00db      	lsls	r3, r3, #3
 8003426:	429a      	cmp	r2, r3
 8003428:	d1eb      	bne.n	8003402 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d010      	beq.n	8003458 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	4b14      	ldr	r3, [pc, #80]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	429a      	cmp	r2, r3
 8003444:	d208      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003446:	4b11      	ldr	r3, [pc, #68]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	f023 020f 	bic.w	r2, r3, #15
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	490e      	ldr	r1, [pc, #56]	; (800348c <HAL_RCC_ClockConfig+0x244>)
 8003454:	4313      	orrs	r3, r2
 8003456:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_ClockConfig+0x240>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 030f 	and.w	r3, r3, #15
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d214      	bcs.n	8003490 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003466:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_RCC_ClockConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 020f 	bic.w	r2, r3, #15
 800346e:	4906      	ldr	r1, [pc, #24]	; (8003488 <HAL_RCC_ClockConfig+0x240>)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4313      	orrs	r3, r2
 8003474:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003476:	4b04      	ldr	r3, [pc, #16]	; (8003488 <HAL_RCC_ClockConfig+0x240>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	429a      	cmp	r2, r3
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e086      	b.n	8003596 <HAL_RCC_ClockConfig+0x34e>
 8003488:	52002000 	.word	0x52002000
 800348c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0304 	and.w	r3, r3, #4
 8003498:	2b00      	cmp	r3, #0
 800349a:	d010      	beq.n	80034be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	4b3f      	ldr	r3, [pc, #252]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d208      	bcs.n	80034be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80034ac:	4b3c      	ldr	r3, [pc, #240]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	4939      	ldr	r1, [pc, #228]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	695a      	ldr	r2, [r3, #20]
 80034ce:	4b34      	ldr	r3, [pc, #208]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d208      	bcs.n	80034ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80034da:	4b31      	ldr	r3, [pc, #196]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695b      	ldr	r3, [r3, #20]
 80034e6:	492e      	ldr	r1, [pc, #184]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0310 	and.w	r3, r3, #16
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d010      	beq.n	800351a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	699a      	ldr	r2, [r3, #24]
 80034fc:	4b28      	ldr	r3, [pc, #160]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003504:	429a      	cmp	r2, r3
 8003506:	d208      	bcs.n	800351a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003508:	4b25      	ldr	r3, [pc, #148]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	4922      	ldr	r1, [pc, #136]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003516:	4313      	orrs	r3, r2
 8003518:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0320 	and.w	r3, r3, #32
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003532:	429a      	cmp	r2, r3
 8003534:	d208      	bcs.n	8003548 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003536:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	4917      	ldr	r1, [pc, #92]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003544:	4313      	orrs	r3, r2
 8003546:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003548:	f000 f834 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 800354c:	4602      	mov	r2, r0
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	f003 030f 	and.w	r3, r3, #15
 8003558:	4912      	ldr	r1, [pc, #72]	; (80035a4 <HAL_RCC_ClockConfig+0x35c>)
 800355a:	5ccb      	ldrb	r3, [r1, r3]
 800355c:	f003 031f 	and.w	r3, r3, #31
 8003560:	fa22 f303 	lsr.w	r3, r2, r3
 8003564:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <HAL_RCC_ClockConfig+0x358>)
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	f003 030f 	and.w	r3, r3, #15
 800356e:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <HAL_RCC_ClockConfig+0x35c>)
 8003570:	5cd3      	ldrb	r3, [r2, r3]
 8003572:	f003 031f 	and.w	r3, r3, #31
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <HAL_RCC_ClockConfig+0x360>)
 800357e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003580:	4a0a      	ldr	r2, [pc, #40]	; (80035ac <HAL_RCC_ClockConfig+0x364>)
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003586:	4b0a      	ldr	r3, [pc, #40]	; (80035b0 <HAL_RCC_ClockConfig+0x368>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4618      	mov	r0, r3
 800358c:	f7fd fe42 	bl	8001214 <HAL_InitTick>
 8003590:	4603      	mov	r3, r0
 8003592:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003594:	7bfb      	ldrb	r3, [r7, #15]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3718      	adds	r7, #24
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	58024400 	.word	0x58024400
 80035a4:	080086f4 	.word	0x080086f4
 80035a8:	24000004 	.word	0x24000004
 80035ac:	24000000 	.word	0x24000000
 80035b0:	24000008 	.word	0x24000008

080035b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b089      	sub	sp, #36	; 0x24
 80035b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ba:	4bb3      	ldr	r3, [pc, #716]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035c2:	2b18      	cmp	r3, #24
 80035c4:	f200 8155 	bhi.w	8003872 <HAL_RCC_GetSysClockFreq+0x2be>
 80035c8:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80035ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ce:	bf00      	nop
 80035d0:	08003635 	.word	0x08003635
 80035d4:	08003873 	.word	0x08003873
 80035d8:	08003873 	.word	0x08003873
 80035dc:	08003873 	.word	0x08003873
 80035e0:	08003873 	.word	0x08003873
 80035e4:	08003873 	.word	0x08003873
 80035e8:	08003873 	.word	0x08003873
 80035ec:	08003873 	.word	0x08003873
 80035f0:	0800365b 	.word	0x0800365b
 80035f4:	08003873 	.word	0x08003873
 80035f8:	08003873 	.word	0x08003873
 80035fc:	08003873 	.word	0x08003873
 8003600:	08003873 	.word	0x08003873
 8003604:	08003873 	.word	0x08003873
 8003608:	08003873 	.word	0x08003873
 800360c:	08003873 	.word	0x08003873
 8003610:	08003661 	.word	0x08003661
 8003614:	08003873 	.word	0x08003873
 8003618:	08003873 	.word	0x08003873
 800361c:	08003873 	.word	0x08003873
 8003620:	08003873 	.word	0x08003873
 8003624:	08003873 	.word	0x08003873
 8003628:	08003873 	.word	0x08003873
 800362c:	08003873 	.word	0x08003873
 8003630:	08003667 	.word	0x08003667
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003634:	4b94      	ldr	r3, [pc, #592]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0320 	and.w	r3, r3, #32
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003640:	4b91      	ldr	r3, [pc, #580]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	08db      	lsrs	r3, r3, #3
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	4a90      	ldr	r2, [pc, #576]	; (800388c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
 8003650:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003652:	e111      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003654:	4b8d      	ldr	r3, [pc, #564]	; (800388c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003656:	61bb      	str	r3, [r7, #24]
      break;
 8003658:	e10e      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800365a:	4b8d      	ldr	r3, [pc, #564]	; (8003890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800365c:	61bb      	str	r3, [r7, #24]
      break;
 800365e:	e10b      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003660:	4b8c      	ldr	r3, [pc, #560]	; (8003894 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003662:	61bb      	str	r3, [r7, #24]
      break;
 8003664:	e108      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003666:	4b88      	ldr	r3, [pc, #544]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003670:	4b85      	ldr	r3, [pc, #532]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003674:	091b      	lsrs	r3, r3, #4
 8003676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800367a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800367c:	4b82      	ldr	r3, [pc, #520]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003686:	4b80      	ldr	r3, [pc, #512]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800368a:	08db      	lsrs	r3, r3, #3
 800368c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003690:	68fa      	ldr	r2, [r7, #12]
 8003692:	fb02 f303 	mul.w	r3, r2, r3
 8003696:	ee07 3a90 	vmov	s15, r3
 800369a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800369e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f000 80e1 	beq.w	800386c <HAL_RCC_GetSysClockFreq+0x2b8>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	f000 8083 	beq.w	80037b8 <HAL_RCC_GetSysClockFreq+0x204>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	f200 80a1 	bhi.w	80037fc <HAL_RCC_GetSysClockFreq+0x248>
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <HAL_RCC_GetSysClockFreq+0x114>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d056      	beq.n	8003774 <HAL_RCC_GetSysClockFreq+0x1c0>
 80036c6:	e099      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036c8:	4b6f      	ldr	r3, [pc, #444]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0320 	and.w	r3, r3, #32
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02d      	beq.n	8003730 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036d4:	4b6c      	ldr	r3, [pc, #432]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	08db      	lsrs	r3, r3, #3
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	4a6b      	ldr	r2, [pc, #428]	; (800388c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
 80036e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	ee07 3a90 	vmov	s15, r3
 80036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036fe:	4b62      	ldr	r3, [pc, #392]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003706:	ee07 3a90 	vmov	s15, r3
 800370a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800370e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003712:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800371a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800371e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800372a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800372e:	e087      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	ee07 3a90 	vmov	s15, r3
 8003736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800373a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800389c <HAL_RCC_GetSysClockFreq+0x2e8>
 800373e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003742:	4b51      	ldr	r3, [pc, #324]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800374a:	ee07 3a90 	vmov	s15, r3
 800374e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003752:	ed97 6a02 	vldr	s12, [r7, #8]
 8003756:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800375a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800375e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800376a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800376e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003772:	e065      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	ee07 3a90 	vmov	s15, r3
 800377a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800377e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80038a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003786:	4b40      	ldr	r3, [pc, #256]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800378e:	ee07 3a90 	vmov	s15, r3
 8003792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003796:	ed97 6a02 	vldr	s12, [r7, #8]
 800379a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 800379e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037b6:	e043      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	ee07 3a90 	vmov	s15, r3
 80037be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80038a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80037c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037d2:	ee07 3a90 	vmov	s15, r3
 80037d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037da:	ed97 6a02 	vldr	s12, [r7, #8]
 80037de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 80037e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80037fa:	e021      	b.n	8003840 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	ee07 3a90 	vmov	s15, r3
 8003802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003806:	eddf 6a26 	vldr	s13, [pc, #152]	; 80038a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800380a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800380e:	4b1e      	ldr	r3, [pc, #120]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003816:	ee07 3a90 	vmov	s15, r3
 800381a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800381e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003822:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003898 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800382a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800382e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800383a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800383e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	0a5b      	lsrs	r3, r3, #9
 8003846:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800384a:	3301      	adds	r3, #1
 800384c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	ee07 3a90 	vmov	s15, r3
 8003854:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003858:	edd7 6a07 	vldr	s13, [r7, #28]
 800385c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003864:	ee17 3a90 	vmov	r3, s15
 8003868:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800386a:	e005      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800386c:	2300      	movs	r3, #0
 800386e:	61bb      	str	r3, [r7, #24]
      break;
 8003870:	e002      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003872:	4b07      	ldr	r3, [pc, #28]	; (8003890 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003874:	61bb      	str	r3, [r7, #24]
      break;
 8003876:	bf00      	nop
  }

  return sysclockfreq;
 8003878:	69bb      	ldr	r3, [r7, #24]
}
 800387a:	4618      	mov	r0, r3
 800387c:	3724      	adds	r7, #36	; 0x24
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	58024400 	.word	0x58024400
 800388c:	03d09000 	.word	0x03d09000
 8003890:	003d0900 	.word	0x003d0900
 8003894:	007a1200 	.word	0x007a1200
 8003898:	46000000 	.word	0x46000000
 800389c:	4c742400 	.word	0x4c742400
 80038a0:	4a742400 	.word	0x4a742400
 80038a4:	4af42400 	.word	0x4af42400

080038a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 80038ae:	f7ff fe81 	bl	80035b4 <HAL_RCC_GetSysClockFreq>
 80038b2:	4602      	mov	r2, r0
 80038b4:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	0a1b      	lsrs	r3, r3, #8
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	490f      	ldr	r1, [pc, #60]	; (80038fc <HAL_RCC_GetHCLKFreq+0x54>)
 80038c0:	5ccb      	ldrb	r3, [r1, r3]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ca:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80038cc:	4b0a      	ldr	r3, [pc, #40]	; (80038f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 030f 	and.w	r3, r3, #15
 80038d4:	4a09      	ldr	r2, [pc, #36]	; (80038fc <HAL_RCC_GetHCLKFreq+0x54>)
 80038d6:	5cd3      	ldrb	r3, [r2, r3]
 80038d8:	f003 031f 	and.w	r3, r3, #31
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	fa22 f303 	lsr.w	r3, r2, r3
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <HAL_RCC_GetHCLKFreq+0x58>)
 80038e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038e6:	4a07      	ldr	r2, [pc, #28]	; (8003904 <HAL_RCC_GetHCLKFreq+0x5c>)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80038ec:	4b04      	ldr	r3, [pc, #16]	; (8003900 <HAL_RCC_GetHCLKFreq+0x58>)
 80038ee:	681b      	ldr	r3, [r3, #0]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3708      	adds	r7, #8
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	58024400 	.word	0x58024400
 80038fc:	080086f4 	.word	0x080086f4
 8003900:	24000004 	.word	0x24000004
 8003904:	24000000 	.word	0x24000000

08003908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800390c:	f7ff ffcc 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b06      	ldr	r3, [pc, #24]	; (800392c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	091b      	lsrs	r3, r3, #4
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4904      	ldr	r1, [pc, #16]	; (8003930 <HAL_RCC_GetPCLK1Freq+0x28>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003928:	4618      	mov	r0, r3
 800392a:	bd80      	pop	{r7, pc}
 800392c:	58024400 	.word	0x58024400
 8003930:	080086f4 	.word	0x080086f4

08003934 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003938:	f7ff ffb6 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 800393c:	4602      	mov	r2, r0
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	0a1b      	lsrs	r3, r3, #8
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	4904      	ldr	r1, [pc, #16]	; (800395c <HAL_RCC_GetPCLK2Freq+0x28>)
 800394a:	5ccb      	ldrb	r3, [r1, r3]
 800394c:	f003 031f 	and.w	r3, r3, #31
 8003950:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	58024400 	.word	0x58024400
 800395c:	080086f4 	.word	0x080086f4

08003960 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b0c8      	sub	sp, #288	; 0x120
 8003966:	af00      	add	r7, sp, #0
 8003968:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800396c:	2300      	movs	r3, #0
 800396e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003972:	2300      	movs	r3, #0
 8003974:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003978:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800397c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003980:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003984:	2500      	movs	r5, #0
 8003986:	ea54 0305 	orrs.w	r3, r4, r5
 800398a:	d049      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800398c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003992:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003996:	d02f      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003998:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800399c:	d828      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800399e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a2:	d01a      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80039a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80039a8:	d822      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d003      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80039ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039b2:	d007      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039b4:	e01c      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b6:	4ba7      	ldr	r3, [pc, #668]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ba:	4aa6      	ldr	r2, [pc, #664]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80039bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039c2:	e01a      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039c8:	3308      	adds	r3, #8
 80039ca:	2102      	movs	r1, #2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f002 fa6d 	bl	8005eac <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039d8:	e00f      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039de:	3328      	adds	r3, #40	; 0x28
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 fb14 	bl	8006010 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039ee:	e004      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039f6:	e000      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10a      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003a02:	4b94      	ldr	r3, [pc, #592]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a06:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a10:	4a90      	ldr	r2, [pc, #576]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a12:	430b      	orrs	r3, r1
 8003a14:	6513      	str	r3, [r2, #80]	; 0x50
 8003a16:	e003      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003a2c:	f04f 0900 	mov.w	r9, #0
 8003a30:	ea58 0309 	orrs.w	r3, r8, r9
 8003a34:	d047      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3c:	2b04      	cmp	r3, #4
 8003a3e:	d82a      	bhi.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a40:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a46:	bf00      	nop
 8003a48:	08003a5d 	.word	0x08003a5d
 8003a4c:	08003a6b 	.word	0x08003a6b
 8003a50:	08003a81 	.word	0x08003a81
 8003a54:	08003a9f 	.word	0x08003a9f
 8003a58:	08003a9f 	.word	0x08003a9f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a5c:	4b7d      	ldr	r3, [pc, #500]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a60:	4a7c      	ldr	r2, [pc, #496]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a68:	e01a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a6e:	3308      	adds	r3, #8
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 fa1a 	bl	8005eac <RCCEx_PLL2_Config>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a7e:	e00f      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a84:	3328      	adds	r3, #40	; 0x28
 8003a86:	2100      	movs	r1, #0
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f002 fac1 	bl	8006010 <RCCEx_PLL3_Config>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a94:	e004      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aa8:	4b6a      	ldr	r3, [pc, #424]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aac:	f023 0107 	bic.w	r1, r3, #7
 8003ab0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab6:	4a67      	ldr	r2, [pc, #412]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003ab8:	430b      	orrs	r3, r1
 8003aba:	6513      	str	r3, [r2, #80]	; 0x50
 8003abc:	e003      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003abe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ac2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003ac6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003ad2:	f04f 0b00 	mov.w	fp, #0
 8003ad6:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ada:	d054      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003adc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003ae6:	d036      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003ae8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003aec:	d82f      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af2:	d032      	beq.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af8:	d829      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003afa:	2bc0      	cmp	r3, #192	; 0xc0
 8003afc:	d02f      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003afe:	2bc0      	cmp	r3, #192	; 0xc0
 8003b00:	d825      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d018      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003b06:	2b80      	cmp	r3, #128	; 0x80
 8003b08:	d821      	bhi.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003b0e:	2b40      	cmp	r3, #64	; 0x40
 8003b10:	d007      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003b12:	e01c      	b.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b14:	4b4f      	ldr	r3, [pc, #316]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	4a4e      	ldr	r2, [pc, #312]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b20:	e01e      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b22:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b26:	3308      	adds	r3, #8
 8003b28:	2100      	movs	r1, #0
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 f9be 	bl	8005eac <RCCEx_PLL2_Config>
 8003b30:	4603      	mov	r3, r0
 8003b32:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b36:	e013      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3c:	3328      	adds	r3, #40	; 0x28
 8003b3e:	2100      	movs	r1, #0
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 fa65 	bl	8006010 <RCCEx_PLL3_Config>
 8003b46:	4603      	mov	r3, r0
 8003b48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003b4c:	e008      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b54:	e004      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003b56:	bf00      	nop
 8003b58:	e002      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003b5a:	bf00      	nop
 8003b5c:	e000      	b.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003b5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b60:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d10a      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003b68:	4b3a      	ldr	r3, [pc, #232]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	4a37      	ldr	r2, [pc, #220]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b78:	430b      	orrs	r3, r1
 8003b7a:	6513      	str	r3, [r2, #80]	; 0x50
 8003b7c:	e003      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b82:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003b92:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003b9c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	d05c      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bac:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003bb0:	d03b      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003bb2:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003bb6:	d834      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bbc:	d037      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bc2:	d82e      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003bc4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bc8:	d033      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003bca:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003bce:	d828      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003bd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bd4:	d01a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d822      	bhi.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003be0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be4:	d007      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003be6:	e01c      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	4a19      	ldr	r2, [pc, #100]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003bf4:	e01e      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfa:	3308      	adds	r3, #8
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f002 f954 	bl	8005eac <RCCEx_PLL2_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c0a:	e013      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c10:	3328      	adds	r3, #40	; 0x28
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f002 f9fb 	bl	8006010 <RCCEx_PLL3_Config>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003c20:	e008      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c28:	e004      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c2a:	bf00      	nop
 8003c2c:	e002      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c2e:	bf00      	nop
 8003c30:	e000      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003c32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10d      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003c3c:	4b05      	ldr	r3, [pc, #20]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c40:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003c44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4a:	4a02      	ldr	r2, [pc, #8]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6513      	str	r3, [r2, #80]	; 0x50
 8003c50:	e006      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003c52:	bf00      	nop
 8003c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c5c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003c60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003c6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003c70:	2300      	movs	r3, #0
 8003c72:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003c76:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	d03a      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003c80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	2b30      	cmp	r3, #48	; 0x30
 8003c88:	d01f      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003c8a:	2b30      	cmp	r3, #48	; 0x30
 8003c8c:	d819      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	d00c      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003c92:	2b20      	cmp	r3, #32
 8003c94:	d815      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d019      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003c9a:	2b10      	cmp	r3, #16
 8003c9c:	d111      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c9e:	4bae      	ldr	r3, [pc, #696]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca2:	4aad      	ldr	r2, [pc, #692]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003caa:	e011      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	2102      	movs	r1, #2
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f002 f8f9 	bl	8005eac <RCCEx_PLL2_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003cc0:	e006      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10a      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003cd8:	4b9f      	ldr	r3, [pc, #636]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cdc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	4a9c      	ldr	r2, [pc, #624]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ce8:	430b      	orrs	r3, r1
 8003cea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cec:	e003      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cf2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003cf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003d02:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003d06:	2300      	movs	r3, #0
 8003d08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003d0c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4313      	orrs	r3, r2
 8003d14:	d051      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003d16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d20:	d035      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003d22:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d26:	d82e      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003d28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d2c:	d031      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003d2e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d32:	d828      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003d34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d38:	d01a      	beq.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003d3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d3e:	d822      	bhi.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d003      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d007      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003d4a:	e01c      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d4c:	4b82      	ldr	r3, [pc, #520]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d50:	4a81      	ldr	r2, [pc, #516]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d56:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d58:	e01c      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d5e:	3308      	adds	r3, #8
 8003d60:	2100      	movs	r1, #0
 8003d62:	4618      	mov	r0, r3
 8003d64:	f002 f8a2 	bl	8005eac <RCCEx_PLL2_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d6e:	e011      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d74:	3328      	adds	r3, #40	; 0x28
 8003d76:	2100      	movs	r1, #0
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f002 f949 	bl	8006010 <RCCEx_PLL3_Config>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003d84:	e006      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d8c:	e002      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003d8e:	bf00      	nop
 8003d90:	e000      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003d92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d94:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d10a      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003d9c:	4b6e      	ldr	r3, [pc, #440]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003da4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003daa:	4a6b      	ldr	r2, [pc, #428]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003dac:	430b      	orrs	r3, r1
 8003dae:	6513      	str	r3, [r2, #80]	; 0x50
 8003db0:	e003      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003db6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003dba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dc2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003dc6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003dca:	2300      	movs	r3, #0
 8003dcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003dd0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	d053      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003de0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003de4:	d033      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dea:	d82c      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003dec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df0:	d02f      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003df2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003df6:	d826      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003df8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003dfc:	d02b      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003dfe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e02:	d820      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e08:	d012      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003e0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e0e:	d81a      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d022      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003e14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e18:	d115      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e1e:	3308      	adds	r3, #8
 8003e20:	2101      	movs	r1, #1
 8003e22:	4618      	mov	r0, r3
 8003e24:	f002 f842 	bl	8005eac <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e2e:	e015      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e34:	3328      	adds	r3, #40	; 0x28
 8003e36:	2101      	movs	r1, #1
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f002 f8e9 	bl	8006010 <RCCEx_PLL3_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003e44:	e00a      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e4c:	e006      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e004      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003e52:	bf00      	nop
 8003e54:	e002      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003e56:	bf00      	nop
 8003e58:	e000      	b.n	8003e5c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8003e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003e64:	4b3c      	ldr	r3, [pc, #240]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003e6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e72:	4a39      	ldr	r2, [pc, #228]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e74:	430b      	orrs	r3, r1
 8003e76:	6513      	str	r3, [r2, #80]	; 0x50
 8003e78:	e003      	b.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e8a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003e8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e92:	2300      	movs	r3, #0
 8003e94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e98:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	d060      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003eaa:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003eae:	d039      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 8003eb0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8003eb4:	d832      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003eb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003eba:	d035      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003ebc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ec0:	d82c      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ec6:	d031      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ecc:	d826      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ece:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ed2:	d02d      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003ed4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ed8:	d820      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ede:	d012      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ee4:	d81a      	bhi.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d024      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003eea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eee:	d115      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef4:	3308      	adds	r3, #8
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f001 ffd7 	bl	8005eac <RCCEx_PLL2_Config>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f04:	e017      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f06:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f0a:	3328      	adds	r3, #40	; 0x28
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f002 f87e 	bl	8006010 <RCCEx_PLL3_Config>
 8003f14:	4603      	mov	r3, r0
 8003f16:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f1a:	e00c      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f22:	e008      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f24:	bf00      	nop
 8003f26:	e006      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f28:	bf00      	nop
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f2c:	bf00      	nop
 8003f2e:	e002      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003f34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d10e      	bne.n	8003f5c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f4e:	4a02      	ldr	r2, [pc, #8]	; (8003f58 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6593      	str	r3, [r2, #88]	; 0x58
 8003f54:	e006      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003f56:	bf00      	nop
 8003f58:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f60:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003f70:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f74:	2300      	movs	r3, #0
 8003f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003f7a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4313      	orrs	r3, r2
 8003f82:	d037      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003f84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f8e:	d00e      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f94:	d816      	bhi.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d018      	beq.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003f9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f9e:	d111      	bne.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa0:	4bc4      	ldr	r3, [pc, #784]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa4:	4ac3      	ldr	r2, [pc, #780]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fa6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003faa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fac:	e00f      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 ff78 	bl	8005eac <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003fc2:	e004      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fca:	e000      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003fcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10a      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003fd6:	4bb7      	ldr	r3, [pc, #732]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fe2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe4:	4ab3      	ldr	r2, [pc, #716]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003fe6:	430b      	orrs	r3, r1
 8003fe8:	6513      	str	r3, [r2, #80]	; 0x50
 8003fea:	e003      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ff0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ff4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004004:	2300      	movs	r3, #0
 8004006:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800400a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800400e:	460b      	mov	r3, r1
 8004010:	4313      	orrs	r3, r2
 8004012:	d039      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004014:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004018:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800401a:	2b03      	cmp	r3, #3
 800401c:	d81c      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800401e:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004024:	08004061 	.word	0x08004061
 8004028:	08004035 	.word	0x08004035
 800402c:	08004043 	.word	0x08004043
 8004030:	08004061 	.word	0x08004061
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004034:	4b9f      	ldr	r3, [pc, #636]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004038:	4a9e      	ldr	r2, [pc, #632]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800403a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800403e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004040:	e00f      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004042:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004046:	3308      	adds	r3, #8
 8004048:	2102      	movs	r1, #2
 800404a:	4618      	mov	r0, r3
 800404c:	f001 ff2e 	bl	8005eac <RCCEx_PLL2_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004056:	e004      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800405e:	e000      	b.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004062:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10a      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800406a:	4b92      	ldr	r3, [pc, #584]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	f023 0103 	bic.w	r1, r3, #3
 8004072:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	4a8e      	ldr	r2, [pc, #568]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800407a:	430b      	orrs	r3, r1
 800407c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800407e:	e003      	b.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004080:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004084:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004088:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800408c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004090:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004094:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004098:	2300      	movs	r3, #0
 800409a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800409e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80040a2:	460b      	mov	r3, r1
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f000 8099 	beq.w	80041dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040aa:	4b83      	ldr	r3, [pc, #524]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a82      	ldr	r2, [pc, #520]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040b6:	f7fd f8f7 	bl	80012a8 <HAL_GetTick>
 80040ba:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040be:	e00b      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c0:	f7fd f8f2 	bl	80012a8 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b64      	cmp	r3, #100	; 0x64
 80040ce:	d903      	bls.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040d6:	e005      	b.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d8:	4b77      	ldr	r3, [pc, #476]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ed      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80040e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d173      	bne.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80040ec:	4b71      	ldr	r3, [pc, #452]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80040ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80040f8:	4053      	eors	r3, r2
 80040fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d015      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004102:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800410e:	4b69      	ldr	r3, [pc, #420]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004112:	4a68      	ldr	r2, [pc, #416]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004118:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800411a:	4b66      	ldr	r3, [pc, #408]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800411c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800411e:	4a65      	ldr	r2, [pc, #404]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004124:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004126:	4a63      	ldr	r2, [pc, #396]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800412e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004132:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800413a:	d118      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413c:	f7fd f8b4 	bl	80012a8 <HAL_GetTick>
 8004140:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004144:	e00d      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004146:	f7fd f8af 	bl	80012a8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004150:	1ad2      	subs	r2, r2, r3
 8004152:	f241 3388 	movw	r3, #5000	; 0x1388
 8004156:	429a      	cmp	r2, r3
 8004158:	d903      	bls.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8004160:	e005      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004162:	4b54      	ldr	r3, [pc, #336]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0eb      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800416e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004172:	2b00      	cmp	r3, #0
 8004174:	d129      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800417e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004182:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004186:	d10e      	bne.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004188:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004194:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004198:	091a      	lsrs	r2, r3, #4
 800419a:	4b48      	ldr	r3, [pc, #288]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800419c:	4013      	ands	r3, r2
 800419e:	4a45      	ldr	r2, [pc, #276]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6113      	str	r3, [r2, #16]
 80041a4:	e005      	b.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 80041a6:	4b43      	ldr	r3, [pc, #268]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	4a42      	ldr	r2, [pc, #264]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041ac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80041b0:	6113      	str	r3, [r2, #16]
 80041b2:	4b40      	ldr	r3, [pc, #256]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041b4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80041b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80041be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c2:	4a3c      	ldr	r2, [pc, #240]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	e008      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 80041d2:	e003      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80041dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	f002 0301 	and.w	r3, r2, #1
 80041e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041ec:	2300      	movs	r3, #0
 80041ee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041f2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4313      	orrs	r3, r2
 80041fa:	f000 8090 	beq.w	800431e <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80041fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004206:	2b28      	cmp	r3, #40	; 0x28
 8004208:	d870      	bhi.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800420a:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800420c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004210:	080042f5 	.word	0x080042f5
 8004214:	080042ed 	.word	0x080042ed
 8004218:	080042ed 	.word	0x080042ed
 800421c:	080042ed 	.word	0x080042ed
 8004220:	080042ed 	.word	0x080042ed
 8004224:	080042ed 	.word	0x080042ed
 8004228:	080042ed 	.word	0x080042ed
 800422c:	080042ed 	.word	0x080042ed
 8004230:	080042c1 	.word	0x080042c1
 8004234:	080042ed 	.word	0x080042ed
 8004238:	080042ed 	.word	0x080042ed
 800423c:	080042ed 	.word	0x080042ed
 8004240:	080042ed 	.word	0x080042ed
 8004244:	080042ed 	.word	0x080042ed
 8004248:	080042ed 	.word	0x080042ed
 800424c:	080042ed 	.word	0x080042ed
 8004250:	080042d7 	.word	0x080042d7
 8004254:	080042ed 	.word	0x080042ed
 8004258:	080042ed 	.word	0x080042ed
 800425c:	080042ed 	.word	0x080042ed
 8004260:	080042ed 	.word	0x080042ed
 8004264:	080042ed 	.word	0x080042ed
 8004268:	080042ed 	.word	0x080042ed
 800426c:	080042ed 	.word	0x080042ed
 8004270:	080042f5 	.word	0x080042f5
 8004274:	080042ed 	.word	0x080042ed
 8004278:	080042ed 	.word	0x080042ed
 800427c:	080042ed 	.word	0x080042ed
 8004280:	080042ed 	.word	0x080042ed
 8004284:	080042ed 	.word	0x080042ed
 8004288:	080042ed 	.word	0x080042ed
 800428c:	080042ed 	.word	0x080042ed
 8004290:	080042f5 	.word	0x080042f5
 8004294:	080042ed 	.word	0x080042ed
 8004298:	080042ed 	.word	0x080042ed
 800429c:	080042ed 	.word	0x080042ed
 80042a0:	080042ed 	.word	0x080042ed
 80042a4:	080042ed 	.word	0x080042ed
 80042a8:	080042ed 	.word	0x080042ed
 80042ac:	080042ed 	.word	0x080042ed
 80042b0:	080042f5 	.word	0x080042f5
 80042b4:	58024400 	.word	0x58024400
 80042b8:	58024800 	.word	0x58024800
 80042bc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042c4:	3308      	adds	r3, #8
 80042c6:	2101      	movs	r1, #1
 80042c8:	4618      	mov	r0, r3
 80042ca:	f001 fdef 	bl	8005eac <RCCEx_PLL2_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042d4:	e00f      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042da:	3328      	adds	r3, #40	; 0x28
 80042dc:	2101      	movs	r1, #1
 80042de:	4618      	mov	r0, r3
 80042e0:	f001 fe96 	bl	8006010 <RCCEx_PLL3_Config>
 80042e4:	4603      	mov	r3, r0
 80042e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80042ea:	e004      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80042f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80042fe:	4bc0      	ldr	r3, [pc, #768]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004302:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430e:	4abc      	ldr	r2, [pc, #752]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004310:	430b      	orrs	r3, r1
 8004312:	6553      	str	r3, [r2, #84]	; 0x54
 8004314:	e003      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004316:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800431a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004326:	f002 0302 	and.w	r3, r2, #2
 800432a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800432e:	2300      	movs	r3, #0
 8004330:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004334:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d043      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800433e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004346:	2b05      	cmp	r3, #5
 8004348:	d824      	bhi.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800434a:	a201      	add	r2, pc, #4	; (adr r2, 8004350 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800434c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004350:	0800439d 	.word	0x0800439d
 8004354:	08004369 	.word	0x08004369
 8004358:	0800437f 	.word	0x0800437f
 800435c:	0800439d 	.word	0x0800439d
 8004360:	0800439d 	.word	0x0800439d
 8004364:	0800439d 	.word	0x0800439d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004368:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436c:	3308      	adds	r3, #8
 800436e:	2101      	movs	r1, #1
 8004370:	4618      	mov	r0, r3
 8004372:	f001 fd9b 	bl	8005eac <RCCEx_PLL2_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800437c:	e00f      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800437e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004382:	3328      	adds	r3, #40	; 0x28
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f001 fe42 	bl	8006010 <RCCEx_PLL3_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004392:	e004      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800439a:	e000      	b.n	800439e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800439c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800439e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80043a6:	4b96      	ldr	r3, [pc, #600]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043aa:	f023 0107 	bic.w	r1, r3, #7
 80043ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80043b6:	4a92      	ldr	r2, [pc, #584]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80043b8:	430b      	orrs	r3, r1
 80043ba:	6553      	str	r3, [r2, #84]	; 0x54
 80043bc:	e003      	b.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f002 0304 	and.w	r3, r2, #4
 80043d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043dc:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d043      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80043e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d824      	bhi.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80043f2:	a201      	add	r2, pc, #4	; (adr r2, 80043f8 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80043f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043f8:	08004445 	.word	0x08004445
 80043fc:	08004411 	.word	0x08004411
 8004400:	08004427 	.word	0x08004427
 8004404:	08004445 	.word	0x08004445
 8004408:	08004445 	.word	0x08004445
 800440c:	08004445 	.word	0x08004445
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004414:	3308      	adds	r3, #8
 8004416:	2101      	movs	r1, #1
 8004418:	4618      	mov	r0, r3
 800441a:	f001 fd47 	bl	8005eac <RCCEx_PLL2_Config>
 800441e:	4603      	mov	r3, r0
 8004420:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004424:	e00f      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004426:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800442a:	3328      	adds	r3, #40	; 0x28
 800442c:	2101      	movs	r1, #1
 800442e:	4618      	mov	r0, r3
 8004430:	f001 fdee 	bl	8006010 <RCCEx_PLL3_Config>
 8004434:	4603      	mov	r3, r0
 8004436:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800443a:	e004      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004442:	e000      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004444:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004446:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800444e:	4b6c      	ldr	r3, [pc, #432]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004452:	f023 0107 	bic.w	r1, r3, #7
 8004456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800445a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800445e:	4a68      	ldr	r2, [pc, #416]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004460:	430b      	orrs	r3, r1
 8004462:	6593      	str	r3, [r2, #88]	; 0x58
 8004464:	e003      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004466:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800446a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800446e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004476:	f002 0320 	and.w	r3, r2, #32
 800447a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800447e:	2300      	movs	r3, #0
 8004480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004484:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004488:	460b      	mov	r3, r1
 800448a:	4313      	orrs	r3, r2
 800448c:	d055      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800448e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004492:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004496:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800449a:	d033      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800449c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044a0:	d82c      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a6:	d02f      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80044a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ac:	d826      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044b2:	d02b      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80044b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80044b8:	d820      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044be:	d012      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 80044c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044c4:	d81a      	bhi.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d022      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 80044ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ce:	d115      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d4:	3308      	adds	r3, #8
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 fce7 	bl	8005eac <RCCEx_PLL2_Config>
 80044de:	4603      	mov	r3, r0
 80044e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044e4:	e015      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ea:	3328      	adds	r3, #40	; 0x28
 80044ec:	2102      	movs	r1, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fd8e 	bl	8006010 <RCCEx_PLL3_Config>
 80044f4:	4603      	mov	r3, r0
 80044f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80044fa:	e00a      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004502:	e006      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004504:	bf00      	nop
 8004506:	e004      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004508:	bf00      	nop
 800450a:	e002      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 8004510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004512:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004516:	2b00      	cmp	r3, #0
 8004518:	d10b      	bne.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800451a:	4b39      	ldr	r3, [pc, #228]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800451c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004526:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800452a:	4a35      	ldr	r2, [pc, #212]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800452c:	430b      	orrs	r3, r1
 800452e:	6553      	str	r3, [r2, #84]	; 0x54
 8004530:	e003      	b.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004536:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800453a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004546:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800454a:	2300      	movs	r3, #0
 800454c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004550:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004554:	460b      	mov	r3, r1
 8004556:	4313      	orrs	r3, r2
 8004558:	d058      	beq.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800455a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004562:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004566:	d033      	beq.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004568:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800456c:	d82c      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800456e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004572:	d02f      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d826      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800457a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800457e:	d02b      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004580:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004584:	d820      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004586:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800458a:	d012      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800458c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004590:	d81a      	bhi.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004592:	2b00      	cmp	r3, #0
 8004594:	d022      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800459a:	d115      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800459c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a0:	3308      	adds	r3, #8
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f001 fc81 	bl	8005eac <RCCEx_PLL2_Config>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045b0:	e015      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b6:	3328      	adds	r3, #40	; 0x28
 80045b8:	2102      	movs	r1, #2
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 fd28 	bl	8006010 <RCCEx_PLL3_Config>
 80045c0:	4603      	mov	r3, r0
 80045c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80045c6:	e00a      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045ce:	e006      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80045d0:	bf00      	nop
 80045d2:	e004      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80045d4:	bf00      	nop
 80045d6:	e002      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80045d8:	bf00      	nop
 80045da:	e000      	b.n	80045de <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 80045dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045de:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d10e      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80045e6:	4b06      	ldr	r3, [pc, #24]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80045ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80045f6:	4a02      	ldr	r2, [pc, #8]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80045f8:	430b      	orrs	r3, r1
 80045fa:	6593      	str	r3, [r2, #88]	; 0x58
 80045fc:	e006      	b.n	800460c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80045fe:	bf00      	nop
 8004600:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004608:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800460c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004614:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004618:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800461c:	2300      	movs	r3, #0
 800461e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004622:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004626:	460b      	mov	r3, r1
 8004628:	4313      	orrs	r3, r2
 800462a:	d055      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800462c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004630:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004634:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004638:	d033      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800463a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800463e:	d82c      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004644:	d02f      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800464a:	d826      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800464c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004650:	d02b      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004652:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004656:	d820      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004658:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800465c:	d012      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800465e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004662:	d81a      	bhi.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004664:	2b00      	cmp	r3, #0
 8004666:	d022      	beq.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800466c:	d115      	bne.n	800469a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800466e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004672:	3308      	adds	r3, #8
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f001 fc18 	bl	8005eac <RCCEx_PLL2_Config>
 800467c:	4603      	mov	r3, r0
 800467e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004682:	e015      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004688:	3328      	adds	r3, #40	; 0x28
 800468a:	2102      	movs	r1, #2
 800468c:	4618      	mov	r0, r3
 800468e:	f001 fcbf 	bl	8006010 <RCCEx_PLL3_Config>
 8004692:	4603      	mov	r3, r0
 8004694:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004698:	e00a      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046a0:	e006      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80046a2:	bf00      	nop
 80046a4:	e004      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80046a6:	bf00      	nop
 80046a8:	e002      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80046aa:	bf00      	nop
 80046ac:	e000      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 80046ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046b0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10b      	bne.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80046b8:	4ba1      	ldr	r3, [pc, #644]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046bc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80046c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046c8:	4a9d      	ldr	r2, [pc, #628]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80046ca:	430b      	orrs	r3, r1
 80046cc:	6593      	str	r3, [r2, #88]	; 0x58
 80046ce:	e003      	b.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046d4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80046d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e0:	f002 0308 	and.w	r3, r2, #8
 80046e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046e8:	2300      	movs	r3, #0
 80046ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80046ee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80046f2:	460b      	mov	r3, r1
 80046f4:	4313      	orrs	r3, r2
 80046f6:	d01e      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80046f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d10c      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004706:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470a:	3328      	adds	r3, #40	; 0x28
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f001 fc7e 	bl	8006010 <RCCEx_PLL3_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004720:	4b87      	ldr	r3, [pc, #540]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004724:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004728:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800472c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004730:	4a83      	ldr	r2, [pc, #524]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004732:	430b      	orrs	r3, r1
 8004734:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004736:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f002 0310 	and.w	r3, r2, #16
 8004742:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004746:	2300      	movs	r3, #0
 8004748:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800474c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004750:	460b      	mov	r3, r1
 8004752:	4313      	orrs	r3, r2
 8004754:	d01e      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004756:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800475e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004762:	d10c      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004768:	3328      	adds	r3, #40	; 0x28
 800476a:	2102      	movs	r1, #2
 800476c:	4618      	mov	r0, r3
 800476e:	f001 fc4f 	bl	8006010 <RCCEx_PLL3_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800477e:	4b70      	ldr	r3, [pc, #448]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004782:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004786:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800478e:	4a6c      	ldr	r2, [pc, #432]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004790:	430b      	orrs	r3, r1
 8004792:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004794:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80047a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047a4:	2300      	movs	r3, #0
 80047a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047aa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80047ae:	460b      	mov	r3, r1
 80047b0:	4313      	orrs	r3, r2
 80047b2:	d03e      	beq.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80047b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80047bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c0:	d022      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 80047c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c6:	d81b      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 80047cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047d0:	d00b      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 80047d2:	e015      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047d8:	3308      	adds	r3, #8
 80047da:	2100      	movs	r1, #0
 80047dc:	4618      	mov	r0, r3
 80047de:	f001 fb65 	bl	8005eac <RCCEx_PLL2_Config>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047e8:	e00f      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ee:	3328      	adds	r3, #40	; 0x28
 80047f0:	2102      	movs	r1, #2
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 fc0c 	bl	8006010 <RCCEx_PLL3_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80047fe:	e004      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004806:	e000      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 8004808:	bf00      	nop
    }

    if (ret == HAL_OK)
 800480a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004812:	4b4b      	ldr	r3, [pc, #300]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004816:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800481a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800481e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004822:	4a47      	ldr	r2, [pc, #284]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004824:	430b      	orrs	r3, r1
 8004826:	6593      	str	r3, [r2, #88]	; 0x58
 8004828:	e003      	b.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800482a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800482e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004832:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800483e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004840:	2300      	movs	r3, #0
 8004842:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004844:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004848:	460b      	mov	r3, r1
 800484a:	4313      	orrs	r3, r2
 800484c:	d03b      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800484e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800485a:	d01f      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800485c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004860:	d818      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004866:	d003      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800486c:	d007      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800486e:	e011      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004870:	4b33      	ldr	r3, [pc, #204]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004874:	4a32      	ldr	r2, [pc, #200]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800487a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800487c:	e00f      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800487e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004882:	3328      	adds	r3, #40	; 0x28
 8004884:	2101      	movs	r1, #1
 8004886:	4618      	mov	r0, r3
 8004888:	f001 fbc2 	bl	8006010 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004892:	e004      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800489a:	e000      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800489c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10b      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80048a6:	4b26      	ldr	r3, [pc, #152]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80048ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b6:	4a22      	ldr	r2, [pc, #136]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6553      	str	r3, [r2, #84]	; 0x54
 80048bc:	e003      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80048c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80048d2:	673b      	str	r3, [r7, #112]	; 0x70
 80048d4:	2300      	movs	r3, #0
 80048d6:	677b      	str	r3, [r7, #116]	; 0x74
 80048d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80048dc:	460b      	mov	r3, r1
 80048de:	4313      	orrs	r3, r2
 80048e0:	d034      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d007      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 80048f2:	e011      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f4:	4b12      	ldr	r3, [pc, #72]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f8:	4a11      	ldr	r2, [pc, #68]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004900:	e00e      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004902:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004906:	3308      	adds	r3, #8
 8004908:	2102      	movs	r1, #2
 800490a:	4618      	mov	r0, r3
 800490c:	f001 face 	bl	8005eac <RCCEx_PLL2_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004916:	e003      	b.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800491e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004920:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004924:	2b00      	cmp	r3, #0
 8004926:	d10d      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004930:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004936:	4a02      	ldr	r2, [pc, #8]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004938:	430b      	orrs	r3, r1
 800493a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493c:	e006      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004948:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800494c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004954:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004958:	66bb      	str	r3, [r7, #104]	; 0x68
 800495a:	2300      	movs	r3, #0
 800495c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800495e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004962:	460b      	mov	r3, r1
 8004964:	4313      	orrs	r3, r2
 8004966:	d00c      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004968:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800496c:	3328      	adds	r3, #40	; 0x28
 800496e:	2102      	movs	r1, #2
 8004970:	4618      	mov	r0, r3
 8004972:	f001 fb4d 	bl	8006010 <RCCEx_PLL3_Config>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004982:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800498a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800498e:	663b      	str	r3, [r7, #96]	; 0x60
 8004990:	2300      	movs	r3, #0
 8004992:	667b      	str	r3, [r7, #100]	; 0x64
 8004994:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004998:	460b      	mov	r3, r1
 800499a:	4313      	orrs	r3, r2
 800499c:	d038      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800499e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049aa:	d018      	beq.n	80049de <HAL_RCCEx_PeriphCLKConfig+0x107e>
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b0:	d811      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b6:	d014      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d80b      	bhi.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d011      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d106      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c8:	4bc3      	ldr	r3, [pc, #780]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4ac2      	ldr	r2, [pc, #776]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80049d4:	e008      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049dc:	e004      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80049de:	bf00      	nop
 80049e0:	e002      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80049e2:	bf00      	nop
 80049e4:	e000      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 80049e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049f0:	4bb9      	ldr	r3, [pc, #740]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 80049f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a00:	4ab5      	ldr	r2, [pc, #724]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a02:	430b      	orrs	r3, r1
 8004a04:	6553      	str	r3, [r2, #84]	; 0x54
 8004a06:	e003      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004a1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a1e:	2300      	movs	r3, #0
 8004a20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004a26:	460b      	mov	r3, r1
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	d009      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004a2c:	4baa      	ldr	r3, [pc, #680]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004a34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3a:	4aa7      	ldr	r2, [pc, #668]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a48:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004a4c:	653b      	str	r3, [r7, #80]	; 0x50
 8004a4e:	2300      	movs	r3, #0
 8004a50:	657b      	str	r3, [r7, #84]	; 0x54
 8004a52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004a56:	460b      	mov	r3, r1
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	d009      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a5c:	4b9e      	ldr	r3, [pc, #632]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a60:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004a64:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	4a9b      	ldr	r2, [pc, #620]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a6c:	430b      	orrs	r3, r1
 8004a6e:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a78:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004a7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a7e:	2300      	movs	r3, #0
 8004a80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a82:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004a86:	460b      	mov	r3, r1
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004a8c:	4b92      	ldr	r3, [pc, #584]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9a:	4a8f      	ldr	r2, [pc, #572]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004a9c:	430b      	orrs	r3, r1
 8004a9e:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa8:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004aac:	643b      	str	r3, [r7, #64]	; 0x40
 8004aae:	2300      	movs	r3, #0
 8004ab0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ab2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004abc:	4b86      	ldr	r3, [pc, #536]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	4a85      	ldr	r2, [pc, #532]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ac2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ac6:	6113      	str	r3, [r2, #16]
 8004ac8:	4b83      	ldr	r3, [pc, #524]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004aca:	6919      	ldr	r1, [r3, #16]
 8004acc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ad0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ad4:	4a80      	ldr	r2, [pc, #512]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004ae6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ae8:	2300      	movs	r3, #0
 8004aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004aec:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004af0:	460b      	mov	r3, r1
 8004af2:	4313      	orrs	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004af6:	4b78      	ldr	r3, [pc, #480]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b04:	4a74      	ldr	r2, [pc, #464]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b06:	430b      	orrs	r3, r1
 8004b08:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b12:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004b16:	633b      	str	r3, [r7, #48]	; 0x30
 8004b18:	2300      	movs	r3, #0
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004b20:	460b      	mov	r3, r1
 8004b22:	4313      	orrs	r3, r2
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b26:	4b6c      	ldr	r3, [pc, #432]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b2a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004b2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b36:	4a68      	ldr	r2, [pc, #416]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b44:	2100      	movs	r1, #0
 8004b46:	62b9      	str	r1, [r7, #40]	; 0x28
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b4e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004b52:	460b      	mov	r3, r1
 8004b54:	4313      	orrs	r3, r2
 8004b56:	d011      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5c:	3308      	adds	r3, #8
 8004b5e:	2100      	movs	r1, #0
 8004b60:	4618      	mov	r0, r3
 8004b62:	f001 f9a3 	bl	8005eac <RCCEx_PLL2_Config>
 8004b66:	4603      	mov	r3, r0
 8004b68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004b6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	2100      	movs	r1, #0
 8004b86:	6239      	str	r1, [r7, #32]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004b92:	460b      	mov	r3, r1
 8004b94:	4313      	orrs	r3, r2
 8004b96:	d011      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	2101      	movs	r1, #1
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f001 f983 	bl	8005eac <RCCEx_PLL2_Config>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004bac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004bbc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	61b9      	str	r1, [r7, #24]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	61fb      	str	r3, [r7, #28]
 8004bce:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d011      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004bd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bdc:	3308      	adds	r3, #8
 8004bde:	2102      	movs	r1, #2
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 f963 	bl	8005eac <RCCEx_PLL2_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004bec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bf4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bf8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	2100      	movs	r1, #0
 8004c06:	6139      	str	r1, [r7, #16]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d011      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c1c:	3328      	adds	r3, #40	; 0x28
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f9f5 	bl	8006010 <RCCEx_PLL3_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004c2c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d003      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c34:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c38:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c44:	2100      	movs	r1, #0
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	f003 0310 	and.w	r3, r3, #16
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004c52:	460b      	mov	r3, r1
 8004c54:	4313      	orrs	r3, r2
 8004c56:	d011      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c58:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c5c:	3328      	adds	r3, #40	; 0x28
 8004c5e:	2101      	movs	r1, #1
 8004c60:	4618      	mov	r0, r3
 8004c62:	f001 f9d5 	bl	8006010 <RCCEx_PLL3_Config>
 8004c66:	4603      	mov	r3, r0
 8004c68:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d003      	beq.n	8004c7c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004c78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	2100      	movs	r1, #0
 8004c86:	6039      	str	r1, [r7, #0]
 8004c88:	f003 0320 	and.w	r3, r3, #32
 8004c8c:	607b      	str	r3, [r7, #4]
 8004c8e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004c92:	460b      	mov	r3, r1
 8004c94:	4313      	orrs	r3, r2
 8004c96:	d011      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9c:	3328      	adds	r3, #40	; 0x28
 8004c9e:	2102      	movs	r1, #2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f001 f9b5 	bl	8006010 <RCCEx_PLL3_Config>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004cac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d003      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004cb8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004cbc:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd6:	bf00      	nop
 8004cd8:	58024400 	.word	0x58024400

08004cdc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b090      	sub	sp, #64	; 0x40
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ce6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cea:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	f040 8094 	bne.w	8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004cf4:	4b97      	ldr	r3, [pc, #604]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d00:	2b04      	cmp	r3, #4
 8004d02:	f200 8087 	bhi.w	8004e14 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004d06:	a201      	add	r2, pc, #4	; (adr r2, 8004d0c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0c:	08004d21 	.word	0x08004d21
 8004d10:	08004d49 	.word	0x08004d49
 8004d14:	08004d71 	.word	0x08004d71
 8004d18:	08004e0d 	.word	0x08004e0d
 8004d1c:	08004d99 	.word	0x08004d99
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004d20:	4b8c      	ldr	r3, [pc, #560]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004d2c:	d108      	bne.n	8004d40 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004d2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 ff68 	bl	8005c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d3c:	f000 bc97 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d40:	2300      	movs	r3, #0
 8004d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d44:	f000 bc93 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004d48:	4b82      	ldr	r3, [pc, #520]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d54:	d108      	bne.n	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d56:	f107 0318 	add.w	r3, r7, #24
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fcac 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d64:	f000 bc83 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d6c:	f000 bc7f 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d70:	4b78      	ldr	r3, [pc, #480]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d7c:	d108      	bne.n	8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d7e:	f107 030c 	add.w	r3, r7, #12
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fdec 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d8c:	f000 bc6f 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004d90:	2300      	movs	r3, #0
 8004d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004d94:	f000 bc6b 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d98:	4b6e      	ldr	r3, [pc, #440]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004da0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004da2:	4b6c      	ldr	r3, [pc, #432]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d10c      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004db4:	4b67      	ldr	r3, [pc, #412]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	08db      	lsrs	r3, r3, #3
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	4a66      	ldr	r2, [pc, #408]	; (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc6:	e01f      	b.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004dc8:	4b62      	ldr	r3, [pc, #392]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd4:	d106      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ddc:	d102      	bne.n	8004de4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004dde:	4b5f      	ldr	r3, [pc, #380]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004de0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004de2:	e011      	b.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004de4:	4b5b      	ldr	r3, [pc, #364]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df0:	d106      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004df8:	d102      	bne.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004dfa:	4b59      	ldr	r3, [pc, #356]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dfe:	e003      	b.n	8004e08 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004e00:	2300      	movs	r3, #0
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004e04:	f000 bc33 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004e08:	f000 bc31 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004e0c:	4b55      	ldr	r3, [pc, #340]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e10:	f000 bc2d 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004e14:	2300      	movs	r3, #0
 8004e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e18:	f000 bc29 	b.w	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e20:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004e24:	430b      	orrs	r3, r1
 8004e26:	f040 809f 	bne.w	8004f68 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8004e2a:	4b4a      	ldr	r3, [pc, #296]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e2e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004e32:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e3a:	d04d      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e42:	f200 8084 	bhi.w	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e48:	2bc0      	cmp	r3, #192	; 0xc0
 8004e4a:	d07d      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e50:	d87d      	bhi.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	2b80      	cmp	r3, #128	; 0x80
 8004e56:	d02d      	beq.n	8004eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	2b80      	cmp	r3, #128	; 0x80
 8004e5c:	d877      	bhi.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d003      	beq.n	8004e6c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	2b40      	cmp	r3, #64	; 0x40
 8004e68:	d012      	beq.n	8004e90 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8004e6a:	e070      	b.n	8004f4e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e6c:	4b39      	ldr	r3, [pc, #228]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e78:	d107      	bne.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fec2 	bl	8005c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e88:	e3f1      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004e8e:	e3ee      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e90:	4b30      	ldr	r3, [pc, #192]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e9c:	d107      	bne.n	8004eae <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e9e:	f107 0318 	add.w	r3, r7, #24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fc08 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004eac:	e3df      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004eb2:	e3dc      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004eb4:	4b27      	ldr	r3, [pc, #156]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec0:	d107      	bne.n	8004ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ec2:	f107 030c 	add.w	r3, r7, #12
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f000 fd4a 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ed0:	e3cd      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004ed6:	e3ca      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004ed8:	4b1e      	ldr	r3, [pc, #120]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004edc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ee0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ee2:	4b1c      	ldr	r3, [pc, #112]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0304 	and.w	r3, r3, #4
 8004eea:	2b04      	cmp	r3, #4
 8004eec:	d10c      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 8004eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d109      	bne.n	8004f08 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ef4:	4b17      	ldr	r3, [pc, #92]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	08db      	lsrs	r3, r3, #3
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	4a16      	ldr	r2, [pc, #88]	; (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004f00:	fa22 f303 	lsr.w	r3, r2, r3
 8004f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f06:	e01e      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f08:	4b12      	ldr	r3, [pc, #72]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f14:	d106      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 8004f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f1c:	d102      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004f20:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f22:	e010      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004f24:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f30:	d106      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8004f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f38:	d102      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004f3a:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f3e:	e002      	b.n	8004f46 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004f44:	e393      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004f46:	e392      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f48:	4b06      	ldr	r3, [pc, #24]	; (8004f64 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f4c:	e38f      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f52:	e38c      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004f54:	58024400 	.word	0x58024400
 8004f58:	03d09000 	.word	0x03d09000
 8004f5c:	003d0900 	.word	0x003d0900
 8004f60:	007a1200 	.word	0x007a1200
 8004f64:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8004f68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f6c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8004f70:	430b      	orrs	r3, r1
 8004f72:	f040 809c 	bne.w	80050ae <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8004f76:	4b9e      	ldr	r3, [pc, #632]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f7a:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 8004f7e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f86:	d054      	beq.n	8005032 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8004f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f8e:	f200 808b 	bhi.w	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004f98:	f000 8083 	beq.w	80050a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004fa2:	f200 8081 	bhi.w	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fac:	d02f      	beq.n	800500e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fb4:	d878      	bhi.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc2:	d012      	beq.n	8004fea <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8004fc4:	e070      	b.n	80050a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004fc6:	4b8a      	ldr	r3, [pc, #552]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004fd2:	d107      	bne.n	8004fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004fd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fe15 	bl	8005c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fe2:	e344      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fe8:	e341      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004fea:	4b81      	ldr	r3, [pc, #516]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ff6:	d107      	bne.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ff8:	f107 0318 	add.w	r3, r7, #24
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f000 fb5b 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005002:	69bb      	ldr	r3, [r7, #24]
 8005004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005006:	e332      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800500c:	e32f      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800500e:	4b78      	ldr	r3, [pc, #480]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501a:	d107      	bne.n	800502c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800501c:	f107 030c 	add.w	r3, r7, #12
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fc9d 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800502a:	e320      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005030:	e31d      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005032:	4b6f      	ldr	r3, [pc, #444]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800503a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800503c:	4b6c      	ldr	r3, [pc, #432]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b04      	cmp	r3, #4
 8005046:	d10c      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800504e:	4b68      	ldr	r3, [pc, #416]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	08db      	lsrs	r3, r3, #3
 8005054:	f003 0303 	and.w	r3, r3, #3
 8005058:	4a66      	ldr	r2, [pc, #408]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800505a:	fa22 f303 	lsr.w	r3, r2, r3
 800505e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005060:	e01e      	b.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005062:	4b63      	ldr	r3, [pc, #396]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800506e:	d106      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005076:	d102      	bne.n	800507e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005078:	4b5f      	ldr	r3, [pc, #380]	; (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800507a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800507c:	e010      	b.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800507e:	4b5c      	ldr	r3, [pc, #368]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800508a:	d106      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800508c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800508e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005092:	d102      	bne.n	800509a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005094:	4b59      	ldr	r3, [pc, #356]	; (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005098:	e002      	b.n	80050a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800509e:	e2e6      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80050a0:	e2e5      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80050a2:	4b57      	ldr	r3, [pc, #348]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80050a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050a6:	e2e2      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80050a8:	2300      	movs	r3, #0
 80050aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80050ac:	e2df      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80050ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050b2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80050b6:	430b      	orrs	r3, r1
 80050b8:	f040 80a7 	bne.w	800520a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80050bc:	4b4c      	ldr	r3, [pc, #304]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80050be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80050c4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050cc:	d055      	beq.n	800517a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050d4:	f200 8096 	bhi.w	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80050d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050de:	f000 8084 	beq.w	80051ea <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 80050e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050e8:	f200 808c 	bhi.w	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80050ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f2:	d030      	beq.n	8005156 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80050f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	f200 8083 	bhi.w	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d004      	beq.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 8005104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005106:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800510a:	d012      	beq.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800510c:	e07a      	b.n	8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800510e:	4b38      	ldr	r3, [pc, #224]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800511a:	d107      	bne.n	800512c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800511c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005120:	4618      	mov	r0, r3
 8005122:	f000 fd71 	bl	8005c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005128:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800512a:	e2a0      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800512c:	2300      	movs	r3, #0
 800512e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005130:	e29d      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005132:	4b2f      	ldr	r3, [pc, #188]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800513a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800513e:	d107      	bne.n	8005150 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005140:	f107 0318 	add.w	r3, r7, #24
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fab7 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800514e:	e28e      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005154:	e28b      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005156:	4b26      	ldr	r3, [pc, #152]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800515e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005162:	d107      	bne.n	8005174 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005164:	f107 030c 	add.w	r3, r7, #12
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fbf9 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005172:	e27c      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005178:	e279      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800517a:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005182:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005184:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b04      	cmp	r3, #4
 800518e:	d10c      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 8005190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005196:	4b16      	ldr	r3, [pc, #88]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	08db      	lsrs	r3, r3, #3
 800519c:	f003 0303 	and.w	r3, r3, #3
 80051a0:	4a14      	ldr	r2, [pc, #80]	; (80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 80051a2:	fa22 f303 	lsr.w	r3, r2, r3
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	e01e      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80051aa:	4b11      	ldr	r3, [pc, #68]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051b6:	d106      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80051b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80051be:	d102      	bne.n	80051c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051c4:	e010      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051d2:	d106      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80051d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051da:	d102      	bne.n	80051e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 80051de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051e0:	e002      	b.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80051e2:	2300      	movs	r3, #0
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80051e6:	e242      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80051e8:	e241      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80051ea:	4b05      	ldr	r3, [pc, #20]	; (8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80051ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ee:	e23e      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80051f0:	58024400 	.word	0x58024400
 80051f4:	03d09000 	.word	0x03d09000
 80051f8:	003d0900 	.word	0x003d0900
 80051fc:	007a1200 	.word	0x007a1200
 8005200:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005208:	e231      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800520a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800520e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005212:	430b      	orrs	r3, r1
 8005214:	f040 8085 	bne.w	8005322 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005218:	4b9c      	ldr	r3, [pc, #624]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800521a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800521c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005220:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005228:	d06b      	beq.n	8005302 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800522a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005230:	d874      	bhi.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005234:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005238:	d056      	beq.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800523a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800523c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005240:	d86c      	bhi.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005244:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005248:	d03b      	beq.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800524a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005250:	d864      	bhi.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005254:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005258:	d021      	beq.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005260:	d85c      	bhi.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 8005262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005264:	2b00      	cmp	r3, #0
 8005266:	d004      	beq.n	8005272 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800526a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800526e:	d004      	beq.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 8005270:	e054      	b.n	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005272:	f7fe fb49 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8005276:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005278:	e1f9      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800527a:	4b84      	ldr	r3, [pc, #528]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005282:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005286:	d107      	bne.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005288:	f107 0318 	add.w	r3, r7, #24
 800528c:	4618      	mov	r0, r3
 800528e:	f000 fa13 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005296:	e1ea      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005298:	2300      	movs	r3, #0
 800529a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800529c:	e1e7      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800529e:	4b7b      	ldr	r3, [pc, #492]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052aa:	d107      	bne.n	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ac:	f107 030c 	add.w	r3, r7, #12
 80052b0:	4618      	mov	r0, r3
 80052b2:	f000 fb55 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052ba:	e1d8      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052c0:	e1d5      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052c2:	4b72      	ldr	r3, [pc, #456]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0304 	and.w	r3, r3, #4
 80052ca:	2b04      	cmp	r3, #4
 80052cc:	d109      	bne.n	80052e2 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052ce:	4b6f      	ldr	r3, [pc, #444]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	08db      	lsrs	r3, r3, #3
 80052d4:	f003 0303 	and.w	r3, r3, #3
 80052d8:	4a6d      	ldr	r2, [pc, #436]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80052da:	fa22 f303 	lsr.w	r3, r2, r3
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052e0:	e1c5      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052e6:	e1c2      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80052e8:	4b68      	ldr	r3, [pc, #416]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052f4:	d102      	bne.n	80052fc <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80052f6:	4b67      	ldr	r3, [pc, #412]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052fa:	e1b8      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052fc:	2300      	movs	r3, #0
 80052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005300:	e1b5      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005302:	4b62      	ldr	r3, [pc, #392]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800530a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800530e:	d102      	bne.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 8005310:	4b61      	ldr	r3, [pc, #388]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005312:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005314:	e1ab      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800531a:	e1a8      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800531c:	2300      	movs	r3, #0
 800531e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005320:	e1a5      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005322:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005326:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800532a:	430b      	orrs	r3, r1
 800532c:	d173      	bne.n	8005416 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800532e:	4b57      	ldr	r3, [pc, #348]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005332:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005336:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800533a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800533e:	d02f      	beq.n	80053a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 8005340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005346:	d863      	bhi.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005354:	d012      	beq.n	800537c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005356:	e05b      	b.n	8005410 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005358:	4b4c      	ldr	r3, [pc, #304]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005364:	d107      	bne.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005366:	f107 0318 	add.w	r3, r7, #24
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f9a4 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005374:	e17b      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005376:	2300      	movs	r3, #0
 8005378:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800537a:	e178      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800537c:	4b43      	ldr	r3, [pc, #268]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005388:	d107      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800538a:	f107 030c 	add.w	r3, r7, #12
 800538e:	4618      	mov	r0, r3
 8005390:	f000 fae6 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005398:	e169      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800539a:	2300      	movs	r3, #0
 800539c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800539e:	e166      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053a0:	4b3a      	ldr	r3, [pc, #232]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053a8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053aa:	4b38      	ldr	r3, [pc, #224]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b04      	cmp	r3, #4
 80053b4:	d10c      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 80053b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d109      	bne.n	80053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053bc:	4b33      	ldr	r3, [pc, #204]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	08db      	lsrs	r3, r3, #3
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	4a32      	ldr	r2, [pc, #200]	; (8005490 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ce:	e01e      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80053d0:	4b2e      	ldr	r3, [pc, #184]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053dc:	d106      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 80053de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053e4:	d102      	bne.n	80053ec <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80053e6:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80053e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ea:	e010      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053ec:	4b27      	ldr	r3, [pc, #156]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053f8:	d106      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005400:	d102      	bne.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005402:	4b25      	ldr	r3, [pc, #148]	; (8005498 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 8005404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005406:	e002      	b.n	800540e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005408:	2300      	movs	r3, #0
 800540a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800540c:	e12f      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800540e:	e12e      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005414:	e12b      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005416:	e9d7 2300 	ldrd	r2, r3, [r7]
 800541a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800541e:	430b      	orrs	r3, r1
 8005420:	d13c      	bne.n	800549c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005422:	4b1a      	ldr	r3, [pc, #104]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800542c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005438:	d012      	beq.n	8005460 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800543a:	e023      	b.n	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800543c:	4b13      	ldr	r3, [pc, #76]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005444:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005448:	d107      	bne.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800544a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fbda 	bl	8005c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005458:	e109      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800545e:	e106      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005468:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800546c:	d107      	bne.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800546e:	f107 0318 	add.w	r3, r7, #24
 8005472:	4618      	mov	r0, r3
 8005474:	f000 f920 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005478:	6a3b      	ldr	r3, [r7, #32]
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800547c:	e0f7      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005482:	e0f4      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005484:	2300      	movs	r3, #0
 8005486:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005488:	e0f1      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800548a:	bf00      	nop
 800548c:	58024400 	.word	0x58024400
 8005490:	03d09000 	.word	0x03d09000
 8005494:	003d0900 	.word	0x003d0900
 8005498:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800549c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054a0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80054a4:	430b      	orrs	r3, r1
 80054a6:	f040 8091 	bne.w	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80054aa:	4b73      	ldr	r3, [pc, #460]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80054ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ae:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80054b2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80054b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b6:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80054ba:	f000 8081 	beq.w	80055c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 80054be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c0:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 80054c4:	d87f      	bhi.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054cc:	d06b      	beq.n	80055a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 80054ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80054d4:	d877      	bhi.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054dc:	d056      	beq.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054e4:	d86f      	bhi.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054ec:	d03b      	beq.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80054f4:	d867      	bhi.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80054f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054fc:	d021      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80054fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005504:	d85f      	bhi.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005512:	d004      	beq.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 8005514:	e057      	b.n	80055c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005516:	f000 f8b9 	bl	800568c <HAL_RCCEx_GetD3PCLK1Freq>
 800551a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800551c:	e0a7      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800551e:	4b56      	ldr	r3, [pc, #344]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005526:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552a:	d107      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800552c:	f107 0318 	add.w	r3, r7, #24
 8005530:	4618      	mov	r0, r3
 8005532:	f000 f8c1 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800553a:	e098      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005540:	e095      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005542:	4b4d      	ldr	r3, [pc, #308]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800554a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800554e:	d107      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fa03 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800555e:	e086      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005564:	e083      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005566:	4b44      	ldr	r3, [pc, #272]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d109      	bne.n	8005586 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005572:	4b41      	ldr	r3, [pc, #260]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	08db      	lsrs	r3, r3, #3
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	4a3f      	ldr	r2, [pc, #252]	; (800567c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800557e:	fa22 f303 	lsr.w	r3, r2, r3
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005584:	e073      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005586:	2300      	movs	r3, #0
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800558a:	e070      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800558c:	4b3a      	ldr	r3, [pc, #232]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d102      	bne.n	80055a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800559a:	4b39      	ldr	r3, [pc, #228]	; (8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800559c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800559e:	e066      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055a0:	2300      	movs	r3, #0
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a4:	e063      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80055a6:	4b34      	ldr	r3, [pc, #208]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b2:	d102      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 80055b4:	4b33      	ldr	r3, [pc, #204]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80055b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055b8:	e059      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80055ba:	2300      	movs	r3, #0
 80055bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055be:	e056      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055c0:	4b31      	ldr	r3, [pc, #196]	; (8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 80055c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c4:	e053      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80055c6:	2300      	movs	r3, #0
 80055c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ca:	e050      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80055cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d0:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 80055d4:	430b      	orrs	r3, r1
 80055d6:	d148      	bne.n	800566a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80055d8:	4b27      	ldr	r3, [pc, #156]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80055da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80055e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80055e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055e8:	d02a      	beq.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80055ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055f0:	d838      	bhi.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80055f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055fe:	d00d      	beq.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 8005600:	e030      	b.n	8005664 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005602:	4b1d      	ldr	r3, [pc, #116]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800560e:	d102      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 8005610:	4b1c      	ldr	r3, [pc, #112]	; (8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005614:	e02b      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800561a:	e028      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800561c:	4b16      	ldr	r3, [pc, #88]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005624:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005628:	d107      	bne.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800562a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800562e:	4618      	mov	r0, r3
 8005630:	f000 faea 	bl	8005c08 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005638:	e019      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800563e:	e016      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005640:	4b0d      	ldr	r3, [pc, #52]	; (8005678 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005648:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800564c:	d107      	bne.n	800565e <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800564e:	f107 0318 	add.w	r3, r7, #24
 8005652:	4618      	mov	r0, r3
 8005654:	f000 f830 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800565c:	e007      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800565e:	2300      	movs	r3, #0
 8005660:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005662:	e004      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005668:	e001      	b.n	800566e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800566e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005670:	4618      	mov	r0, r3
 8005672:	3740      	adds	r7, #64	; 0x40
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	58024400 	.word	0x58024400
 800567c:	03d09000 	.word	0x03d09000
 8005680:	003d0900 	.word	0x003d0900
 8005684:	007a1200 	.word	0x007a1200
 8005688:	00bb8000 	.word	0x00bb8000

0800568c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 8005690:	f7fe f90a 	bl	80038a8 <HAL_RCC_GetHCLKFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b06      	ldr	r3, [pc, #24]	; (80056b0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	091b      	lsrs	r3, r3, #4
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4904      	ldr	r1, [pc, #16]	; (80056b4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	f003 031f 	and.w	r3, r3, #31
 80056a8:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	58024400 	.word	0x58024400
 80056b4:	080086f4 	.word	0x080086f4

080056b8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80056c0:	4ba1      	ldr	r3, [pc, #644]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c4:	f003 0303 	and.w	r3, r3, #3
 80056c8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80056ca:	4b9f      	ldr	r3, [pc, #636]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ce:	0b1b      	lsrs	r3, r3, #12
 80056d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056d4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80056d6:	4b9c      	ldr	r3, [pc, #624]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056da:	091b      	lsrs	r3, r3, #4
 80056dc:	f003 0301 	and.w	r3, r3, #1
 80056e0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80056e2:	4b99      	ldr	r3, [pc, #612]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	08db      	lsrs	r3, r3, #3
 80056e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	fb02 f303 	mul.w	r3, r2, r3
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2b00      	cmp	r3, #0
 8005702:	f000 8111 	beq.w	8005928 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b02      	cmp	r3, #2
 800570a:	f000 8083 	beq.w	8005814 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	2b02      	cmp	r3, #2
 8005712:	f200 80a1 	bhi.w	8005858 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800571c:	69bb      	ldr	r3, [r7, #24]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d056      	beq.n	80057d0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005722:	e099      	b.n	8005858 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005724:	4b88      	ldr	r3, [pc, #544]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0320 	and.w	r3, r3, #32
 800572c:	2b00      	cmp	r3, #0
 800572e:	d02d      	beq.n	800578c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005730:	4b85      	ldr	r3, [pc, #532]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	08db      	lsrs	r3, r3, #3
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	4a84      	ldr	r2, [pc, #528]	; (800594c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
 8005740:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	ee07 3a90 	vmov	s15, r3
 8005748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	ee07 3a90 	vmov	s15, r3
 8005752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800575a:	4b7b      	ldr	r3, [pc, #492]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005762:	ee07 3a90 	vmov	s15, r3
 8005766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800576a:	ed97 6a03 	vldr	s12, [r7, #12]
 800576e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800577a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800577e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005786:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800578a:	e087      	b.n	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005796:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005954 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800579a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800579e:	4b6a      	ldr	r3, [pc, #424]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057a6:	ee07 3a90 	vmov	s15, r3
 80057aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80057b2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80057c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057ce:	e065      	b.n	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057da:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057e2:	4b59      	ldr	r3, [pc, #356]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057ea:	ee07 3a90 	vmov	s15, r3
 80057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80057f6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80057fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800580e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005812:	e043      	b.n	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800581e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800595c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005826:	4b48      	ldr	r3, [pc, #288]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800582e:	ee07 3a90 	vmov	s15, r3
 8005832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005836:	ed97 6a03 	vldr	s12, [r7, #12]
 800583a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005846:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005852:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005856:	e021      	b.n	800589c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	ee07 3a90 	vmov	s15, r3
 800585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005862:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005958 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800586a:	4b37      	ldr	r3, [pc, #220]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800586c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005872:	ee07 3a90 	vmov	s15, r3
 8005876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800587a:	ed97 6a03 	vldr	s12, [r7, #12]
 800587e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005950 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800588a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005896:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800589a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800589c:	4b2a      	ldr	r3, [pc, #168]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800589e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a0:	0a5b      	lsrs	r3, r3, #9
 80058a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c2:	ee17 2a90 	vmov	r2, s15
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80058ca:	4b1f      	ldr	r3, [pc, #124]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	0c1b      	lsrs	r3, r3, #16
 80058d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058d4:	ee07 3a90 	vmov	s15, r3
 80058d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80058e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80058e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058f0:	ee17 2a90 	vmov	r2, s15
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80058f8:	4b13      	ldr	r3, [pc, #76]	; (8005948 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fc:	0e1b      	lsrs	r3, r3, #24
 80058fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005902:	ee07 3a90 	vmov	s15, r3
 8005906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800590a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800590e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005912:	edd7 6a07 	vldr	s13, [r7, #28]
 8005916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800591a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591e:	ee17 2a90 	vmov	r2, s15
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005926:	e008      	b.n	800593a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	609a      	str	r2, [r3, #8]
}
 800593a:	bf00      	nop
 800593c:	3724      	adds	r7, #36	; 0x24
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	58024400 	.word	0x58024400
 800594c:	03d09000 	.word	0x03d09000
 8005950:	46000000 	.word	0x46000000
 8005954:	4c742400 	.word	0x4c742400
 8005958:	4a742400 	.word	0x4a742400
 800595c:	4af42400 	.word	0x4af42400

08005960 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005960:	b480      	push	{r7}
 8005962:	b089      	sub	sp, #36	; 0x24
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005968:	4ba1      	ldr	r3, [pc, #644]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800596a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005972:	4b9f      	ldr	r3, [pc, #636]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	0d1b      	lsrs	r3, r3, #20
 8005978:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800597c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800597e:	4b9c      	ldr	r3, [pc, #624]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	0a1b      	lsrs	r3, r3, #8
 8005984:	f003 0301 	and.w	r3, r3, #1
 8005988:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800598a:	4b99      	ldr	r3, [pc, #612]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800598c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598e:	08db      	lsrs	r3, r3, #3
 8005990:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 8111 	beq.w	8005bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b02      	cmp	r3, #2
 80059b2:	f000 8083 	beq.w	8005abc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	f200 80a1 	bhi.w	8005b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d056      	beq.n	8005a78 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80059ca:	e099      	b.n	8005b00 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059cc:	4b88      	ldr	r3, [pc, #544]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0320 	and.w	r3, r3, #32
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d02d      	beq.n	8005a34 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059d8:	4b85      	ldr	r3, [pc, #532]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	08db      	lsrs	r3, r3, #3
 80059de:	f003 0303 	and.w	r3, r3, #3
 80059e2:	4a84      	ldr	r2, [pc, #528]	; (8005bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80059e4:	fa22 f303 	lsr.w	r3, r2, r3
 80059e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	ee07 3a90 	vmov	s15, r3
 80059fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a02:	4b7b      	ldr	r3, [pc, #492]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	ee07 3a90 	vmov	s15, r3
 8005a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a16:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005a32:	e087      	b.n	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	ee07 3a90 	vmov	s15, r3
 8005a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a3e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005bfc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a46:	4b6a      	ldr	r3, [pc, #424]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a4e:	ee07 3a90 	vmov	s15, r3
 8005a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a5a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a76:	e065      	b.n	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	ee07 3a90 	vmov	s15, r3
 8005a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a82:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a8a:	4b59      	ldr	r3, [pc, #356]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a92:	ee07 3a90 	vmov	s15, r3
 8005a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aba:	e043      	b.n	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005c04 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ace:	4b48      	ldr	r3, [pc, #288]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad6:	ee07 3a90 	vmov	s15, r3
 8005ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae2:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005afe:	e021      	b.n	8005b44 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	ee07 3a90 	vmov	s15, r3
 8005b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b0a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005c00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b12:	4b37      	ldr	r3, [pc, #220]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1a:	ee07 3a90 	vmov	s15, r3
 8005b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b22:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b26:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005bf8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b42:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005b44:	4b2a      	ldr	r3, [pc, #168]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	0a5b      	lsrs	r3, r3, #9
 8005b4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b6a:	ee17 2a90 	vmov	r2, s15
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005b72:	4b1f      	ldr	r3, [pc, #124]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	0c1b      	lsrs	r3, r3, #16
 8005b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b7c:	ee07 3a90 	vmov	s15, r3
 8005b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005b88:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b98:	ee17 2a90 	vmov	r2, s15
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005ba0:	4b13      	ldr	r3, [pc, #76]	; (8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	0e1b      	lsrs	r3, r3, #24
 8005ba6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005baa:	ee07 3a90 	vmov	s15, r3
 8005bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bc6:	ee17 2a90 	vmov	r2, s15
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005bce:	e008      	b.n	8005be2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	609a      	str	r2, [r3, #8]
}
 8005be2:	bf00      	nop
 8005be4:	3724      	adds	r7, #36	; 0x24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	58024400 	.word	0x58024400
 8005bf4:	03d09000 	.word	0x03d09000
 8005bf8:	46000000 	.word	0x46000000
 8005bfc:	4c742400 	.word	0x4c742400
 8005c00:	4a742400 	.word	0x4a742400
 8005c04:	4af42400 	.word	0x4af42400

08005c08 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b089      	sub	sp, #36	; 0x24
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c10:	4ba0      	ldr	r3, [pc, #640]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c14:	f003 0303 	and.w	r3, r3, #3
 8005c18:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005c1a:	4b9e      	ldr	r3, [pc, #632]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1e:	091b      	lsrs	r3, r3, #4
 8005c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c24:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005c26:	4b9b      	ldr	r3, [pc, #620]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005c30:	4b98      	ldr	r3, [pc, #608]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c34:	08db      	lsrs	r3, r3, #3
 8005c36:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	ee07 3a90 	vmov	s15, r3
 8005c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c48:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8111 	beq.w	8005e76 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005c54:	69bb      	ldr	r3, [r7, #24]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	f000 8083 	beq.w	8005d62 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	f200 80a1 	bhi.w	8005da6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d056      	beq.n	8005d1e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005c70:	e099      	b.n	8005da6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c72:	4b88      	ldr	r3, [pc, #544]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0320 	and.w	r3, r3, #32
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d02d      	beq.n	8005cda <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c7e:	4b85      	ldr	r3, [pc, #532]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	08db      	lsrs	r3, r3, #3
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	4a83      	ldr	r2, [pc, #524]	; (8005e98 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c8e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	ee07 3a90 	vmov	s15, r3
 8005ca0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ca8:	4b7a      	ldr	r3, [pc, #488]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cb0:	ee07 3a90 	vmov	s15, r3
 8005cb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cbc:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005cc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cd4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005cd8:	e087      	b.n	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	ee07 3a90 	vmov	s15, r3
 8005ce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ce4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cec:	4b69      	ldr	r3, [pc, #420]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf4:	ee07 3a90 	vmov	s15, r3
 8005cf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d00:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d1c:	e065      	b.n	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d28:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005ea4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005d2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d30:	4b58      	ldr	r3, [pc, #352]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d44:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d60:	e043      	b.n	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	ee07 3a90 	vmov	s15, r3
 8005d68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005ea8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005d70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d74:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d7c:	ee07 3a90 	vmov	s15, r3
 8005d80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d84:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d88:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005d8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005da0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005da4:	e021      	b.n	8005dea <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	ee07 3a90 	vmov	s15, r3
 8005dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005db0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005ea0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005db4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db8:	4b36      	ldr	r3, [pc, #216]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc0:	ee07 3a90 	vmov	s15, r3
 8005dc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dcc:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005e9c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005dd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ddc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005de4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005dea:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dee:	0a5b      	lsrs	r3, r3, #9
 8005df0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e00:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e04:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e10:	ee17 2a90 	vmov	r2, s15
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005e18:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1c:	0c1b      	lsrs	r3, r3, #16
 8005e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e3e:	ee17 2a90 	vmov	r2, s15
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005e46:	4b13      	ldr	r3, [pc, #76]	; (8005e94 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	0e1b      	lsrs	r3, r3, #24
 8005e4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e50:	ee07 3a90 	vmov	s15, r3
 8005e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e6c:	ee17 2a90 	vmov	r2, s15
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005e74:	e008      	b.n	8005e88 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	609a      	str	r2, [r3, #8]
}
 8005e88:	bf00      	nop
 8005e8a:	3724      	adds	r7, #36	; 0x24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	58024400 	.word	0x58024400
 8005e98:	03d09000 	.word	0x03d09000
 8005e9c:	46000000 	.word	0x46000000
 8005ea0:	4c742400 	.word	0x4c742400
 8005ea4:	4a742400 	.word	0x4a742400
 8005ea8:	4af42400 	.word	0x4af42400

08005eac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005eba:	4b53      	ldr	r3, [pc, #332]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	f003 0303 	and.w	r3, r3, #3
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d101      	bne.n	8005eca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e099      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005eca:	4b4f      	ldr	r3, [pc, #316]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a4e      	ldr	r2, [pc, #312]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ed0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed6:	f7fb f9e7 	bl	80012a8 <HAL_GetTick>
 8005eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005edc:	e008      	b.n	8005ef0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005ede:	f7fb f9e3 	bl	80012a8 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e086      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ef0:	4b45      	ldr	r3, [pc, #276]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f0      	bne.n	8005ede <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005efc:	4b42      	ldr	r3, [pc, #264]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f00:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	031b      	lsls	r3, r3, #12
 8005f0a:	493f      	ldr	r1, [pc, #252]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	628b      	str	r3, [r1, #40]	; 0x28
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	025b      	lsls	r3, r3, #9
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	431a      	orrs	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	041b      	lsls	r3, r3, #16
 8005f2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	061b      	lsls	r3, r3, #24
 8005f3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005f40:	4931      	ldr	r1, [pc, #196]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f42:	4313      	orrs	r3, r2
 8005f44:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005f46:	4b30      	ldr	r3, [pc, #192]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	492d      	ldr	r1, [pc, #180]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005f58:	4b2b      	ldr	r3, [pc, #172]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f5c:	f023 0220 	bic.w	r2, r3, #32
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	4928      	ldr	r1, [pc, #160]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f66:	4313      	orrs	r3, r2
 8005f68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005f6a:	4b27      	ldr	r3, [pc, #156]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f6e:	4a26      	ldr	r2, [pc, #152]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f70:	f023 0310 	bic.w	r3, r3, #16
 8005f74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005f76:	4b24      	ldr	r3, [pc, #144]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f7a:	4b24      	ldr	r3, [pc, #144]	; (800600c <RCCEx_PLL2_Config+0x160>)
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	69d2      	ldr	r2, [r2, #28]
 8005f82:	00d2      	lsls	r2, r2, #3
 8005f84:	4920      	ldr	r1, [pc, #128]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f86:	4313      	orrs	r3, r2
 8005f88:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005f8a:	4b1f      	ldr	r3, [pc, #124]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8e:	4a1e      	ldr	r2, [pc, #120]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f90:	f043 0310 	orr.w	r3, r3, #16
 8005f94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d106      	bne.n	8005faa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005f9c:	4b1a      	ldr	r3, [pc, #104]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa0:	4a19      	ldr	r2, [pc, #100]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fa2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fa6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fa8:	e00f      	b.n	8005fca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d106      	bne.n	8005fbe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005fb0:	4b15      	ldr	r3, [pc, #84]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	4a14      	ldr	r2, [pc, #80]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005fbc:	e005      	b.n	8005fca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005fbe:	4b12      	ldr	r3, [pc, #72]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	4a11      	ldr	r2, [pc, #68]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fc4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005fc8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005fca:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fd6:	f7fb f967 	bl	80012a8 <HAL_GetTick>
 8005fda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005fdc:	e008      	b.n	8005ff0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005fde:	f7fb f963 	bl	80012a8 <HAL_GetTick>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	1ad3      	subs	r3, r2, r3
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d901      	bls.n	8005ff0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e006      	b.n	8005ffe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005ff0:	4b05      	ldr	r3, [pc, #20]	; (8006008 <RCCEx_PLL2_Config+0x15c>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d0f0      	beq.n	8005fde <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	58024400 	.word	0x58024400
 800600c:	ffff0007 	.word	0xffff0007

08006010 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800601a:	2300      	movs	r3, #0
 800601c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800601e:	4b53      	ldr	r3, [pc, #332]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006022:	f003 0303 	and.w	r3, r3, #3
 8006026:	2b03      	cmp	r3, #3
 8006028:	d101      	bne.n	800602e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800602a:	2301      	movs	r3, #1
 800602c:	e099      	b.n	8006162 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800602e:	4b4f      	ldr	r3, [pc, #316]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4e      	ldr	r2, [pc, #312]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006034:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006038:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800603a:	f7fb f935 	bl	80012a8 <HAL_GetTick>
 800603e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006040:	e008      	b.n	8006054 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006042:	f7fb f931 	bl	80012a8 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e086      	b.n	8006162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006054:	4b45      	ldr	r3, [pc, #276]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1f0      	bne.n	8006042 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006060:	4b42      	ldr	r3, [pc, #264]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006064:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	051b      	lsls	r3, r3, #20
 800606e:	493f      	ldr	r1, [pc, #252]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006070:	4313      	orrs	r3, r2
 8006072:	628b      	str	r3, [r1, #40]	; 0x28
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	3b01      	subs	r3, #1
 800607a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	3b01      	subs	r3, #1
 8006084:	025b      	lsls	r3, r3, #9
 8006086:	b29b      	uxth	r3, r3
 8006088:	431a      	orrs	r2, r3
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	3b01      	subs	r3, #1
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006096:	431a      	orrs	r2, r3
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	3b01      	subs	r3, #1
 800609e:	061b      	lsls	r3, r3, #24
 80060a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060a4:	4931      	ldr	r1, [pc, #196]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060a6:	4313      	orrs	r3, r2
 80060a8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80060aa:	4b30      	ldr	r3, [pc, #192]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	695b      	ldr	r3, [r3, #20]
 80060b6:	492d      	ldr	r1, [pc, #180]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80060bc:	4b2b      	ldr	r3, [pc, #172]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	4928      	ldr	r1, [pc, #160]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80060ce:	4b27      	ldr	r3, [pc, #156]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	4a26      	ldr	r2, [pc, #152]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060d8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80060da:	4b24      	ldr	r3, [pc, #144]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <RCCEx_PLL3_Config+0x160>)
 80060e0:	4013      	ands	r3, r2
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	69d2      	ldr	r2, [r2, #28]
 80060e6:	00d2      	lsls	r2, r2, #3
 80060e8:	4920      	ldr	r1, [pc, #128]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060ea:	4313      	orrs	r3, r2
 80060ec:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80060ee:	4b1f      	ldr	r3, [pc, #124]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f2:	4a1e      	ldr	r2, [pc, #120]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 80060f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d106      	bne.n	800610e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006100:	4b1a      	ldr	r3, [pc, #104]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	4a19      	ldr	r2, [pc, #100]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006106:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800610a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800610c:	e00f      	b.n	800612e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d106      	bne.n	8006122 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006114:	4b15      	ldr	r3, [pc, #84]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	4a14      	ldr	r2, [pc, #80]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 800611a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800611e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006120:	e005      	b.n	800612e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006122:	4b12      	ldr	r3, [pc, #72]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	4a11      	ldr	r2, [pc, #68]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006128:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800612c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	4a0e      	ldr	r2, [pc, #56]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006134:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006138:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800613a:	f7fb f8b5 	bl	80012a8 <HAL_GetTick>
 800613e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006140:	e008      	b.n	8006154 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006142:	f7fb f8b1 	bl	80012a8 <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	2b02      	cmp	r3, #2
 800614e:	d901      	bls.n	8006154 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e006      	b.n	8006162 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <RCCEx_PLL3_Config+0x15c>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d0f0      	beq.n	8006142 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400
 8006170:	ffff0007 	.word	0xffff0007

08006174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e042      	b.n	800620c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fa ff63 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2224      	movs	r2, #36	; 0x24
 80061a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 f8ba 	bl	8006330 <UART_SetConfig>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e022      	b.n	800620c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d002      	beq.n	80061d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 ff1a 	bl	8007008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 ffa1 	bl	800714c <UART_CheckIdleState>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	; 0x28
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622a:	2b20      	cmp	r3, #32
 800622c:	d17b      	bne.n	8006326 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <HAL_UART_Transmit+0x26>
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e074      	b.n	8006328 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2221      	movs	r2, #33	; 0x21
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800624e:	f7fb f82b 	bl	80012a8 <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	88fa      	ldrh	r2, [r7, #6]
 8006260:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800626c:	d108      	bne.n	8006280 <HAL_UART_Transmit+0x6c>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e003      	b.n	8006288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006288:	e030      	b.n	80062ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2200      	movs	r2, #0
 8006292:	2180      	movs	r1, #128	; 0x80
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f001 f803 	bl	80072a0 <UART_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e03d      	b.n	8006328 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	3302      	adds	r3, #2
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	e007      	b.n	80062da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	3301      	adds	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1c8      	bne.n	800628a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	2140      	movs	r1, #64	; 0x40
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 ffcc 	bl	80072a0 <UART_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e006      	b.n	8006328 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	e000      	b.n	8006328 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006330:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006334:	b092      	sub	sp, #72	; 0x48
 8006336:	af00      	add	r7, sp, #0
 8006338:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800633a:	2300      	movs	r3, #0
 800633c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	691b      	ldr	r3, [r3, #16]
 8006348:	431a      	orrs	r2, r3
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	431a      	orrs	r2, r3
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	4313      	orrs	r3, r2
 8006356:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	4bbe      	ldr	r3, [pc, #760]	; (8006658 <UART_SetConfig+0x328>)
 8006360:	4013      	ands	r3, r2
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	6812      	ldr	r2, [r2, #0]
 8006366:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006368:	430b      	orrs	r3, r1
 800636a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	68da      	ldr	r2, [r3, #12]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	430a      	orrs	r2, r1
 8006380:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4ab3      	ldr	r2, [pc, #716]	; (800665c <UART_SetConfig+0x32c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d004      	beq.n	800639c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006398:	4313      	orrs	r3, r2
 800639a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	4baf      	ldr	r3, [pc, #700]	; (8006660 <UART_SetConfig+0x330>)
 80063a4:	4013      	ands	r3, r2
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063ac:	430b      	orrs	r3, r1
 80063ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	f023 010f 	bic.w	r1, r3, #15
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	430a      	orrs	r2, r1
 80063c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4aa6      	ldr	r2, [pc, #664]	; (8006664 <UART_SetConfig+0x334>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d177      	bne.n	80064c0 <UART_SetConfig+0x190>
 80063d0:	4ba5      	ldr	r3, [pc, #660]	; (8006668 <UART_SetConfig+0x338>)
 80063d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80063d8:	2b28      	cmp	r3, #40	; 0x28
 80063da:	d86d      	bhi.n	80064b8 <UART_SetConfig+0x188>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <UART_SetConfig+0xb4>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	08006489 	.word	0x08006489
 80063e8:	080064b9 	.word	0x080064b9
 80063ec:	080064b9 	.word	0x080064b9
 80063f0:	080064b9 	.word	0x080064b9
 80063f4:	080064b9 	.word	0x080064b9
 80063f8:	080064b9 	.word	0x080064b9
 80063fc:	080064b9 	.word	0x080064b9
 8006400:	080064b9 	.word	0x080064b9
 8006404:	08006491 	.word	0x08006491
 8006408:	080064b9 	.word	0x080064b9
 800640c:	080064b9 	.word	0x080064b9
 8006410:	080064b9 	.word	0x080064b9
 8006414:	080064b9 	.word	0x080064b9
 8006418:	080064b9 	.word	0x080064b9
 800641c:	080064b9 	.word	0x080064b9
 8006420:	080064b9 	.word	0x080064b9
 8006424:	08006499 	.word	0x08006499
 8006428:	080064b9 	.word	0x080064b9
 800642c:	080064b9 	.word	0x080064b9
 8006430:	080064b9 	.word	0x080064b9
 8006434:	080064b9 	.word	0x080064b9
 8006438:	080064b9 	.word	0x080064b9
 800643c:	080064b9 	.word	0x080064b9
 8006440:	080064b9 	.word	0x080064b9
 8006444:	080064a1 	.word	0x080064a1
 8006448:	080064b9 	.word	0x080064b9
 800644c:	080064b9 	.word	0x080064b9
 8006450:	080064b9 	.word	0x080064b9
 8006454:	080064b9 	.word	0x080064b9
 8006458:	080064b9 	.word	0x080064b9
 800645c:	080064b9 	.word	0x080064b9
 8006460:	080064b9 	.word	0x080064b9
 8006464:	080064a9 	.word	0x080064a9
 8006468:	080064b9 	.word	0x080064b9
 800646c:	080064b9 	.word	0x080064b9
 8006470:	080064b9 	.word	0x080064b9
 8006474:	080064b9 	.word	0x080064b9
 8006478:	080064b9 	.word	0x080064b9
 800647c:	080064b9 	.word	0x080064b9
 8006480:	080064b9 	.word	0x080064b9
 8006484:	080064b1 	.word	0x080064b1
 8006488:	2301      	movs	r3, #1
 800648a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800648e:	e326      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006490:	2304      	movs	r3, #4
 8006492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006496:	e322      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006498:	2308      	movs	r3, #8
 800649a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800649e:	e31e      	b.n	8006ade <UART_SetConfig+0x7ae>
 80064a0:	2310      	movs	r3, #16
 80064a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064a6:	e31a      	b.n	8006ade <UART_SetConfig+0x7ae>
 80064a8:	2320      	movs	r3, #32
 80064aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064ae:	e316      	b.n	8006ade <UART_SetConfig+0x7ae>
 80064b0:	2340      	movs	r3, #64	; 0x40
 80064b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064b6:	e312      	b.n	8006ade <UART_SetConfig+0x7ae>
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064be:	e30e      	b.n	8006ade <UART_SetConfig+0x7ae>
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a69      	ldr	r2, [pc, #420]	; (800666c <UART_SetConfig+0x33c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d130      	bne.n	800652c <UART_SetConfig+0x1fc>
 80064ca:	4b67      	ldr	r3, [pc, #412]	; (8006668 <UART_SetConfig+0x338>)
 80064cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	2b05      	cmp	r3, #5
 80064d4:	d826      	bhi.n	8006524 <UART_SetConfig+0x1f4>
 80064d6:	a201      	add	r2, pc, #4	; (adr r2, 80064dc <UART_SetConfig+0x1ac>)
 80064d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064dc:	080064f5 	.word	0x080064f5
 80064e0:	080064fd 	.word	0x080064fd
 80064e4:	08006505 	.word	0x08006505
 80064e8:	0800650d 	.word	0x0800650d
 80064ec:	08006515 	.word	0x08006515
 80064f0:	0800651d 	.word	0x0800651d
 80064f4:	2300      	movs	r3, #0
 80064f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80064fa:	e2f0      	b.n	8006ade <UART_SetConfig+0x7ae>
 80064fc:	2304      	movs	r3, #4
 80064fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006502:	e2ec      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006504:	2308      	movs	r3, #8
 8006506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800650a:	e2e8      	b.n	8006ade <UART_SetConfig+0x7ae>
 800650c:	2310      	movs	r3, #16
 800650e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006512:	e2e4      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006514:	2320      	movs	r3, #32
 8006516:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800651a:	e2e0      	b.n	8006ade <UART_SetConfig+0x7ae>
 800651c:	2340      	movs	r3, #64	; 0x40
 800651e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006522:	e2dc      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006524:	2380      	movs	r3, #128	; 0x80
 8006526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800652a:	e2d8      	b.n	8006ade <UART_SetConfig+0x7ae>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a4f      	ldr	r2, [pc, #316]	; (8006670 <UART_SetConfig+0x340>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d130      	bne.n	8006598 <UART_SetConfig+0x268>
 8006536:	4b4c      	ldr	r3, [pc, #304]	; (8006668 <UART_SetConfig+0x338>)
 8006538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800653a:	f003 0307 	and.w	r3, r3, #7
 800653e:	2b05      	cmp	r3, #5
 8006540:	d826      	bhi.n	8006590 <UART_SetConfig+0x260>
 8006542:	a201      	add	r2, pc, #4	; (adr r2, 8006548 <UART_SetConfig+0x218>)
 8006544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006548:	08006561 	.word	0x08006561
 800654c:	08006569 	.word	0x08006569
 8006550:	08006571 	.word	0x08006571
 8006554:	08006579 	.word	0x08006579
 8006558:	08006581 	.word	0x08006581
 800655c:	08006589 	.word	0x08006589
 8006560:	2300      	movs	r3, #0
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e2ba      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006568:	2304      	movs	r3, #4
 800656a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800656e:	e2b6      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006570:	2308      	movs	r3, #8
 8006572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006576:	e2b2      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006578:	2310      	movs	r3, #16
 800657a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800657e:	e2ae      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006580:	2320      	movs	r3, #32
 8006582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006586:	e2aa      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006588:	2340      	movs	r3, #64	; 0x40
 800658a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800658e:	e2a6      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006590:	2380      	movs	r3, #128	; 0x80
 8006592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006596:	e2a2      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a35      	ldr	r2, [pc, #212]	; (8006674 <UART_SetConfig+0x344>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d130      	bne.n	8006604 <UART_SetConfig+0x2d4>
 80065a2:	4b31      	ldr	r3, [pc, #196]	; (8006668 <UART_SetConfig+0x338>)
 80065a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a6:	f003 0307 	and.w	r3, r3, #7
 80065aa:	2b05      	cmp	r3, #5
 80065ac:	d826      	bhi.n	80065fc <UART_SetConfig+0x2cc>
 80065ae:	a201      	add	r2, pc, #4	; (adr r2, 80065b4 <UART_SetConfig+0x284>)
 80065b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b4:	080065cd 	.word	0x080065cd
 80065b8:	080065d5 	.word	0x080065d5
 80065bc:	080065dd 	.word	0x080065dd
 80065c0:	080065e5 	.word	0x080065e5
 80065c4:	080065ed 	.word	0x080065ed
 80065c8:	080065f5 	.word	0x080065f5
 80065cc:	2300      	movs	r3, #0
 80065ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065d2:	e284      	b.n	8006ade <UART_SetConfig+0x7ae>
 80065d4:	2304      	movs	r3, #4
 80065d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065da:	e280      	b.n	8006ade <UART_SetConfig+0x7ae>
 80065dc:	2308      	movs	r3, #8
 80065de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065e2:	e27c      	b.n	8006ade <UART_SetConfig+0x7ae>
 80065e4:	2310      	movs	r3, #16
 80065e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065ea:	e278      	b.n	8006ade <UART_SetConfig+0x7ae>
 80065ec:	2320      	movs	r3, #32
 80065ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065f2:	e274      	b.n	8006ade <UART_SetConfig+0x7ae>
 80065f4:	2340      	movs	r3, #64	; 0x40
 80065f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80065fa:	e270      	b.n	8006ade <UART_SetConfig+0x7ae>
 80065fc:	2380      	movs	r3, #128	; 0x80
 80065fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006602:	e26c      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <UART_SetConfig+0x348>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d142      	bne.n	8006694 <UART_SetConfig+0x364>
 800660e:	4b16      	ldr	r3, [pc, #88]	; (8006668 <UART_SetConfig+0x338>)
 8006610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	2b05      	cmp	r3, #5
 8006618:	d838      	bhi.n	800668c <UART_SetConfig+0x35c>
 800661a:	a201      	add	r2, pc, #4	; (adr r2, 8006620 <UART_SetConfig+0x2f0>)
 800661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006620:	08006639 	.word	0x08006639
 8006624:	08006641 	.word	0x08006641
 8006628:	08006649 	.word	0x08006649
 800662c:	08006651 	.word	0x08006651
 8006630:	0800667d 	.word	0x0800667d
 8006634:	08006685 	.word	0x08006685
 8006638:	2300      	movs	r3, #0
 800663a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800663e:	e24e      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006640:	2304      	movs	r3, #4
 8006642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006646:	e24a      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006648:	2308      	movs	r3, #8
 800664a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664e:	e246      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006650:	2310      	movs	r3, #16
 8006652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006656:	e242      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006658:	cfff69f3 	.word	0xcfff69f3
 800665c:	58000c00 	.word	0x58000c00
 8006660:	11fff4ff 	.word	0x11fff4ff
 8006664:	40011000 	.word	0x40011000
 8006668:	58024400 	.word	0x58024400
 800666c:	40004400 	.word	0x40004400
 8006670:	40004800 	.word	0x40004800
 8006674:	40004c00 	.word	0x40004c00
 8006678:	40005000 	.word	0x40005000
 800667c:	2320      	movs	r3, #32
 800667e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006682:	e22c      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800668a:	e228      	b.n	8006ade <UART_SetConfig+0x7ae>
 800668c:	2380      	movs	r3, #128	; 0x80
 800668e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006692:	e224      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4ab1      	ldr	r2, [pc, #708]	; (8006960 <UART_SetConfig+0x630>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d176      	bne.n	800678c <UART_SetConfig+0x45c>
 800669e:	4bb1      	ldr	r3, [pc, #708]	; (8006964 <UART_SetConfig+0x634>)
 80066a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066a6:	2b28      	cmp	r3, #40	; 0x28
 80066a8:	d86c      	bhi.n	8006784 <UART_SetConfig+0x454>
 80066aa:	a201      	add	r2, pc, #4	; (adr r2, 80066b0 <UART_SetConfig+0x380>)
 80066ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b0:	08006755 	.word	0x08006755
 80066b4:	08006785 	.word	0x08006785
 80066b8:	08006785 	.word	0x08006785
 80066bc:	08006785 	.word	0x08006785
 80066c0:	08006785 	.word	0x08006785
 80066c4:	08006785 	.word	0x08006785
 80066c8:	08006785 	.word	0x08006785
 80066cc:	08006785 	.word	0x08006785
 80066d0:	0800675d 	.word	0x0800675d
 80066d4:	08006785 	.word	0x08006785
 80066d8:	08006785 	.word	0x08006785
 80066dc:	08006785 	.word	0x08006785
 80066e0:	08006785 	.word	0x08006785
 80066e4:	08006785 	.word	0x08006785
 80066e8:	08006785 	.word	0x08006785
 80066ec:	08006785 	.word	0x08006785
 80066f0:	08006765 	.word	0x08006765
 80066f4:	08006785 	.word	0x08006785
 80066f8:	08006785 	.word	0x08006785
 80066fc:	08006785 	.word	0x08006785
 8006700:	08006785 	.word	0x08006785
 8006704:	08006785 	.word	0x08006785
 8006708:	08006785 	.word	0x08006785
 800670c:	08006785 	.word	0x08006785
 8006710:	0800676d 	.word	0x0800676d
 8006714:	08006785 	.word	0x08006785
 8006718:	08006785 	.word	0x08006785
 800671c:	08006785 	.word	0x08006785
 8006720:	08006785 	.word	0x08006785
 8006724:	08006785 	.word	0x08006785
 8006728:	08006785 	.word	0x08006785
 800672c:	08006785 	.word	0x08006785
 8006730:	08006775 	.word	0x08006775
 8006734:	08006785 	.word	0x08006785
 8006738:	08006785 	.word	0x08006785
 800673c:	08006785 	.word	0x08006785
 8006740:	08006785 	.word	0x08006785
 8006744:	08006785 	.word	0x08006785
 8006748:	08006785 	.word	0x08006785
 800674c:	08006785 	.word	0x08006785
 8006750:	0800677d 	.word	0x0800677d
 8006754:	2301      	movs	r3, #1
 8006756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800675a:	e1c0      	b.n	8006ade <UART_SetConfig+0x7ae>
 800675c:	2304      	movs	r3, #4
 800675e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006762:	e1bc      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006764:	2308      	movs	r3, #8
 8006766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800676a:	e1b8      	b.n	8006ade <UART_SetConfig+0x7ae>
 800676c:	2310      	movs	r3, #16
 800676e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006772:	e1b4      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006774:	2320      	movs	r3, #32
 8006776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800677a:	e1b0      	b.n	8006ade <UART_SetConfig+0x7ae>
 800677c:	2340      	movs	r3, #64	; 0x40
 800677e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006782:	e1ac      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006784:	2380      	movs	r3, #128	; 0x80
 8006786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678a:	e1a8      	b.n	8006ade <UART_SetConfig+0x7ae>
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a75      	ldr	r2, [pc, #468]	; (8006968 <UART_SetConfig+0x638>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d130      	bne.n	80067f8 <UART_SetConfig+0x4c8>
 8006796:	4b73      	ldr	r3, [pc, #460]	; (8006964 <UART_SetConfig+0x634>)
 8006798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b05      	cmp	r3, #5
 80067a0:	d826      	bhi.n	80067f0 <UART_SetConfig+0x4c0>
 80067a2:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <UART_SetConfig+0x478>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	080067c1 	.word	0x080067c1
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	080067d1 	.word	0x080067d1
 80067b4:	080067d9 	.word	0x080067d9
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080067e9 	.word	0x080067e9
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067c6:	e18a      	b.n	8006ade <UART_SetConfig+0x7ae>
 80067c8:	2304      	movs	r3, #4
 80067ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ce:	e186      	b.n	8006ade <UART_SetConfig+0x7ae>
 80067d0:	2308      	movs	r3, #8
 80067d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067d6:	e182      	b.n	8006ade <UART_SetConfig+0x7ae>
 80067d8:	2310      	movs	r3, #16
 80067da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067de:	e17e      	b.n	8006ade <UART_SetConfig+0x7ae>
 80067e0:	2320      	movs	r3, #32
 80067e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067e6:	e17a      	b.n	8006ade <UART_SetConfig+0x7ae>
 80067e8:	2340      	movs	r3, #64	; 0x40
 80067ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ee:	e176      	b.n	8006ade <UART_SetConfig+0x7ae>
 80067f0:	2380      	movs	r3, #128	; 0x80
 80067f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067f6:	e172      	b.n	8006ade <UART_SetConfig+0x7ae>
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a5b      	ldr	r2, [pc, #364]	; (800696c <UART_SetConfig+0x63c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d130      	bne.n	8006864 <UART_SetConfig+0x534>
 8006802:	4b58      	ldr	r3, [pc, #352]	; (8006964 <UART_SetConfig+0x634>)
 8006804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	2b05      	cmp	r3, #5
 800680c:	d826      	bhi.n	800685c <UART_SetConfig+0x52c>
 800680e:	a201      	add	r2, pc, #4	; (adr r2, 8006814 <UART_SetConfig+0x4e4>)
 8006810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006814:	0800682d 	.word	0x0800682d
 8006818:	08006835 	.word	0x08006835
 800681c:	0800683d 	.word	0x0800683d
 8006820:	08006845 	.word	0x08006845
 8006824:	0800684d 	.word	0x0800684d
 8006828:	08006855 	.word	0x08006855
 800682c:	2300      	movs	r3, #0
 800682e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006832:	e154      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006834:	2304      	movs	r3, #4
 8006836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683a:	e150      	b.n	8006ade <UART_SetConfig+0x7ae>
 800683c:	2308      	movs	r3, #8
 800683e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006842:	e14c      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006844:	2310      	movs	r3, #16
 8006846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684a:	e148      	b.n	8006ade <UART_SetConfig+0x7ae>
 800684c:	2320      	movs	r3, #32
 800684e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006852:	e144      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006854:	2340      	movs	r3, #64	; 0x40
 8006856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800685a:	e140      	b.n	8006ade <UART_SetConfig+0x7ae>
 800685c:	2380      	movs	r3, #128	; 0x80
 800685e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006862:	e13c      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a41      	ldr	r2, [pc, #260]	; (8006970 <UART_SetConfig+0x640>)
 800686a:	4293      	cmp	r3, r2
 800686c:	f040 8082 	bne.w	8006974 <UART_SetConfig+0x644>
 8006870:	4b3c      	ldr	r3, [pc, #240]	; (8006964 <UART_SetConfig+0x634>)
 8006872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006874:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006878:	2b28      	cmp	r3, #40	; 0x28
 800687a:	d86d      	bhi.n	8006958 <UART_SetConfig+0x628>
 800687c:	a201      	add	r2, pc, #4	; (adr r2, 8006884 <UART_SetConfig+0x554>)
 800687e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006882:	bf00      	nop
 8006884:	08006929 	.word	0x08006929
 8006888:	08006959 	.word	0x08006959
 800688c:	08006959 	.word	0x08006959
 8006890:	08006959 	.word	0x08006959
 8006894:	08006959 	.word	0x08006959
 8006898:	08006959 	.word	0x08006959
 800689c:	08006959 	.word	0x08006959
 80068a0:	08006959 	.word	0x08006959
 80068a4:	08006931 	.word	0x08006931
 80068a8:	08006959 	.word	0x08006959
 80068ac:	08006959 	.word	0x08006959
 80068b0:	08006959 	.word	0x08006959
 80068b4:	08006959 	.word	0x08006959
 80068b8:	08006959 	.word	0x08006959
 80068bc:	08006959 	.word	0x08006959
 80068c0:	08006959 	.word	0x08006959
 80068c4:	08006939 	.word	0x08006939
 80068c8:	08006959 	.word	0x08006959
 80068cc:	08006959 	.word	0x08006959
 80068d0:	08006959 	.word	0x08006959
 80068d4:	08006959 	.word	0x08006959
 80068d8:	08006959 	.word	0x08006959
 80068dc:	08006959 	.word	0x08006959
 80068e0:	08006959 	.word	0x08006959
 80068e4:	08006941 	.word	0x08006941
 80068e8:	08006959 	.word	0x08006959
 80068ec:	08006959 	.word	0x08006959
 80068f0:	08006959 	.word	0x08006959
 80068f4:	08006959 	.word	0x08006959
 80068f8:	08006959 	.word	0x08006959
 80068fc:	08006959 	.word	0x08006959
 8006900:	08006959 	.word	0x08006959
 8006904:	08006949 	.word	0x08006949
 8006908:	08006959 	.word	0x08006959
 800690c:	08006959 	.word	0x08006959
 8006910:	08006959 	.word	0x08006959
 8006914:	08006959 	.word	0x08006959
 8006918:	08006959 	.word	0x08006959
 800691c:	08006959 	.word	0x08006959
 8006920:	08006959 	.word	0x08006959
 8006924:	08006951 	.word	0x08006951
 8006928:	2301      	movs	r3, #1
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e0d6      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006930:	2304      	movs	r3, #4
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006936:	e0d2      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006938:	2308      	movs	r3, #8
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693e:	e0ce      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006940:	2310      	movs	r3, #16
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006946:	e0ca      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006948:	2320      	movs	r3, #32
 800694a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800694e:	e0c6      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006950:	2340      	movs	r3, #64	; 0x40
 8006952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006956:	e0c2      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006958:	2380      	movs	r3, #128	; 0x80
 800695a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800695e:	e0be      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006960:	40011400 	.word	0x40011400
 8006964:	58024400 	.word	0x58024400
 8006968:	40007800 	.word	0x40007800
 800696c:	40007c00 	.word	0x40007c00
 8006970:	40011800 	.word	0x40011800
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4aad      	ldr	r2, [pc, #692]	; (8006c30 <UART_SetConfig+0x900>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d176      	bne.n	8006a6c <UART_SetConfig+0x73c>
 800697e:	4bad      	ldr	r3, [pc, #692]	; (8006c34 <UART_SetConfig+0x904>)
 8006980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006986:	2b28      	cmp	r3, #40	; 0x28
 8006988:	d86c      	bhi.n	8006a64 <UART_SetConfig+0x734>
 800698a:	a201      	add	r2, pc, #4	; (adr r2, 8006990 <UART_SetConfig+0x660>)
 800698c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006990:	08006a35 	.word	0x08006a35
 8006994:	08006a65 	.word	0x08006a65
 8006998:	08006a65 	.word	0x08006a65
 800699c:	08006a65 	.word	0x08006a65
 80069a0:	08006a65 	.word	0x08006a65
 80069a4:	08006a65 	.word	0x08006a65
 80069a8:	08006a65 	.word	0x08006a65
 80069ac:	08006a65 	.word	0x08006a65
 80069b0:	08006a3d 	.word	0x08006a3d
 80069b4:	08006a65 	.word	0x08006a65
 80069b8:	08006a65 	.word	0x08006a65
 80069bc:	08006a65 	.word	0x08006a65
 80069c0:	08006a65 	.word	0x08006a65
 80069c4:	08006a65 	.word	0x08006a65
 80069c8:	08006a65 	.word	0x08006a65
 80069cc:	08006a65 	.word	0x08006a65
 80069d0:	08006a45 	.word	0x08006a45
 80069d4:	08006a65 	.word	0x08006a65
 80069d8:	08006a65 	.word	0x08006a65
 80069dc:	08006a65 	.word	0x08006a65
 80069e0:	08006a65 	.word	0x08006a65
 80069e4:	08006a65 	.word	0x08006a65
 80069e8:	08006a65 	.word	0x08006a65
 80069ec:	08006a65 	.word	0x08006a65
 80069f0:	08006a4d 	.word	0x08006a4d
 80069f4:	08006a65 	.word	0x08006a65
 80069f8:	08006a65 	.word	0x08006a65
 80069fc:	08006a65 	.word	0x08006a65
 8006a00:	08006a65 	.word	0x08006a65
 8006a04:	08006a65 	.word	0x08006a65
 8006a08:	08006a65 	.word	0x08006a65
 8006a0c:	08006a65 	.word	0x08006a65
 8006a10:	08006a55 	.word	0x08006a55
 8006a14:	08006a65 	.word	0x08006a65
 8006a18:	08006a65 	.word	0x08006a65
 8006a1c:	08006a65 	.word	0x08006a65
 8006a20:	08006a65 	.word	0x08006a65
 8006a24:	08006a65 	.word	0x08006a65
 8006a28:	08006a65 	.word	0x08006a65
 8006a2c:	08006a65 	.word	0x08006a65
 8006a30:	08006a5d 	.word	0x08006a5d
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a3a:	e050      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006a3c:	2304      	movs	r3, #4
 8006a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a42:	e04c      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006a44:	2308      	movs	r3, #8
 8006a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a4a:	e048      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006a4c:	2310      	movs	r3, #16
 8006a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a52:	e044      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006a54:	2320      	movs	r3, #32
 8006a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a5a:	e040      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006a5c:	2340      	movs	r3, #64	; 0x40
 8006a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a62:	e03c      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006a64:	2380      	movs	r3, #128	; 0x80
 8006a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a6a:	e038      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a71      	ldr	r2, [pc, #452]	; (8006c38 <UART_SetConfig+0x908>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d130      	bne.n	8006ad8 <UART_SetConfig+0x7a8>
 8006a76:	4b6f      	ldr	r3, [pc, #444]	; (8006c34 <UART_SetConfig+0x904>)
 8006a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7a:	f003 0307 	and.w	r3, r3, #7
 8006a7e:	2b05      	cmp	r3, #5
 8006a80:	d826      	bhi.n	8006ad0 <UART_SetConfig+0x7a0>
 8006a82:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <UART_SetConfig+0x758>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006aa1 	.word	0x08006aa1
 8006a8c:	08006aa9 	.word	0x08006aa9
 8006a90:	08006ab1 	.word	0x08006ab1
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ac1 	.word	0x08006ac1
 8006a9c:	08006ac9 	.word	0x08006ac9
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aa6:	e01a      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006aa8:	2304      	movs	r3, #4
 8006aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aae:	e016      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006ab0:	2308      	movs	r3, #8
 8006ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ab6:	e012      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006ab8:	2310      	movs	r3, #16
 8006aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006abe:	e00e      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006ac0:	2320      	movs	r3, #32
 8006ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ac6:	e00a      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006ac8:	2340      	movs	r3, #64	; 0x40
 8006aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ace:	e006      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006ad0:	2380      	movs	r3, #128	; 0x80
 8006ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ad6:	e002      	b.n	8006ade <UART_SetConfig+0x7ae>
 8006ad8:	2380      	movs	r3, #128	; 0x80
 8006ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a55      	ldr	r2, [pc, #340]	; (8006c38 <UART_SetConfig+0x908>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	f040 80f8 	bne.w	8006cda <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006aea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	dc46      	bgt.n	8006b80 <UART_SetConfig+0x850>
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	db75      	blt.n	8006be2 <UART_SetConfig+0x8b2>
 8006af6:	3b02      	subs	r3, #2
 8006af8:	2b1e      	cmp	r3, #30
 8006afa:	d872      	bhi.n	8006be2 <UART_SetConfig+0x8b2>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <UART_SetConfig+0x7d4>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b87 	.word	0x08006b87
 8006b08:	08006be3 	.word	0x08006be3
 8006b0c:	08006b8f 	.word	0x08006b8f
 8006b10:	08006be3 	.word	0x08006be3
 8006b14:	08006be3 	.word	0x08006be3
 8006b18:	08006be3 	.word	0x08006be3
 8006b1c:	08006b9f 	.word	0x08006b9f
 8006b20:	08006be3 	.word	0x08006be3
 8006b24:	08006be3 	.word	0x08006be3
 8006b28:	08006be3 	.word	0x08006be3
 8006b2c:	08006be3 	.word	0x08006be3
 8006b30:	08006be3 	.word	0x08006be3
 8006b34:	08006be3 	.word	0x08006be3
 8006b38:	08006be3 	.word	0x08006be3
 8006b3c:	08006baf 	.word	0x08006baf
 8006b40:	08006be3 	.word	0x08006be3
 8006b44:	08006be3 	.word	0x08006be3
 8006b48:	08006be3 	.word	0x08006be3
 8006b4c:	08006be3 	.word	0x08006be3
 8006b50:	08006be3 	.word	0x08006be3
 8006b54:	08006be3 	.word	0x08006be3
 8006b58:	08006be3 	.word	0x08006be3
 8006b5c:	08006be3 	.word	0x08006be3
 8006b60:	08006be3 	.word	0x08006be3
 8006b64:	08006be3 	.word	0x08006be3
 8006b68:	08006be3 	.word	0x08006be3
 8006b6c:	08006be3 	.word	0x08006be3
 8006b70:	08006be3 	.word	0x08006be3
 8006b74:	08006be3 	.word	0x08006be3
 8006b78:	08006be3 	.word	0x08006be3
 8006b7c:	08006bd5 	.word	0x08006bd5
 8006b80:	2b40      	cmp	r3, #64	; 0x40
 8006b82:	d02a      	beq.n	8006bda <UART_SetConfig+0x8aa>
 8006b84:	e02d      	b.n	8006be2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006b86:	f7fe fd81 	bl	800568c <HAL_RCCEx_GetD3PCLK1Freq>
 8006b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b8c:	e02f      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fd90 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b9c:	e027      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b9e:	f107 0318 	add.w	r3, r7, #24
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7fe fedc 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bac:	e01f      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bae:	4b21      	ldr	r3, [pc, #132]	; (8006c34 <UART_SetConfig+0x904>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0320 	and.w	r3, r3, #32
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d009      	beq.n	8006bce <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006bba:	4b1e      	ldr	r3, [pc, #120]	; (8006c34 <UART_SetConfig+0x904>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	08db      	lsrs	r3, r3, #3
 8006bc0:	f003 0303 	and.w	r3, r3, #3
 8006bc4:	4a1d      	ldr	r2, [pc, #116]	; (8006c3c <UART_SetConfig+0x90c>)
 8006bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006bcc:	e00f      	b.n	8006bee <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006bce:	4b1b      	ldr	r3, [pc, #108]	; (8006c3c <UART_SetConfig+0x90c>)
 8006bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd2:	e00c      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006bd4:	4b1a      	ldr	r3, [pc, #104]	; (8006c40 <UART_SetConfig+0x910>)
 8006bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006bd8:	e009      	b.n	8006bee <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006be0:	e005      	b.n	8006bee <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006be2:	2300      	movs	r3, #0
 8006be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006bec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	f000 81ee 	beq.w	8006fd2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfa:	4a12      	ldr	r2, [pc, #72]	; (8006c44 <UART_SetConfig+0x914>)
 8006bfc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c00:	461a      	mov	r2, r3
 8006c02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c04:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c08:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	4413      	add	r3, r2
 8006c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d305      	bcc.n	8006c26 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d910      	bls.n	8006c48 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006c2c:	e1d1      	b.n	8006fd2 <UART_SetConfig+0xca2>
 8006c2e:	bf00      	nop
 8006c30:	40011c00 	.word	0x40011c00
 8006c34:	58024400 	.word	0x58024400
 8006c38:	58000c00 	.word	0x58000c00
 8006c3c:	03d09000 	.word	0x03d09000
 8006c40:	003d0900 	.word	0x003d0900
 8006c44:	08008704 	.word	0x08008704
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	60bb      	str	r3, [r7, #8]
 8006c4e:	60fa      	str	r2, [r7, #12]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c54:	4ac0      	ldr	r2, [pc, #768]	; (8006f58 <UART_SetConfig+0xc28>)
 8006c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	603b      	str	r3, [r7, #0]
 8006c60:	607a      	str	r2, [r7, #4]
 8006c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006c6a:	f7f9 fb91 	bl	8000390 <__aeabi_uldivmod>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	f04f 0300 	mov.w	r3, #0
 8006c7e:	020b      	lsls	r3, r1, #8
 8006c80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006c84:	0202      	lsls	r2, r0, #8
 8006c86:	6979      	ldr	r1, [r7, #20]
 8006c88:	6849      	ldr	r1, [r1, #4]
 8006c8a:	0849      	lsrs	r1, r1, #1
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	4605      	mov	r5, r0
 8006c92:	eb12 0804 	adds.w	r8, r2, r4
 8006c96:	eb43 0905 	adc.w	r9, r3, r5
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	469a      	mov	sl, r3
 8006ca2:	4693      	mov	fp, r2
 8006ca4:	4652      	mov	r2, sl
 8006ca6:	465b      	mov	r3, fp
 8006ca8:	4640      	mov	r0, r8
 8006caa:	4649      	mov	r1, r9
 8006cac:	f7f9 fb70 	bl	8000390 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cbe:	d308      	bcc.n	8006cd2 <UART_SetConfig+0x9a2>
 8006cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cc6:	d204      	bcs.n	8006cd2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cce:	60da      	str	r2, [r3, #12]
 8006cd0:	e17f      	b.n	8006fd2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006cd8:	e17b      	b.n	8006fd2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	69db      	ldr	r3, [r3, #28]
 8006cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ce2:	f040 80bd 	bne.w	8006e60 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006ce6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	dc48      	bgt.n	8006d80 <UART_SetConfig+0xa50>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	db7b      	blt.n	8006dea <UART_SetConfig+0xaba>
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	d879      	bhi.n	8006dea <UART_SetConfig+0xaba>
 8006cf6:	a201      	add	r2, pc, #4	; (adr r2, 8006cfc <UART_SetConfig+0x9cc>)
 8006cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cfc:	08006d87 	.word	0x08006d87
 8006d00:	08006d8f 	.word	0x08006d8f
 8006d04:	08006deb 	.word	0x08006deb
 8006d08:	08006deb 	.word	0x08006deb
 8006d0c:	08006d97 	.word	0x08006d97
 8006d10:	08006deb 	.word	0x08006deb
 8006d14:	08006deb 	.word	0x08006deb
 8006d18:	08006deb 	.word	0x08006deb
 8006d1c:	08006da7 	.word	0x08006da7
 8006d20:	08006deb 	.word	0x08006deb
 8006d24:	08006deb 	.word	0x08006deb
 8006d28:	08006deb 	.word	0x08006deb
 8006d2c:	08006deb 	.word	0x08006deb
 8006d30:	08006deb 	.word	0x08006deb
 8006d34:	08006deb 	.word	0x08006deb
 8006d38:	08006deb 	.word	0x08006deb
 8006d3c:	08006db7 	.word	0x08006db7
 8006d40:	08006deb 	.word	0x08006deb
 8006d44:	08006deb 	.word	0x08006deb
 8006d48:	08006deb 	.word	0x08006deb
 8006d4c:	08006deb 	.word	0x08006deb
 8006d50:	08006deb 	.word	0x08006deb
 8006d54:	08006deb 	.word	0x08006deb
 8006d58:	08006deb 	.word	0x08006deb
 8006d5c:	08006deb 	.word	0x08006deb
 8006d60:	08006deb 	.word	0x08006deb
 8006d64:	08006deb 	.word	0x08006deb
 8006d68:	08006deb 	.word	0x08006deb
 8006d6c:	08006deb 	.word	0x08006deb
 8006d70:	08006deb 	.word	0x08006deb
 8006d74:	08006deb 	.word	0x08006deb
 8006d78:	08006deb 	.word	0x08006deb
 8006d7c:	08006ddd 	.word	0x08006ddd
 8006d80:	2b40      	cmp	r3, #64	; 0x40
 8006d82:	d02e      	beq.n	8006de2 <UART_SetConfig+0xab2>
 8006d84:	e031      	b.n	8006dea <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d86:	f7fc fdbf 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8006d8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d8c:	e033      	b.n	8006df6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d8e:	f7fc fdd1 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 8006d92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d94:	e02f      	b.n	8006df6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fc8c 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006da4:	e027      	b.n	8006df6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006da6:	f107 0318 	add.w	r3, r7, #24
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fdd8 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006db4:	e01f      	b.n	8006df6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006db6:	4b69      	ldr	r3, [pc, #420]	; (8006f5c <UART_SetConfig+0xc2c>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 0320 	and.w	r3, r3, #32
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006dc2:	4b66      	ldr	r3, [pc, #408]	; (8006f5c <UART_SetConfig+0xc2c>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	08db      	lsrs	r3, r3, #3
 8006dc8:	f003 0303 	and.w	r3, r3, #3
 8006dcc:	4a64      	ldr	r2, [pc, #400]	; (8006f60 <UART_SetConfig+0xc30>)
 8006dce:	fa22 f303 	lsr.w	r3, r2, r3
 8006dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006dd4:	e00f      	b.n	8006df6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006dd6:	4b62      	ldr	r3, [pc, #392]	; (8006f60 <UART_SetConfig+0xc30>)
 8006dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006dda:	e00c      	b.n	8006df6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006ddc:	4b61      	ldr	r3, [pc, #388]	; (8006f64 <UART_SetConfig+0xc34>)
 8006dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de0:	e009      	b.n	8006df6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006de8:	e005      	b.n	8006df6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006df4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	f000 80ea 	beq.w	8006fd2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	4a55      	ldr	r2, [pc, #340]	; (8006f58 <UART_SetConfig+0xc28>)
 8006e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e10:	005a      	lsls	r2, r3, #1
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	685b      	ldr	r3, [r3, #4]
 8006e16:	085b      	lsrs	r3, r3, #1
 8006e18:	441a      	add	r2, r3
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e26:	2b0f      	cmp	r3, #15
 8006e28:	d916      	bls.n	8006e58 <UART_SetConfig+0xb28>
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e30:	d212      	bcs.n	8006e58 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	f023 030f 	bic.w	r3, r3, #15
 8006e3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e3e:	085b      	lsrs	r3, r3, #1
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	f003 0307 	and.w	r3, r3, #7
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006e54:	60da      	str	r2, [r3, #12]
 8006e56:	e0bc      	b.n	8006fd2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e5e:	e0b8      	b.n	8006fd2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e60:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	dc4b      	bgt.n	8006f00 <UART_SetConfig+0xbd0>
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	f2c0 8087 	blt.w	8006f7c <UART_SetConfig+0xc4c>
 8006e6e:	2b20      	cmp	r3, #32
 8006e70:	f200 8084 	bhi.w	8006f7c <UART_SetConfig+0xc4c>
 8006e74:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <UART_SetConfig+0xb4c>)
 8006e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7a:	bf00      	nop
 8006e7c:	08006f07 	.word	0x08006f07
 8006e80:	08006f0f 	.word	0x08006f0f
 8006e84:	08006f7d 	.word	0x08006f7d
 8006e88:	08006f7d 	.word	0x08006f7d
 8006e8c:	08006f17 	.word	0x08006f17
 8006e90:	08006f7d 	.word	0x08006f7d
 8006e94:	08006f7d 	.word	0x08006f7d
 8006e98:	08006f7d 	.word	0x08006f7d
 8006e9c:	08006f27 	.word	0x08006f27
 8006ea0:	08006f7d 	.word	0x08006f7d
 8006ea4:	08006f7d 	.word	0x08006f7d
 8006ea8:	08006f7d 	.word	0x08006f7d
 8006eac:	08006f7d 	.word	0x08006f7d
 8006eb0:	08006f7d 	.word	0x08006f7d
 8006eb4:	08006f7d 	.word	0x08006f7d
 8006eb8:	08006f7d 	.word	0x08006f7d
 8006ebc:	08006f37 	.word	0x08006f37
 8006ec0:	08006f7d 	.word	0x08006f7d
 8006ec4:	08006f7d 	.word	0x08006f7d
 8006ec8:	08006f7d 	.word	0x08006f7d
 8006ecc:	08006f7d 	.word	0x08006f7d
 8006ed0:	08006f7d 	.word	0x08006f7d
 8006ed4:	08006f7d 	.word	0x08006f7d
 8006ed8:	08006f7d 	.word	0x08006f7d
 8006edc:	08006f7d 	.word	0x08006f7d
 8006ee0:	08006f7d 	.word	0x08006f7d
 8006ee4:	08006f7d 	.word	0x08006f7d
 8006ee8:	08006f7d 	.word	0x08006f7d
 8006eec:	08006f7d 	.word	0x08006f7d
 8006ef0:	08006f7d 	.word	0x08006f7d
 8006ef4:	08006f7d 	.word	0x08006f7d
 8006ef8:	08006f7d 	.word	0x08006f7d
 8006efc:	08006f6f 	.word	0x08006f6f
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d037      	beq.n	8006f74 <UART_SetConfig+0xc44>
 8006f04:	e03a      	b.n	8006f7c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f06:	f7fc fcff 	bl	8003908 <HAL_RCC_GetPCLK1Freq>
 8006f0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f0c:	e03c      	b.n	8006f88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f0e:	f7fc fd11 	bl	8003934 <HAL_RCC_GetPCLK2Freq>
 8006f12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f14:	e038      	b.n	8006f88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fe fbcc 	bl	80056b8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f24:	e030      	b.n	8006f88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f26:	f107 0318 	add.w	r3, r7, #24
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fe fd18 	bl	8005960 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f30:	69fb      	ldr	r3, [r7, #28]
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f34:	e028      	b.n	8006f88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f36:	4b09      	ldr	r3, [pc, #36]	; (8006f5c <UART_SetConfig+0xc2c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0320 	and.w	r3, r3, #32
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d012      	beq.n	8006f68 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f42:	4b06      	ldr	r3, [pc, #24]	; (8006f5c <UART_SetConfig+0xc2c>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	08db      	lsrs	r3, r3, #3
 8006f48:	f003 0303 	and.w	r3, r3, #3
 8006f4c:	4a04      	ldr	r2, [pc, #16]	; (8006f60 <UART_SetConfig+0xc30>)
 8006f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8006f52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f54:	e018      	b.n	8006f88 <UART_SetConfig+0xc58>
 8006f56:	bf00      	nop
 8006f58:	08008704 	.word	0x08008704
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	03d09000 	.word	0x03d09000
 8006f64:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006f68:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <UART_SetConfig+0xccc>)
 8006f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f6c:	e00c      	b.n	8006f88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f6e:	4b24      	ldr	r3, [pc, #144]	; (8007000 <UART_SetConfig+0xcd0>)
 8006f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f72:	e009      	b.n	8006f88 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f74:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f7a:	e005      	b.n	8006f88 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006f86:	bf00      	nop
    }

    if (pclk != 0U)
 8006f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d021      	beq.n	8006fd2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	4a1c      	ldr	r2, [pc, #112]	; (8007004 <UART_SetConfig+0xcd4>)
 8006f94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f9c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	441a      	add	r2, r3
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b0f      	cmp	r3, #15
 8006fb6:	d909      	bls.n	8006fcc <UART_SetConfig+0xc9c>
 8006fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fbe:	d205      	bcs.n	8006fcc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60da      	str	r2, [r3, #12]
 8006fca:	e002      	b.n	8006fd2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2200      	movs	r2, #0
 8006fec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006fee:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3748      	adds	r7, #72	; 0x48
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ffc:	03d09000 	.word	0x03d09000
 8007000:	003d0900 	.word	0x003d0900
 8007004:	08008704 	.word	0x08008704

08007008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007014:	f003 0301 	and.w	r3, r3, #1
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	430a      	orrs	r2, r1
 8007030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007036:	f003 0302 	and.w	r3, r3, #2
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00a      	beq.n	8007054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	430a      	orrs	r2, r1
 8007052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00a      	beq.n	8007076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	f003 0308 	and.w	r3, r3, #8
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00a      	beq.n	8007098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	685b      	ldr	r3, [r3, #4]
 8007088:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	430a      	orrs	r2, r1
 8007096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709c:	f003 0310 	and.w	r3, r3, #16
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d00a      	beq.n	80070ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	430a      	orrs	r2, r1
 80070b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070be:	f003 0320 	and.w	r3, r3, #32
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00a      	beq.n	80070dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	430a      	orrs	r2, r1
 80070da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d01a      	beq.n	800711e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007106:	d10a      	bne.n	800711e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007126:	2b00      	cmp	r3, #0
 8007128:	d00a      	beq.n	8007140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	430a      	orrs	r2, r1
 800713e:	605a      	str	r2, [r3, #4]
  }
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714a:	4770      	bx	lr

0800714c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b098      	sub	sp, #96	; 0x60
 8007150:	af02      	add	r7, sp, #8
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800715c:	f7fa f8a4 	bl	80012a8 <HAL_GetTick>
 8007160:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f003 0308 	and.w	r3, r3, #8
 800716c:	2b08      	cmp	r3, #8
 800716e:	d12f      	bne.n	80071d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007174:	9300      	str	r3, [sp, #0]
 8007176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007178:	2200      	movs	r2, #0
 800717a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 f88e 	bl	80072a0 <UART_WaitOnFlagUntilTimeout>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d022      	beq.n	80071d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	e853 3f00 	ldrex	r3, [r3]
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800719a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800719e:	653b      	str	r3, [r7, #80]	; 0x50
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	461a      	mov	r2, r3
 80071a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071a8:	647b      	str	r3, [r7, #68]	; 0x44
 80071aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e6      	bne.n	800718a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2220      	movs	r2, #32
 80071c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071cc:	2303      	movs	r3, #3
 80071ce:	e063      	b.n	8007298 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0304 	and.w	r3, r3, #4
 80071da:	2b04      	cmp	r3, #4
 80071dc:	d149      	bne.n	8007272 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071e2:	9300      	str	r3, [sp, #0]
 80071e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e6:	2200      	movs	r2, #0
 80071e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f857 	bl	80072a0 <UART_WaitOnFlagUntilTimeout>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d03c      	beq.n	8007272 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007200:	e853 3f00 	ldrex	r3, [r3]
 8007204:	623b      	str	r3, [r7, #32]
   return(result);
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800720c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007216:	633b      	str	r3, [r7, #48]	; 0x30
 8007218:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800721c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800721e:	e841 2300 	strex	r3, r2, [r1]
 8007222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1e6      	bne.n	80071f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	3308      	adds	r3, #8
 8007230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	e853 3f00 	ldrex	r3, [r3]
 8007238:	60fb      	str	r3, [r7, #12]
   return(result);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	f023 0301 	bic.w	r3, r3, #1
 8007240:	64bb      	str	r3, [r7, #72]	; 0x48
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3308      	adds	r3, #8
 8007248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800724a:	61fa      	str	r2, [r7, #28]
 800724c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724e:	69b9      	ldr	r1, [r7, #24]
 8007250:	69fa      	ldr	r2, [r7, #28]
 8007252:	e841 2300 	strex	r3, r2, [r1]
 8007256:	617b      	str	r3, [r7, #20]
   return(result);
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d1e5      	bne.n	800722a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2220      	movs	r2, #32
 8007262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800726e:	2303      	movs	r3, #3
 8007270:	e012      	b.n	8007298 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2220      	movs	r2, #32
 8007276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007296:	2300      	movs	r3, #0
}
 8007298:	4618      	mov	r0, r3
 800729a:	3758      	adds	r7, #88	; 0x58
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	4613      	mov	r3, r2
 80072ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072b0:	e049      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b8:	d045      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ba:	f7f9 fff5 	bl	80012a8 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d302      	bcc.n	80072d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d101      	bne.n	80072d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e048      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0304 	and.w	r3, r3, #4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d031      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d110      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2208      	movs	r2, #8
 80072f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f839 	bl	8007370 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2208      	movs	r2, #8
 8007302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e029      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800731c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007320:	d111      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800732a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f81f 	bl	8007370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e00f      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4013      	ands	r3, r2
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	429a      	cmp	r2, r3
 8007362:	d0a6      	beq.n	80072b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007370:	b480      	push	{r7}
 8007372:	b095      	sub	sp, #84	; 0x54
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007380:	e853 3f00 	ldrex	r3, [r3]
 8007384:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800738c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007396:	643b      	str	r3, [r7, #64]	; 0x40
 8007398:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800739c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800739e:	e841 2300 	strex	r3, r2, [r1]
 80073a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1e6      	bne.n	8007378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3308      	adds	r3, #8
 80073b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	e853 3f00 	ldrex	r3, [r3]
 80073b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ba:	69fa      	ldr	r2, [r7, #28]
 80073bc:	4b1e      	ldr	r3, [pc, #120]	; (8007438 <UART_EndRxTransfer+0xc8>)
 80073be:	4013      	ands	r3, r2
 80073c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	3308      	adds	r3, #8
 80073c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073d2:	e841 2300 	strex	r3, r2, [r1]
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d1e5      	bne.n	80073aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d118      	bne.n	8007418 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	e853 3f00 	ldrex	r3, [r3]
 80073f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	f023 0310 	bic.w	r3, r3, #16
 80073fa:	647b      	str	r3, [r7, #68]	; 0x44
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	461a      	mov	r2, r3
 8007402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007404:	61bb      	str	r3, [r7, #24]
 8007406:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007408:	6979      	ldr	r1, [r7, #20]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	e841 2300 	strex	r3, r2, [r1]
 8007410:	613b      	str	r3, [r7, #16]
   return(result);
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d1e6      	bne.n	80073e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2220      	movs	r2, #32
 800741c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800742c:	bf00      	nop
 800742e:	3754      	adds	r7, #84	; 0x54
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr
 8007438:	effffffe 	.word	0xeffffffe

0800743c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800743c:	b480      	push	{r7}
 800743e:	b085      	sub	sp, #20
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800744a:	2b01      	cmp	r3, #1
 800744c:	d101      	bne.n	8007452 <HAL_UARTEx_DisableFifoMode+0x16>
 800744e:	2302      	movs	r3, #2
 8007450:	e027      	b.n	80074a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2224      	movs	r2, #36	; 0x24
 800745e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f022 0201 	bic.w	r2, r2, #1
 8007478:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007480:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2220      	movs	r2, #32
 8007494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3714      	adds	r7, #20
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr

080074ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074ae:	b580      	push	{r7, lr}
 80074b0:	b084      	sub	sp, #16
 80074b2:	af00      	add	r7, sp, #0
 80074b4:	6078      	str	r0, [r7, #4]
 80074b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d101      	bne.n	80074c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074c2:	2302      	movs	r3, #2
 80074c4:	e02d      	b.n	8007522 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2224      	movs	r2, #36	; 0x24
 80074d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f022 0201 	bic.w	r2, r2, #1
 80074ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	430a      	orrs	r2, r1
 8007500:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 f850 	bl	80075a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2220      	movs	r2, #32
 8007514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2200      	movs	r2, #0
 800751c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}

0800752a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800752a:	b580      	push	{r7, lr}
 800752c:	b084      	sub	sp, #16
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
 8007532:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800753a:	2b01      	cmp	r3, #1
 800753c:	d101      	bne.n	8007542 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800753e:	2302      	movs	r3, #2
 8007540:	e02d      	b.n	800759e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2201      	movs	r2, #1
 8007546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2224      	movs	r2, #36	; 0x24
 800754e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0201 	bic.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	683a      	ldr	r2, [r7, #0]
 800757a:	430a      	orrs	r2, r1
 800757c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f812 	bl	80075a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2220      	movs	r2, #32
 8007590:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d108      	bne.n	80075ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2201      	movs	r2, #1
 80075c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075c8:	e031      	b.n	800762e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075ca:	2310      	movs	r3, #16
 80075cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075ce:	2310      	movs	r3, #16
 80075d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	0e5b      	lsrs	r3, r3, #25
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	0f5b      	lsrs	r3, r3, #29
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	7b3a      	ldrb	r2, [r7, #12]
 80075f6:	4911      	ldr	r1, [pc, #68]	; (800763c <UARTEx_SetNbDataToProcess+0x94>)
 80075f8:	5c8a      	ldrb	r2, [r1, r2]
 80075fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075fe:	7b3a      	ldrb	r2, [r7, #12]
 8007600:	490f      	ldr	r1, [pc, #60]	; (8007640 <UARTEx_SetNbDataToProcess+0x98>)
 8007602:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007604:	fb93 f3f2 	sdiv	r3, r3, r2
 8007608:	b29a      	uxth	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	7b7a      	ldrb	r2, [r7, #13]
 8007614:	4909      	ldr	r1, [pc, #36]	; (800763c <UARTEx_SetNbDataToProcess+0x94>)
 8007616:	5c8a      	ldrb	r2, [r1, r2]
 8007618:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800761c:	7b7a      	ldrb	r2, [r7, #13]
 800761e:	4908      	ldr	r1, [pc, #32]	; (8007640 <UARTEx_SetNbDataToProcess+0x98>)
 8007620:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007622:	fb93 f3f2 	sdiv	r3, r3, r2
 8007626:	b29a      	uxth	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800762e:	bf00      	nop
 8007630:	3714      	adds	r7, #20
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	0800871c 	.word	0x0800871c
 8007640:	08008724 	.word	0x08008724

08007644 <__errno>:
 8007644:	4b01      	ldr	r3, [pc, #4]	; (800764c <__errno+0x8>)
 8007646:	6818      	ldr	r0, [r3, #0]
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	24000010 	.word	0x24000010

08007650 <__libc_init_array>:
 8007650:	b570      	push	{r4, r5, r6, lr}
 8007652:	4d0d      	ldr	r5, [pc, #52]	; (8007688 <__libc_init_array+0x38>)
 8007654:	4c0d      	ldr	r4, [pc, #52]	; (800768c <__libc_init_array+0x3c>)
 8007656:	1b64      	subs	r4, r4, r5
 8007658:	10a4      	asrs	r4, r4, #2
 800765a:	2600      	movs	r6, #0
 800765c:	42a6      	cmp	r6, r4
 800765e:	d109      	bne.n	8007674 <__libc_init_array+0x24>
 8007660:	4d0b      	ldr	r5, [pc, #44]	; (8007690 <__libc_init_array+0x40>)
 8007662:	4c0c      	ldr	r4, [pc, #48]	; (8007694 <__libc_init_array+0x44>)
 8007664:	f001 f824 	bl	80086b0 <_init>
 8007668:	1b64      	subs	r4, r4, r5
 800766a:	10a4      	asrs	r4, r4, #2
 800766c:	2600      	movs	r6, #0
 800766e:	42a6      	cmp	r6, r4
 8007670:	d105      	bne.n	800767e <__libc_init_array+0x2e>
 8007672:	bd70      	pop	{r4, r5, r6, pc}
 8007674:	f855 3b04 	ldr.w	r3, [r5], #4
 8007678:	4798      	blx	r3
 800767a:	3601      	adds	r6, #1
 800767c:	e7ee      	b.n	800765c <__libc_init_array+0xc>
 800767e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007682:	4798      	blx	r3
 8007684:	3601      	adds	r6, #1
 8007686:	e7f2      	b.n	800766e <__libc_init_array+0x1e>
 8007688:	080087cc 	.word	0x080087cc
 800768c:	080087cc 	.word	0x080087cc
 8007690:	080087cc 	.word	0x080087cc
 8007694:	080087d0 	.word	0x080087d0

08007698 <memset>:
 8007698:	4402      	add	r2, r0
 800769a:	4603      	mov	r3, r0
 800769c:	4293      	cmp	r3, r2
 800769e:	d100      	bne.n	80076a2 <memset+0xa>
 80076a0:	4770      	bx	lr
 80076a2:	f803 1b01 	strb.w	r1, [r3], #1
 80076a6:	e7f9      	b.n	800769c <memset+0x4>

080076a8 <iprintf>:
 80076a8:	b40f      	push	{r0, r1, r2, r3}
 80076aa:	4b0a      	ldr	r3, [pc, #40]	; (80076d4 <iprintf+0x2c>)
 80076ac:	b513      	push	{r0, r1, r4, lr}
 80076ae:	681c      	ldr	r4, [r3, #0]
 80076b0:	b124      	cbz	r4, 80076bc <iprintf+0x14>
 80076b2:	69a3      	ldr	r3, [r4, #24]
 80076b4:	b913      	cbnz	r3, 80076bc <iprintf+0x14>
 80076b6:	4620      	mov	r0, r4
 80076b8:	f000 fa5e 	bl	8007b78 <__sinit>
 80076bc:	ab05      	add	r3, sp, #20
 80076be:	9a04      	ldr	r2, [sp, #16]
 80076c0:	68a1      	ldr	r1, [r4, #8]
 80076c2:	9301      	str	r3, [sp, #4]
 80076c4:	4620      	mov	r0, r4
 80076c6:	f000 fc67 	bl	8007f98 <_vfiprintf_r>
 80076ca:	b002      	add	sp, #8
 80076cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076d0:	b004      	add	sp, #16
 80076d2:	4770      	bx	lr
 80076d4:	24000010 	.word	0x24000010

080076d8 <_puts_r>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	460e      	mov	r6, r1
 80076dc:	4605      	mov	r5, r0
 80076de:	b118      	cbz	r0, 80076e8 <_puts_r+0x10>
 80076e0:	6983      	ldr	r3, [r0, #24]
 80076e2:	b90b      	cbnz	r3, 80076e8 <_puts_r+0x10>
 80076e4:	f000 fa48 	bl	8007b78 <__sinit>
 80076e8:	69ab      	ldr	r3, [r5, #24]
 80076ea:	68ac      	ldr	r4, [r5, #8]
 80076ec:	b913      	cbnz	r3, 80076f4 <_puts_r+0x1c>
 80076ee:	4628      	mov	r0, r5
 80076f0:	f000 fa42 	bl	8007b78 <__sinit>
 80076f4:	4b2c      	ldr	r3, [pc, #176]	; (80077a8 <_puts_r+0xd0>)
 80076f6:	429c      	cmp	r4, r3
 80076f8:	d120      	bne.n	800773c <_puts_r+0x64>
 80076fa:	686c      	ldr	r4, [r5, #4]
 80076fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80076fe:	07db      	lsls	r3, r3, #31
 8007700:	d405      	bmi.n	800770e <_puts_r+0x36>
 8007702:	89a3      	ldrh	r3, [r4, #12]
 8007704:	0598      	lsls	r0, r3, #22
 8007706:	d402      	bmi.n	800770e <_puts_r+0x36>
 8007708:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800770a:	f000 fad3 	bl	8007cb4 <__retarget_lock_acquire_recursive>
 800770e:	89a3      	ldrh	r3, [r4, #12]
 8007710:	0719      	lsls	r1, r3, #28
 8007712:	d51d      	bpl.n	8007750 <_puts_r+0x78>
 8007714:	6923      	ldr	r3, [r4, #16]
 8007716:	b1db      	cbz	r3, 8007750 <_puts_r+0x78>
 8007718:	3e01      	subs	r6, #1
 800771a:	68a3      	ldr	r3, [r4, #8]
 800771c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007720:	3b01      	subs	r3, #1
 8007722:	60a3      	str	r3, [r4, #8]
 8007724:	bb39      	cbnz	r1, 8007776 <_puts_r+0x9e>
 8007726:	2b00      	cmp	r3, #0
 8007728:	da38      	bge.n	800779c <_puts_r+0xc4>
 800772a:	4622      	mov	r2, r4
 800772c:	210a      	movs	r1, #10
 800772e:	4628      	mov	r0, r5
 8007730:	f000 f848 	bl	80077c4 <__swbuf_r>
 8007734:	3001      	adds	r0, #1
 8007736:	d011      	beq.n	800775c <_puts_r+0x84>
 8007738:	250a      	movs	r5, #10
 800773a:	e011      	b.n	8007760 <_puts_r+0x88>
 800773c:	4b1b      	ldr	r3, [pc, #108]	; (80077ac <_puts_r+0xd4>)
 800773e:	429c      	cmp	r4, r3
 8007740:	d101      	bne.n	8007746 <_puts_r+0x6e>
 8007742:	68ac      	ldr	r4, [r5, #8]
 8007744:	e7da      	b.n	80076fc <_puts_r+0x24>
 8007746:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <_puts_r+0xd8>)
 8007748:	429c      	cmp	r4, r3
 800774a:	bf08      	it	eq
 800774c:	68ec      	ldreq	r4, [r5, #12]
 800774e:	e7d5      	b.n	80076fc <_puts_r+0x24>
 8007750:	4621      	mov	r1, r4
 8007752:	4628      	mov	r0, r5
 8007754:	f000 f888 	bl	8007868 <__swsetup_r>
 8007758:	2800      	cmp	r0, #0
 800775a:	d0dd      	beq.n	8007718 <_puts_r+0x40>
 800775c:	f04f 35ff 	mov.w	r5, #4294967295
 8007760:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007762:	07da      	lsls	r2, r3, #31
 8007764:	d405      	bmi.n	8007772 <_puts_r+0x9a>
 8007766:	89a3      	ldrh	r3, [r4, #12]
 8007768:	059b      	lsls	r3, r3, #22
 800776a:	d402      	bmi.n	8007772 <_puts_r+0x9a>
 800776c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800776e:	f000 faa2 	bl	8007cb6 <__retarget_lock_release_recursive>
 8007772:	4628      	mov	r0, r5
 8007774:	bd70      	pop	{r4, r5, r6, pc}
 8007776:	2b00      	cmp	r3, #0
 8007778:	da04      	bge.n	8007784 <_puts_r+0xac>
 800777a:	69a2      	ldr	r2, [r4, #24]
 800777c:	429a      	cmp	r2, r3
 800777e:	dc06      	bgt.n	800778e <_puts_r+0xb6>
 8007780:	290a      	cmp	r1, #10
 8007782:	d004      	beq.n	800778e <_puts_r+0xb6>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	6022      	str	r2, [r4, #0]
 800778a:	7019      	strb	r1, [r3, #0]
 800778c:	e7c5      	b.n	800771a <_puts_r+0x42>
 800778e:	4622      	mov	r2, r4
 8007790:	4628      	mov	r0, r5
 8007792:	f000 f817 	bl	80077c4 <__swbuf_r>
 8007796:	3001      	adds	r0, #1
 8007798:	d1bf      	bne.n	800771a <_puts_r+0x42>
 800779a:	e7df      	b.n	800775c <_puts_r+0x84>
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	250a      	movs	r5, #10
 80077a0:	1c5a      	adds	r2, r3, #1
 80077a2:	6022      	str	r2, [r4, #0]
 80077a4:	701d      	strb	r5, [r3, #0]
 80077a6:	e7db      	b.n	8007760 <_puts_r+0x88>
 80077a8:	08008750 	.word	0x08008750
 80077ac:	08008770 	.word	0x08008770
 80077b0:	08008730 	.word	0x08008730

080077b4 <puts>:
 80077b4:	4b02      	ldr	r3, [pc, #8]	; (80077c0 <puts+0xc>)
 80077b6:	4601      	mov	r1, r0
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	f7ff bf8d 	b.w	80076d8 <_puts_r>
 80077be:	bf00      	nop
 80077c0:	24000010 	.word	0x24000010

080077c4 <__swbuf_r>:
 80077c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077c6:	460e      	mov	r6, r1
 80077c8:	4614      	mov	r4, r2
 80077ca:	4605      	mov	r5, r0
 80077cc:	b118      	cbz	r0, 80077d6 <__swbuf_r+0x12>
 80077ce:	6983      	ldr	r3, [r0, #24]
 80077d0:	b90b      	cbnz	r3, 80077d6 <__swbuf_r+0x12>
 80077d2:	f000 f9d1 	bl	8007b78 <__sinit>
 80077d6:	4b21      	ldr	r3, [pc, #132]	; (800785c <__swbuf_r+0x98>)
 80077d8:	429c      	cmp	r4, r3
 80077da:	d12b      	bne.n	8007834 <__swbuf_r+0x70>
 80077dc:	686c      	ldr	r4, [r5, #4]
 80077de:	69a3      	ldr	r3, [r4, #24]
 80077e0:	60a3      	str	r3, [r4, #8]
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	071a      	lsls	r2, r3, #28
 80077e6:	d52f      	bpl.n	8007848 <__swbuf_r+0x84>
 80077e8:	6923      	ldr	r3, [r4, #16]
 80077ea:	b36b      	cbz	r3, 8007848 <__swbuf_r+0x84>
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	1ac0      	subs	r0, r0, r3
 80077f2:	6963      	ldr	r3, [r4, #20]
 80077f4:	b2f6      	uxtb	r6, r6
 80077f6:	4283      	cmp	r3, r0
 80077f8:	4637      	mov	r7, r6
 80077fa:	dc04      	bgt.n	8007806 <__swbuf_r+0x42>
 80077fc:	4621      	mov	r1, r4
 80077fe:	4628      	mov	r0, r5
 8007800:	f000 f926 	bl	8007a50 <_fflush_r>
 8007804:	bb30      	cbnz	r0, 8007854 <__swbuf_r+0x90>
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	3b01      	subs	r3, #1
 800780a:	60a3      	str	r3, [r4, #8]
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	6022      	str	r2, [r4, #0]
 8007812:	701e      	strb	r6, [r3, #0]
 8007814:	6963      	ldr	r3, [r4, #20]
 8007816:	3001      	adds	r0, #1
 8007818:	4283      	cmp	r3, r0
 800781a:	d004      	beq.n	8007826 <__swbuf_r+0x62>
 800781c:	89a3      	ldrh	r3, [r4, #12]
 800781e:	07db      	lsls	r3, r3, #31
 8007820:	d506      	bpl.n	8007830 <__swbuf_r+0x6c>
 8007822:	2e0a      	cmp	r6, #10
 8007824:	d104      	bne.n	8007830 <__swbuf_r+0x6c>
 8007826:	4621      	mov	r1, r4
 8007828:	4628      	mov	r0, r5
 800782a:	f000 f911 	bl	8007a50 <_fflush_r>
 800782e:	b988      	cbnz	r0, 8007854 <__swbuf_r+0x90>
 8007830:	4638      	mov	r0, r7
 8007832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007834:	4b0a      	ldr	r3, [pc, #40]	; (8007860 <__swbuf_r+0x9c>)
 8007836:	429c      	cmp	r4, r3
 8007838:	d101      	bne.n	800783e <__swbuf_r+0x7a>
 800783a:	68ac      	ldr	r4, [r5, #8]
 800783c:	e7cf      	b.n	80077de <__swbuf_r+0x1a>
 800783e:	4b09      	ldr	r3, [pc, #36]	; (8007864 <__swbuf_r+0xa0>)
 8007840:	429c      	cmp	r4, r3
 8007842:	bf08      	it	eq
 8007844:	68ec      	ldreq	r4, [r5, #12]
 8007846:	e7ca      	b.n	80077de <__swbuf_r+0x1a>
 8007848:	4621      	mov	r1, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f80c 	bl	8007868 <__swsetup_r>
 8007850:	2800      	cmp	r0, #0
 8007852:	d0cb      	beq.n	80077ec <__swbuf_r+0x28>
 8007854:	f04f 37ff 	mov.w	r7, #4294967295
 8007858:	e7ea      	b.n	8007830 <__swbuf_r+0x6c>
 800785a:	bf00      	nop
 800785c:	08008750 	.word	0x08008750
 8007860:	08008770 	.word	0x08008770
 8007864:	08008730 	.word	0x08008730

08007868 <__swsetup_r>:
 8007868:	4b32      	ldr	r3, [pc, #200]	; (8007934 <__swsetup_r+0xcc>)
 800786a:	b570      	push	{r4, r5, r6, lr}
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	4606      	mov	r6, r0
 8007870:	460c      	mov	r4, r1
 8007872:	b125      	cbz	r5, 800787e <__swsetup_r+0x16>
 8007874:	69ab      	ldr	r3, [r5, #24]
 8007876:	b913      	cbnz	r3, 800787e <__swsetup_r+0x16>
 8007878:	4628      	mov	r0, r5
 800787a:	f000 f97d 	bl	8007b78 <__sinit>
 800787e:	4b2e      	ldr	r3, [pc, #184]	; (8007938 <__swsetup_r+0xd0>)
 8007880:	429c      	cmp	r4, r3
 8007882:	d10f      	bne.n	80078a4 <__swsetup_r+0x3c>
 8007884:	686c      	ldr	r4, [r5, #4]
 8007886:	89a3      	ldrh	r3, [r4, #12]
 8007888:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800788c:	0719      	lsls	r1, r3, #28
 800788e:	d42c      	bmi.n	80078ea <__swsetup_r+0x82>
 8007890:	06dd      	lsls	r5, r3, #27
 8007892:	d411      	bmi.n	80078b8 <__swsetup_r+0x50>
 8007894:	2309      	movs	r3, #9
 8007896:	6033      	str	r3, [r6, #0]
 8007898:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800789c:	81a3      	strh	r3, [r4, #12]
 800789e:	f04f 30ff 	mov.w	r0, #4294967295
 80078a2:	e03e      	b.n	8007922 <__swsetup_r+0xba>
 80078a4:	4b25      	ldr	r3, [pc, #148]	; (800793c <__swsetup_r+0xd4>)
 80078a6:	429c      	cmp	r4, r3
 80078a8:	d101      	bne.n	80078ae <__swsetup_r+0x46>
 80078aa:	68ac      	ldr	r4, [r5, #8]
 80078ac:	e7eb      	b.n	8007886 <__swsetup_r+0x1e>
 80078ae:	4b24      	ldr	r3, [pc, #144]	; (8007940 <__swsetup_r+0xd8>)
 80078b0:	429c      	cmp	r4, r3
 80078b2:	bf08      	it	eq
 80078b4:	68ec      	ldreq	r4, [r5, #12]
 80078b6:	e7e6      	b.n	8007886 <__swsetup_r+0x1e>
 80078b8:	0758      	lsls	r0, r3, #29
 80078ba:	d512      	bpl.n	80078e2 <__swsetup_r+0x7a>
 80078bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078be:	b141      	cbz	r1, 80078d2 <__swsetup_r+0x6a>
 80078c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078c4:	4299      	cmp	r1, r3
 80078c6:	d002      	beq.n	80078ce <__swsetup_r+0x66>
 80078c8:	4630      	mov	r0, r6
 80078ca:	f000 fa5b 	bl	8007d84 <_free_r>
 80078ce:	2300      	movs	r3, #0
 80078d0:	6363      	str	r3, [r4, #52]	; 0x34
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	2300      	movs	r3, #0
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	6923      	ldr	r3, [r4, #16]
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	f043 0308 	orr.w	r3, r3, #8
 80078e8:	81a3      	strh	r3, [r4, #12]
 80078ea:	6923      	ldr	r3, [r4, #16]
 80078ec:	b94b      	cbnz	r3, 8007902 <__swsetup_r+0x9a>
 80078ee:	89a3      	ldrh	r3, [r4, #12]
 80078f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80078f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078f8:	d003      	beq.n	8007902 <__swsetup_r+0x9a>
 80078fa:	4621      	mov	r1, r4
 80078fc:	4630      	mov	r0, r6
 80078fe:	f000 fa01 	bl	8007d04 <__smakebuf_r>
 8007902:	89a0      	ldrh	r0, [r4, #12]
 8007904:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007908:	f010 0301 	ands.w	r3, r0, #1
 800790c:	d00a      	beq.n	8007924 <__swsetup_r+0xbc>
 800790e:	2300      	movs	r3, #0
 8007910:	60a3      	str	r3, [r4, #8]
 8007912:	6963      	ldr	r3, [r4, #20]
 8007914:	425b      	negs	r3, r3
 8007916:	61a3      	str	r3, [r4, #24]
 8007918:	6923      	ldr	r3, [r4, #16]
 800791a:	b943      	cbnz	r3, 800792e <__swsetup_r+0xc6>
 800791c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007920:	d1ba      	bne.n	8007898 <__swsetup_r+0x30>
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	0781      	lsls	r1, r0, #30
 8007926:	bf58      	it	pl
 8007928:	6963      	ldrpl	r3, [r4, #20]
 800792a:	60a3      	str	r3, [r4, #8]
 800792c:	e7f4      	b.n	8007918 <__swsetup_r+0xb0>
 800792e:	2000      	movs	r0, #0
 8007930:	e7f7      	b.n	8007922 <__swsetup_r+0xba>
 8007932:	bf00      	nop
 8007934:	24000010 	.word	0x24000010
 8007938:	08008750 	.word	0x08008750
 800793c:	08008770 	.word	0x08008770
 8007940:	08008730 	.word	0x08008730

08007944 <__sflush_r>:
 8007944:	898a      	ldrh	r2, [r1, #12]
 8007946:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800794a:	4605      	mov	r5, r0
 800794c:	0710      	lsls	r0, r2, #28
 800794e:	460c      	mov	r4, r1
 8007950:	d458      	bmi.n	8007a04 <__sflush_r+0xc0>
 8007952:	684b      	ldr	r3, [r1, #4]
 8007954:	2b00      	cmp	r3, #0
 8007956:	dc05      	bgt.n	8007964 <__sflush_r+0x20>
 8007958:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800795a:	2b00      	cmp	r3, #0
 800795c:	dc02      	bgt.n	8007964 <__sflush_r+0x20>
 800795e:	2000      	movs	r0, #0
 8007960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007964:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007966:	2e00      	cmp	r6, #0
 8007968:	d0f9      	beq.n	800795e <__sflush_r+0x1a>
 800796a:	2300      	movs	r3, #0
 800796c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007970:	682f      	ldr	r7, [r5, #0]
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	d032      	beq.n	80079dc <__sflush_r+0x98>
 8007976:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	075a      	lsls	r2, r3, #29
 800797c:	d505      	bpl.n	800798a <__sflush_r+0x46>
 800797e:	6863      	ldr	r3, [r4, #4]
 8007980:	1ac0      	subs	r0, r0, r3
 8007982:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007984:	b10b      	cbz	r3, 800798a <__sflush_r+0x46>
 8007986:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007988:	1ac0      	subs	r0, r0, r3
 800798a:	2300      	movs	r3, #0
 800798c:	4602      	mov	r2, r0
 800798e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007990:	6a21      	ldr	r1, [r4, #32]
 8007992:	4628      	mov	r0, r5
 8007994:	47b0      	blx	r6
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	d106      	bne.n	80079aa <__sflush_r+0x66>
 800799c:	6829      	ldr	r1, [r5, #0]
 800799e:	291d      	cmp	r1, #29
 80079a0:	d82c      	bhi.n	80079fc <__sflush_r+0xb8>
 80079a2:	4a2a      	ldr	r2, [pc, #168]	; (8007a4c <__sflush_r+0x108>)
 80079a4:	40ca      	lsrs	r2, r1
 80079a6:	07d6      	lsls	r6, r2, #31
 80079a8:	d528      	bpl.n	80079fc <__sflush_r+0xb8>
 80079aa:	2200      	movs	r2, #0
 80079ac:	6062      	str	r2, [r4, #4]
 80079ae:	04d9      	lsls	r1, r3, #19
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	d504      	bpl.n	80079c0 <__sflush_r+0x7c>
 80079b6:	1c42      	adds	r2, r0, #1
 80079b8:	d101      	bne.n	80079be <__sflush_r+0x7a>
 80079ba:	682b      	ldr	r3, [r5, #0]
 80079bc:	b903      	cbnz	r3, 80079c0 <__sflush_r+0x7c>
 80079be:	6560      	str	r0, [r4, #84]	; 0x54
 80079c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079c2:	602f      	str	r7, [r5, #0]
 80079c4:	2900      	cmp	r1, #0
 80079c6:	d0ca      	beq.n	800795e <__sflush_r+0x1a>
 80079c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079cc:	4299      	cmp	r1, r3
 80079ce:	d002      	beq.n	80079d6 <__sflush_r+0x92>
 80079d0:	4628      	mov	r0, r5
 80079d2:	f000 f9d7 	bl	8007d84 <_free_r>
 80079d6:	2000      	movs	r0, #0
 80079d8:	6360      	str	r0, [r4, #52]	; 0x34
 80079da:	e7c1      	b.n	8007960 <__sflush_r+0x1c>
 80079dc:	6a21      	ldr	r1, [r4, #32]
 80079de:	2301      	movs	r3, #1
 80079e0:	4628      	mov	r0, r5
 80079e2:	47b0      	blx	r6
 80079e4:	1c41      	adds	r1, r0, #1
 80079e6:	d1c7      	bne.n	8007978 <__sflush_r+0x34>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0c4      	beq.n	8007978 <__sflush_r+0x34>
 80079ee:	2b1d      	cmp	r3, #29
 80079f0:	d001      	beq.n	80079f6 <__sflush_r+0xb2>
 80079f2:	2b16      	cmp	r3, #22
 80079f4:	d101      	bne.n	80079fa <__sflush_r+0xb6>
 80079f6:	602f      	str	r7, [r5, #0]
 80079f8:	e7b1      	b.n	800795e <__sflush_r+0x1a>
 80079fa:	89a3      	ldrh	r3, [r4, #12]
 80079fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a00:	81a3      	strh	r3, [r4, #12]
 8007a02:	e7ad      	b.n	8007960 <__sflush_r+0x1c>
 8007a04:	690f      	ldr	r7, [r1, #16]
 8007a06:	2f00      	cmp	r7, #0
 8007a08:	d0a9      	beq.n	800795e <__sflush_r+0x1a>
 8007a0a:	0793      	lsls	r3, r2, #30
 8007a0c:	680e      	ldr	r6, [r1, #0]
 8007a0e:	bf08      	it	eq
 8007a10:	694b      	ldreq	r3, [r1, #20]
 8007a12:	600f      	str	r7, [r1, #0]
 8007a14:	bf18      	it	ne
 8007a16:	2300      	movne	r3, #0
 8007a18:	eba6 0807 	sub.w	r8, r6, r7
 8007a1c:	608b      	str	r3, [r1, #8]
 8007a1e:	f1b8 0f00 	cmp.w	r8, #0
 8007a22:	dd9c      	ble.n	800795e <__sflush_r+0x1a>
 8007a24:	6a21      	ldr	r1, [r4, #32]
 8007a26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a28:	4643      	mov	r3, r8
 8007a2a:	463a      	mov	r2, r7
 8007a2c:	4628      	mov	r0, r5
 8007a2e:	47b0      	blx	r6
 8007a30:	2800      	cmp	r0, #0
 8007a32:	dc06      	bgt.n	8007a42 <__sflush_r+0xfe>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e78e      	b.n	8007960 <__sflush_r+0x1c>
 8007a42:	4407      	add	r7, r0
 8007a44:	eba8 0800 	sub.w	r8, r8, r0
 8007a48:	e7e9      	b.n	8007a1e <__sflush_r+0xda>
 8007a4a:	bf00      	nop
 8007a4c:	20400001 	.word	0x20400001

08007a50 <_fflush_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	690b      	ldr	r3, [r1, #16]
 8007a54:	4605      	mov	r5, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b913      	cbnz	r3, 8007a60 <_fflush_r+0x10>
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	b118      	cbz	r0, 8007a6a <_fflush_r+0x1a>
 8007a62:	6983      	ldr	r3, [r0, #24]
 8007a64:	b90b      	cbnz	r3, 8007a6a <_fflush_r+0x1a>
 8007a66:	f000 f887 	bl	8007b78 <__sinit>
 8007a6a:	4b14      	ldr	r3, [pc, #80]	; (8007abc <_fflush_r+0x6c>)
 8007a6c:	429c      	cmp	r4, r3
 8007a6e:	d11b      	bne.n	8007aa8 <_fflush_r+0x58>
 8007a70:	686c      	ldr	r4, [r5, #4]
 8007a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0ef      	beq.n	8007a5a <_fflush_r+0xa>
 8007a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007a7c:	07d0      	lsls	r0, r2, #31
 8007a7e:	d404      	bmi.n	8007a8a <_fflush_r+0x3a>
 8007a80:	0599      	lsls	r1, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_fflush_r+0x3a>
 8007a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a86:	f000 f915 	bl	8007cb4 <__retarget_lock_acquire_recursive>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f7ff ff59 	bl	8007944 <__sflush_r>
 8007a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a94:	07da      	lsls	r2, r3, #31
 8007a96:	4605      	mov	r5, r0
 8007a98:	d4e0      	bmi.n	8007a5c <_fflush_r+0xc>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	059b      	lsls	r3, r3, #22
 8007a9e:	d4dd      	bmi.n	8007a5c <_fflush_r+0xc>
 8007aa0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007aa2:	f000 f908 	bl	8007cb6 <__retarget_lock_release_recursive>
 8007aa6:	e7d9      	b.n	8007a5c <_fflush_r+0xc>
 8007aa8:	4b05      	ldr	r3, [pc, #20]	; (8007ac0 <_fflush_r+0x70>)
 8007aaa:	429c      	cmp	r4, r3
 8007aac:	d101      	bne.n	8007ab2 <_fflush_r+0x62>
 8007aae:	68ac      	ldr	r4, [r5, #8]
 8007ab0:	e7df      	b.n	8007a72 <_fflush_r+0x22>
 8007ab2:	4b04      	ldr	r3, [pc, #16]	; (8007ac4 <_fflush_r+0x74>)
 8007ab4:	429c      	cmp	r4, r3
 8007ab6:	bf08      	it	eq
 8007ab8:	68ec      	ldreq	r4, [r5, #12]
 8007aba:	e7da      	b.n	8007a72 <_fflush_r+0x22>
 8007abc:	08008750 	.word	0x08008750
 8007ac0:	08008770 	.word	0x08008770
 8007ac4:	08008730 	.word	0x08008730

08007ac8 <std>:
 8007ac8:	2300      	movs	r3, #0
 8007aca:	b510      	push	{r4, lr}
 8007acc:	4604      	mov	r4, r0
 8007ace:	e9c0 3300 	strd	r3, r3, [r0]
 8007ad2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ad6:	6083      	str	r3, [r0, #8]
 8007ad8:	8181      	strh	r1, [r0, #12]
 8007ada:	6643      	str	r3, [r0, #100]	; 0x64
 8007adc:	81c2      	strh	r2, [r0, #14]
 8007ade:	6183      	str	r3, [r0, #24]
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	2208      	movs	r2, #8
 8007ae4:	305c      	adds	r0, #92	; 0x5c
 8007ae6:	f7ff fdd7 	bl	8007698 <memset>
 8007aea:	4b05      	ldr	r3, [pc, #20]	; (8007b00 <std+0x38>)
 8007aec:	6263      	str	r3, [r4, #36]	; 0x24
 8007aee:	4b05      	ldr	r3, [pc, #20]	; (8007b04 <std+0x3c>)
 8007af0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <std+0x40>)
 8007af4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007af6:	4b05      	ldr	r3, [pc, #20]	; (8007b0c <std+0x44>)
 8007af8:	6224      	str	r4, [r4, #32]
 8007afa:	6323      	str	r3, [r4, #48]	; 0x30
 8007afc:	bd10      	pop	{r4, pc}
 8007afe:	bf00      	nop
 8007b00:	08008541 	.word	0x08008541
 8007b04:	08008563 	.word	0x08008563
 8007b08:	0800859b 	.word	0x0800859b
 8007b0c:	080085bf 	.word	0x080085bf

08007b10 <_cleanup_r>:
 8007b10:	4901      	ldr	r1, [pc, #4]	; (8007b18 <_cleanup_r+0x8>)
 8007b12:	f000 b8af 	b.w	8007c74 <_fwalk_reent>
 8007b16:	bf00      	nop
 8007b18:	08007a51 	.word	0x08007a51

08007b1c <__sfmoreglue>:
 8007b1c:	b570      	push	{r4, r5, r6, lr}
 8007b1e:	2268      	movs	r2, #104	; 0x68
 8007b20:	1e4d      	subs	r5, r1, #1
 8007b22:	4355      	muls	r5, r2
 8007b24:	460e      	mov	r6, r1
 8007b26:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b2a:	f000 f997 	bl	8007e5c <_malloc_r>
 8007b2e:	4604      	mov	r4, r0
 8007b30:	b140      	cbz	r0, 8007b44 <__sfmoreglue+0x28>
 8007b32:	2100      	movs	r1, #0
 8007b34:	e9c0 1600 	strd	r1, r6, [r0]
 8007b38:	300c      	adds	r0, #12
 8007b3a:	60a0      	str	r0, [r4, #8]
 8007b3c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b40:	f7ff fdaa 	bl	8007698 <memset>
 8007b44:	4620      	mov	r0, r4
 8007b46:	bd70      	pop	{r4, r5, r6, pc}

08007b48 <__sfp_lock_acquire>:
 8007b48:	4801      	ldr	r0, [pc, #4]	; (8007b50 <__sfp_lock_acquire+0x8>)
 8007b4a:	f000 b8b3 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007b4e:	bf00      	nop
 8007b50:	240001a5 	.word	0x240001a5

08007b54 <__sfp_lock_release>:
 8007b54:	4801      	ldr	r0, [pc, #4]	; (8007b5c <__sfp_lock_release+0x8>)
 8007b56:	f000 b8ae 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007b5a:	bf00      	nop
 8007b5c:	240001a5 	.word	0x240001a5

08007b60 <__sinit_lock_acquire>:
 8007b60:	4801      	ldr	r0, [pc, #4]	; (8007b68 <__sinit_lock_acquire+0x8>)
 8007b62:	f000 b8a7 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 8007b66:	bf00      	nop
 8007b68:	240001a6 	.word	0x240001a6

08007b6c <__sinit_lock_release>:
 8007b6c:	4801      	ldr	r0, [pc, #4]	; (8007b74 <__sinit_lock_release+0x8>)
 8007b6e:	f000 b8a2 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8007b72:	bf00      	nop
 8007b74:	240001a6 	.word	0x240001a6

08007b78 <__sinit>:
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	4604      	mov	r4, r0
 8007b7c:	f7ff fff0 	bl	8007b60 <__sinit_lock_acquire>
 8007b80:	69a3      	ldr	r3, [r4, #24]
 8007b82:	b11b      	cbz	r3, 8007b8c <__sinit+0x14>
 8007b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b88:	f7ff bff0 	b.w	8007b6c <__sinit_lock_release>
 8007b8c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007b90:	6523      	str	r3, [r4, #80]	; 0x50
 8007b92:	4b13      	ldr	r3, [pc, #76]	; (8007be0 <__sinit+0x68>)
 8007b94:	4a13      	ldr	r2, [pc, #76]	; (8007be4 <__sinit+0x6c>)
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	62a2      	str	r2, [r4, #40]	; 0x28
 8007b9a:	42a3      	cmp	r3, r4
 8007b9c:	bf04      	itt	eq
 8007b9e:	2301      	moveq	r3, #1
 8007ba0:	61a3      	streq	r3, [r4, #24]
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	f000 f820 	bl	8007be8 <__sfp>
 8007ba8:	6060      	str	r0, [r4, #4]
 8007baa:	4620      	mov	r0, r4
 8007bac:	f000 f81c 	bl	8007be8 <__sfp>
 8007bb0:	60a0      	str	r0, [r4, #8]
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	f000 f818 	bl	8007be8 <__sfp>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	60e0      	str	r0, [r4, #12]
 8007bbc:	2104      	movs	r1, #4
 8007bbe:	6860      	ldr	r0, [r4, #4]
 8007bc0:	f7ff ff82 	bl	8007ac8 <std>
 8007bc4:	68a0      	ldr	r0, [r4, #8]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	2109      	movs	r1, #9
 8007bca:	f7ff ff7d 	bl	8007ac8 <std>
 8007bce:	68e0      	ldr	r0, [r4, #12]
 8007bd0:	2202      	movs	r2, #2
 8007bd2:	2112      	movs	r1, #18
 8007bd4:	f7ff ff78 	bl	8007ac8 <std>
 8007bd8:	2301      	movs	r3, #1
 8007bda:	61a3      	str	r3, [r4, #24]
 8007bdc:	e7d2      	b.n	8007b84 <__sinit+0xc>
 8007bde:	bf00      	nop
 8007be0:	0800872c 	.word	0x0800872c
 8007be4:	08007b11 	.word	0x08007b11

08007be8 <__sfp>:
 8007be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bea:	4607      	mov	r7, r0
 8007bec:	f7ff ffac 	bl	8007b48 <__sfp_lock_acquire>
 8007bf0:	4b1e      	ldr	r3, [pc, #120]	; (8007c6c <__sfp+0x84>)
 8007bf2:	681e      	ldr	r6, [r3, #0]
 8007bf4:	69b3      	ldr	r3, [r6, #24]
 8007bf6:	b913      	cbnz	r3, 8007bfe <__sfp+0x16>
 8007bf8:	4630      	mov	r0, r6
 8007bfa:	f7ff ffbd 	bl	8007b78 <__sinit>
 8007bfe:	3648      	adds	r6, #72	; 0x48
 8007c00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c04:	3b01      	subs	r3, #1
 8007c06:	d503      	bpl.n	8007c10 <__sfp+0x28>
 8007c08:	6833      	ldr	r3, [r6, #0]
 8007c0a:	b30b      	cbz	r3, 8007c50 <__sfp+0x68>
 8007c0c:	6836      	ldr	r6, [r6, #0]
 8007c0e:	e7f7      	b.n	8007c00 <__sfp+0x18>
 8007c10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c14:	b9d5      	cbnz	r5, 8007c4c <__sfp+0x64>
 8007c16:	4b16      	ldr	r3, [pc, #88]	; (8007c70 <__sfp+0x88>)
 8007c18:	60e3      	str	r3, [r4, #12]
 8007c1a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c1e:	6665      	str	r5, [r4, #100]	; 0x64
 8007c20:	f000 f847 	bl	8007cb2 <__retarget_lock_init_recursive>
 8007c24:	f7ff ff96 	bl	8007b54 <__sfp_lock_release>
 8007c28:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c2c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c30:	6025      	str	r5, [r4, #0]
 8007c32:	61a5      	str	r5, [r4, #24]
 8007c34:	2208      	movs	r2, #8
 8007c36:	4629      	mov	r1, r5
 8007c38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c3c:	f7ff fd2c 	bl	8007698 <memset>
 8007c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c44:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c48:	4620      	mov	r0, r4
 8007c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c4c:	3468      	adds	r4, #104	; 0x68
 8007c4e:	e7d9      	b.n	8007c04 <__sfp+0x1c>
 8007c50:	2104      	movs	r1, #4
 8007c52:	4638      	mov	r0, r7
 8007c54:	f7ff ff62 	bl	8007b1c <__sfmoreglue>
 8007c58:	4604      	mov	r4, r0
 8007c5a:	6030      	str	r0, [r6, #0]
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	d1d5      	bne.n	8007c0c <__sfp+0x24>
 8007c60:	f7ff ff78 	bl	8007b54 <__sfp_lock_release>
 8007c64:	230c      	movs	r3, #12
 8007c66:	603b      	str	r3, [r7, #0]
 8007c68:	e7ee      	b.n	8007c48 <__sfp+0x60>
 8007c6a:	bf00      	nop
 8007c6c:	0800872c 	.word	0x0800872c
 8007c70:	ffff0001 	.word	0xffff0001

08007c74 <_fwalk_reent>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	4606      	mov	r6, r0
 8007c7a:	4688      	mov	r8, r1
 8007c7c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007c80:	2700      	movs	r7, #0
 8007c82:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c86:	f1b9 0901 	subs.w	r9, r9, #1
 8007c8a:	d505      	bpl.n	8007c98 <_fwalk_reent+0x24>
 8007c8c:	6824      	ldr	r4, [r4, #0]
 8007c8e:	2c00      	cmp	r4, #0
 8007c90:	d1f7      	bne.n	8007c82 <_fwalk_reent+0xe>
 8007c92:	4638      	mov	r0, r7
 8007c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c98:	89ab      	ldrh	r3, [r5, #12]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d907      	bls.n	8007cae <_fwalk_reent+0x3a>
 8007c9e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	d003      	beq.n	8007cae <_fwalk_reent+0x3a>
 8007ca6:	4629      	mov	r1, r5
 8007ca8:	4630      	mov	r0, r6
 8007caa:	47c0      	blx	r8
 8007cac:	4307      	orrs	r7, r0
 8007cae:	3568      	adds	r5, #104	; 0x68
 8007cb0:	e7e9      	b.n	8007c86 <_fwalk_reent+0x12>

08007cb2 <__retarget_lock_init_recursive>:
 8007cb2:	4770      	bx	lr

08007cb4 <__retarget_lock_acquire_recursive>:
 8007cb4:	4770      	bx	lr

08007cb6 <__retarget_lock_release_recursive>:
 8007cb6:	4770      	bx	lr

08007cb8 <__swhatbuf_r>:
 8007cb8:	b570      	push	{r4, r5, r6, lr}
 8007cba:	460e      	mov	r6, r1
 8007cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	b096      	sub	sp, #88	; 0x58
 8007cc4:	4614      	mov	r4, r2
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	da08      	bge.n	8007cdc <__swhatbuf_r+0x24>
 8007cca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	602a      	str	r2, [r5, #0]
 8007cd2:	061a      	lsls	r2, r3, #24
 8007cd4:	d410      	bmi.n	8007cf8 <__swhatbuf_r+0x40>
 8007cd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007cda:	e00e      	b.n	8007cfa <__swhatbuf_r+0x42>
 8007cdc:	466a      	mov	r2, sp
 8007cde:	f000 fc95 	bl	800860c <_fstat_r>
 8007ce2:	2800      	cmp	r0, #0
 8007ce4:	dbf1      	blt.n	8007cca <__swhatbuf_r+0x12>
 8007ce6:	9a01      	ldr	r2, [sp, #4]
 8007ce8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007cec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007cf0:	425a      	negs	r2, r3
 8007cf2:	415a      	adcs	r2, r3
 8007cf4:	602a      	str	r2, [r5, #0]
 8007cf6:	e7ee      	b.n	8007cd6 <__swhatbuf_r+0x1e>
 8007cf8:	2340      	movs	r3, #64	; 0x40
 8007cfa:	2000      	movs	r0, #0
 8007cfc:	6023      	str	r3, [r4, #0]
 8007cfe:	b016      	add	sp, #88	; 0x58
 8007d00:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d04 <__smakebuf_r>:
 8007d04:	898b      	ldrh	r3, [r1, #12]
 8007d06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d08:	079d      	lsls	r5, r3, #30
 8007d0a:	4606      	mov	r6, r0
 8007d0c:	460c      	mov	r4, r1
 8007d0e:	d507      	bpl.n	8007d20 <__smakebuf_r+0x1c>
 8007d10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	6123      	str	r3, [r4, #16]
 8007d18:	2301      	movs	r3, #1
 8007d1a:	6163      	str	r3, [r4, #20]
 8007d1c:	b002      	add	sp, #8
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}
 8007d20:	ab01      	add	r3, sp, #4
 8007d22:	466a      	mov	r2, sp
 8007d24:	f7ff ffc8 	bl	8007cb8 <__swhatbuf_r>
 8007d28:	9900      	ldr	r1, [sp, #0]
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f000 f895 	bl	8007e5c <_malloc_r>
 8007d32:	b948      	cbnz	r0, 8007d48 <__smakebuf_r+0x44>
 8007d34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d38:	059a      	lsls	r2, r3, #22
 8007d3a:	d4ef      	bmi.n	8007d1c <__smakebuf_r+0x18>
 8007d3c:	f023 0303 	bic.w	r3, r3, #3
 8007d40:	f043 0302 	orr.w	r3, r3, #2
 8007d44:	81a3      	strh	r3, [r4, #12]
 8007d46:	e7e3      	b.n	8007d10 <__smakebuf_r+0xc>
 8007d48:	4b0d      	ldr	r3, [pc, #52]	; (8007d80 <__smakebuf_r+0x7c>)
 8007d4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d4c:	89a3      	ldrh	r3, [r4, #12]
 8007d4e:	6020      	str	r0, [r4, #0]
 8007d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d54:	81a3      	strh	r3, [r4, #12]
 8007d56:	9b00      	ldr	r3, [sp, #0]
 8007d58:	6163      	str	r3, [r4, #20]
 8007d5a:	9b01      	ldr	r3, [sp, #4]
 8007d5c:	6120      	str	r0, [r4, #16]
 8007d5e:	b15b      	cbz	r3, 8007d78 <__smakebuf_r+0x74>
 8007d60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d64:	4630      	mov	r0, r6
 8007d66:	f000 fc63 	bl	8008630 <_isatty_r>
 8007d6a:	b128      	cbz	r0, 8007d78 <__smakebuf_r+0x74>
 8007d6c:	89a3      	ldrh	r3, [r4, #12]
 8007d6e:	f023 0303 	bic.w	r3, r3, #3
 8007d72:	f043 0301 	orr.w	r3, r3, #1
 8007d76:	81a3      	strh	r3, [r4, #12]
 8007d78:	89a0      	ldrh	r0, [r4, #12]
 8007d7a:	4305      	orrs	r5, r0
 8007d7c:	81a5      	strh	r5, [r4, #12]
 8007d7e:	e7cd      	b.n	8007d1c <__smakebuf_r+0x18>
 8007d80:	08007b11 	.word	0x08007b11

08007d84 <_free_r>:
 8007d84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d86:	2900      	cmp	r1, #0
 8007d88:	d044      	beq.n	8007e14 <_free_r+0x90>
 8007d8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8e:	9001      	str	r0, [sp, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f1a1 0404 	sub.w	r4, r1, #4
 8007d96:	bfb8      	it	lt
 8007d98:	18e4      	addlt	r4, r4, r3
 8007d9a:	f000 fc6b 	bl	8008674 <__malloc_lock>
 8007d9e:	4a1e      	ldr	r2, [pc, #120]	; (8007e18 <_free_r+0x94>)
 8007da0:	9801      	ldr	r0, [sp, #4]
 8007da2:	6813      	ldr	r3, [r2, #0]
 8007da4:	b933      	cbnz	r3, 8007db4 <_free_r+0x30>
 8007da6:	6063      	str	r3, [r4, #4]
 8007da8:	6014      	str	r4, [r2, #0]
 8007daa:	b003      	add	sp, #12
 8007dac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007db0:	f000 bc66 	b.w	8008680 <__malloc_unlock>
 8007db4:	42a3      	cmp	r3, r4
 8007db6:	d908      	bls.n	8007dca <_free_r+0x46>
 8007db8:	6825      	ldr	r5, [r4, #0]
 8007dba:	1961      	adds	r1, r4, r5
 8007dbc:	428b      	cmp	r3, r1
 8007dbe:	bf01      	itttt	eq
 8007dc0:	6819      	ldreq	r1, [r3, #0]
 8007dc2:	685b      	ldreq	r3, [r3, #4]
 8007dc4:	1949      	addeq	r1, r1, r5
 8007dc6:	6021      	streq	r1, [r4, #0]
 8007dc8:	e7ed      	b.n	8007da6 <_free_r+0x22>
 8007dca:	461a      	mov	r2, r3
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	b10b      	cbz	r3, 8007dd4 <_free_r+0x50>
 8007dd0:	42a3      	cmp	r3, r4
 8007dd2:	d9fa      	bls.n	8007dca <_free_r+0x46>
 8007dd4:	6811      	ldr	r1, [r2, #0]
 8007dd6:	1855      	adds	r5, r2, r1
 8007dd8:	42a5      	cmp	r5, r4
 8007dda:	d10b      	bne.n	8007df4 <_free_r+0x70>
 8007ddc:	6824      	ldr	r4, [r4, #0]
 8007dde:	4421      	add	r1, r4
 8007de0:	1854      	adds	r4, r2, r1
 8007de2:	42a3      	cmp	r3, r4
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	d1e0      	bne.n	8007daa <_free_r+0x26>
 8007de8:	681c      	ldr	r4, [r3, #0]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	6053      	str	r3, [r2, #4]
 8007dee:	4421      	add	r1, r4
 8007df0:	6011      	str	r1, [r2, #0]
 8007df2:	e7da      	b.n	8007daa <_free_r+0x26>
 8007df4:	d902      	bls.n	8007dfc <_free_r+0x78>
 8007df6:	230c      	movs	r3, #12
 8007df8:	6003      	str	r3, [r0, #0]
 8007dfa:	e7d6      	b.n	8007daa <_free_r+0x26>
 8007dfc:	6825      	ldr	r5, [r4, #0]
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf04      	itt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	6063      	str	r3, [r4, #4]
 8007e0a:	bf04      	itt	eq
 8007e0c:	1949      	addeq	r1, r1, r5
 8007e0e:	6021      	streq	r1, [r4, #0]
 8007e10:	6054      	str	r4, [r2, #4]
 8007e12:	e7ca      	b.n	8007daa <_free_r+0x26>
 8007e14:	b003      	add	sp, #12
 8007e16:	bd30      	pop	{r4, r5, pc}
 8007e18:	240001a8 	.word	0x240001a8

08007e1c <sbrk_aligned>:
 8007e1c:	b570      	push	{r4, r5, r6, lr}
 8007e1e:	4e0e      	ldr	r6, [pc, #56]	; (8007e58 <sbrk_aligned+0x3c>)
 8007e20:	460c      	mov	r4, r1
 8007e22:	6831      	ldr	r1, [r6, #0]
 8007e24:	4605      	mov	r5, r0
 8007e26:	b911      	cbnz	r1, 8007e2e <sbrk_aligned+0x12>
 8007e28:	f000 fb7a 	bl	8008520 <_sbrk_r>
 8007e2c:	6030      	str	r0, [r6, #0]
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f000 fb75 	bl	8008520 <_sbrk_r>
 8007e36:	1c43      	adds	r3, r0, #1
 8007e38:	d00a      	beq.n	8007e50 <sbrk_aligned+0x34>
 8007e3a:	1cc4      	adds	r4, r0, #3
 8007e3c:	f024 0403 	bic.w	r4, r4, #3
 8007e40:	42a0      	cmp	r0, r4
 8007e42:	d007      	beq.n	8007e54 <sbrk_aligned+0x38>
 8007e44:	1a21      	subs	r1, r4, r0
 8007e46:	4628      	mov	r0, r5
 8007e48:	f000 fb6a 	bl	8008520 <_sbrk_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	d101      	bne.n	8007e54 <sbrk_aligned+0x38>
 8007e50:	f04f 34ff 	mov.w	r4, #4294967295
 8007e54:	4620      	mov	r0, r4
 8007e56:	bd70      	pop	{r4, r5, r6, pc}
 8007e58:	240001ac 	.word	0x240001ac

08007e5c <_malloc_r>:
 8007e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e60:	1ccd      	adds	r5, r1, #3
 8007e62:	f025 0503 	bic.w	r5, r5, #3
 8007e66:	3508      	adds	r5, #8
 8007e68:	2d0c      	cmp	r5, #12
 8007e6a:	bf38      	it	cc
 8007e6c:	250c      	movcc	r5, #12
 8007e6e:	2d00      	cmp	r5, #0
 8007e70:	4607      	mov	r7, r0
 8007e72:	db01      	blt.n	8007e78 <_malloc_r+0x1c>
 8007e74:	42a9      	cmp	r1, r5
 8007e76:	d905      	bls.n	8007e84 <_malloc_r+0x28>
 8007e78:	230c      	movs	r3, #12
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	2600      	movs	r6, #0
 8007e7e:	4630      	mov	r0, r6
 8007e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e84:	4e2e      	ldr	r6, [pc, #184]	; (8007f40 <_malloc_r+0xe4>)
 8007e86:	f000 fbf5 	bl	8008674 <__malloc_lock>
 8007e8a:	6833      	ldr	r3, [r6, #0]
 8007e8c:	461c      	mov	r4, r3
 8007e8e:	bb34      	cbnz	r4, 8007ede <_malloc_r+0x82>
 8007e90:	4629      	mov	r1, r5
 8007e92:	4638      	mov	r0, r7
 8007e94:	f7ff ffc2 	bl	8007e1c <sbrk_aligned>
 8007e98:	1c43      	adds	r3, r0, #1
 8007e9a:	4604      	mov	r4, r0
 8007e9c:	d14d      	bne.n	8007f3a <_malloc_r+0xde>
 8007e9e:	6834      	ldr	r4, [r6, #0]
 8007ea0:	4626      	mov	r6, r4
 8007ea2:	2e00      	cmp	r6, #0
 8007ea4:	d140      	bne.n	8007f28 <_malloc_r+0xcc>
 8007ea6:	6823      	ldr	r3, [r4, #0]
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	4638      	mov	r0, r7
 8007eac:	eb04 0803 	add.w	r8, r4, r3
 8007eb0:	f000 fb36 	bl	8008520 <_sbrk_r>
 8007eb4:	4580      	cmp	r8, r0
 8007eb6:	d13a      	bne.n	8007f2e <_malloc_r+0xd2>
 8007eb8:	6821      	ldr	r1, [r4, #0]
 8007eba:	3503      	adds	r5, #3
 8007ebc:	1a6d      	subs	r5, r5, r1
 8007ebe:	f025 0503 	bic.w	r5, r5, #3
 8007ec2:	3508      	adds	r5, #8
 8007ec4:	2d0c      	cmp	r5, #12
 8007ec6:	bf38      	it	cc
 8007ec8:	250c      	movcc	r5, #12
 8007eca:	4629      	mov	r1, r5
 8007ecc:	4638      	mov	r0, r7
 8007ece:	f7ff ffa5 	bl	8007e1c <sbrk_aligned>
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	d02b      	beq.n	8007f2e <_malloc_r+0xd2>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	442b      	add	r3, r5
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	e00e      	b.n	8007efc <_malloc_r+0xa0>
 8007ede:	6822      	ldr	r2, [r4, #0]
 8007ee0:	1b52      	subs	r2, r2, r5
 8007ee2:	d41e      	bmi.n	8007f22 <_malloc_r+0xc6>
 8007ee4:	2a0b      	cmp	r2, #11
 8007ee6:	d916      	bls.n	8007f16 <_malloc_r+0xba>
 8007ee8:	1961      	adds	r1, r4, r5
 8007eea:	42a3      	cmp	r3, r4
 8007eec:	6025      	str	r5, [r4, #0]
 8007eee:	bf18      	it	ne
 8007ef0:	6059      	strne	r1, [r3, #4]
 8007ef2:	6863      	ldr	r3, [r4, #4]
 8007ef4:	bf08      	it	eq
 8007ef6:	6031      	streq	r1, [r6, #0]
 8007ef8:	5162      	str	r2, [r4, r5]
 8007efa:	604b      	str	r3, [r1, #4]
 8007efc:	4638      	mov	r0, r7
 8007efe:	f104 060b 	add.w	r6, r4, #11
 8007f02:	f000 fbbd 	bl	8008680 <__malloc_unlock>
 8007f06:	f026 0607 	bic.w	r6, r6, #7
 8007f0a:	1d23      	adds	r3, r4, #4
 8007f0c:	1af2      	subs	r2, r6, r3
 8007f0e:	d0b6      	beq.n	8007e7e <_malloc_r+0x22>
 8007f10:	1b9b      	subs	r3, r3, r6
 8007f12:	50a3      	str	r3, [r4, r2]
 8007f14:	e7b3      	b.n	8007e7e <_malloc_r+0x22>
 8007f16:	6862      	ldr	r2, [r4, #4]
 8007f18:	42a3      	cmp	r3, r4
 8007f1a:	bf0c      	ite	eq
 8007f1c:	6032      	streq	r2, [r6, #0]
 8007f1e:	605a      	strne	r2, [r3, #4]
 8007f20:	e7ec      	b.n	8007efc <_malloc_r+0xa0>
 8007f22:	4623      	mov	r3, r4
 8007f24:	6864      	ldr	r4, [r4, #4]
 8007f26:	e7b2      	b.n	8007e8e <_malloc_r+0x32>
 8007f28:	4634      	mov	r4, r6
 8007f2a:	6876      	ldr	r6, [r6, #4]
 8007f2c:	e7b9      	b.n	8007ea2 <_malloc_r+0x46>
 8007f2e:	230c      	movs	r3, #12
 8007f30:	603b      	str	r3, [r7, #0]
 8007f32:	4638      	mov	r0, r7
 8007f34:	f000 fba4 	bl	8008680 <__malloc_unlock>
 8007f38:	e7a1      	b.n	8007e7e <_malloc_r+0x22>
 8007f3a:	6025      	str	r5, [r4, #0]
 8007f3c:	e7de      	b.n	8007efc <_malloc_r+0xa0>
 8007f3e:	bf00      	nop
 8007f40:	240001a8 	.word	0x240001a8

08007f44 <__sfputc_r>:
 8007f44:	6893      	ldr	r3, [r2, #8]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	b410      	push	{r4}
 8007f4c:	6093      	str	r3, [r2, #8]
 8007f4e:	da08      	bge.n	8007f62 <__sfputc_r+0x1e>
 8007f50:	6994      	ldr	r4, [r2, #24]
 8007f52:	42a3      	cmp	r3, r4
 8007f54:	db01      	blt.n	8007f5a <__sfputc_r+0x16>
 8007f56:	290a      	cmp	r1, #10
 8007f58:	d103      	bne.n	8007f62 <__sfputc_r+0x1e>
 8007f5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f5e:	f7ff bc31 	b.w	80077c4 <__swbuf_r>
 8007f62:	6813      	ldr	r3, [r2, #0]
 8007f64:	1c58      	adds	r0, r3, #1
 8007f66:	6010      	str	r0, [r2, #0]
 8007f68:	7019      	strb	r1, [r3, #0]
 8007f6a:	4608      	mov	r0, r1
 8007f6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f70:	4770      	bx	lr

08007f72 <__sfputs_r>:
 8007f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f74:	4606      	mov	r6, r0
 8007f76:	460f      	mov	r7, r1
 8007f78:	4614      	mov	r4, r2
 8007f7a:	18d5      	adds	r5, r2, r3
 8007f7c:	42ac      	cmp	r4, r5
 8007f7e:	d101      	bne.n	8007f84 <__sfputs_r+0x12>
 8007f80:	2000      	movs	r0, #0
 8007f82:	e007      	b.n	8007f94 <__sfputs_r+0x22>
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	463a      	mov	r2, r7
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f7ff ffda 	bl	8007f44 <__sfputc_r>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d1f3      	bne.n	8007f7c <__sfputs_r+0xa>
 8007f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f98 <_vfiprintf_r>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	b09d      	sub	sp, #116	; 0x74
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	4698      	mov	r8, r3
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	b118      	cbz	r0, 8007fb0 <_vfiprintf_r+0x18>
 8007fa8:	6983      	ldr	r3, [r0, #24]
 8007faa:	b90b      	cbnz	r3, 8007fb0 <_vfiprintf_r+0x18>
 8007fac:	f7ff fde4 	bl	8007b78 <__sinit>
 8007fb0:	4b89      	ldr	r3, [pc, #548]	; (80081d8 <_vfiprintf_r+0x240>)
 8007fb2:	429d      	cmp	r5, r3
 8007fb4:	d11b      	bne.n	8007fee <_vfiprintf_r+0x56>
 8007fb6:	6875      	ldr	r5, [r6, #4]
 8007fb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fba:	07d9      	lsls	r1, r3, #31
 8007fbc:	d405      	bmi.n	8007fca <_vfiprintf_r+0x32>
 8007fbe:	89ab      	ldrh	r3, [r5, #12]
 8007fc0:	059a      	lsls	r2, r3, #22
 8007fc2:	d402      	bmi.n	8007fca <_vfiprintf_r+0x32>
 8007fc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fc6:	f7ff fe75 	bl	8007cb4 <__retarget_lock_acquire_recursive>
 8007fca:	89ab      	ldrh	r3, [r5, #12]
 8007fcc:	071b      	lsls	r3, r3, #28
 8007fce:	d501      	bpl.n	8007fd4 <_vfiprintf_r+0x3c>
 8007fd0:	692b      	ldr	r3, [r5, #16]
 8007fd2:	b9eb      	cbnz	r3, 8008010 <_vfiprintf_r+0x78>
 8007fd4:	4629      	mov	r1, r5
 8007fd6:	4630      	mov	r0, r6
 8007fd8:	f7ff fc46 	bl	8007868 <__swsetup_r>
 8007fdc:	b1c0      	cbz	r0, 8008010 <_vfiprintf_r+0x78>
 8007fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fe0:	07dc      	lsls	r4, r3, #31
 8007fe2:	d50e      	bpl.n	8008002 <_vfiprintf_r+0x6a>
 8007fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe8:	b01d      	add	sp, #116	; 0x74
 8007fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fee:	4b7b      	ldr	r3, [pc, #492]	; (80081dc <_vfiprintf_r+0x244>)
 8007ff0:	429d      	cmp	r5, r3
 8007ff2:	d101      	bne.n	8007ff8 <_vfiprintf_r+0x60>
 8007ff4:	68b5      	ldr	r5, [r6, #8]
 8007ff6:	e7df      	b.n	8007fb8 <_vfiprintf_r+0x20>
 8007ff8:	4b79      	ldr	r3, [pc, #484]	; (80081e0 <_vfiprintf_r+0x248>)
 8007ffa:	429d      	cmp	r5, r3
 8007ffc:	bf08      	it	eq
 8007ffe:	68f5      	ldreq	r5, [r6, #12]
 8008000:	e7da      	b.n	8007fb8 <_vfiprintf_r+0x20>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	0598      	lsls	r0, r3, #22
 8008006:	d4ed      	bmi.n	8007fe4 <_vfiprintf_r+0x4c>
 8008008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800800a:	f7ff fe54 	bl	8007cb6 <__retarget_lock_release_recursive>
 800800e:	e7e9      	b.n	8007fe4 <_vfiprintf_r+0x4c>
 8008010:	2300      	movs	r3, #0
 8008012:	9309      	str	r3, [sp, #36]	; 0x24
 8008014:	2320      	movs	r3, #32
 8008016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800801a:	f8cd 800c 	str.w	r8, [sp, #12]
 800801e:	2330      	movs	r3, #48	; 0x30
 8008020:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80081e4 <_vfiprintf_r+0x24c>
 8008024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008028:	f04f 0901 	mov.w	r9, #1
 800802c:	4623      	mov	r3, r4
 800802e:	469a      	mov	sl, r3
 8008030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008034:	b10a      	cbz	r2, 800803a <_vfiprintf_r+0xa2>
 8008036:	2a25      	cmp	r2, #37	; 0x25
 8008038:	d1f9      	bne.n	800802e <_vfiprintf_r+0x96>
 800803a:	ebba 0b04 	subs.w	fp, sl, r4
 800803e:	d00b      	beq.n	8008058 <_vfiprintf_r+0xc0>
 8008040:	465b      	mov	r3, fp
 8008042:	4622      	mov	r2, r4
 8008044:	4629      	mov	r1, r5
 8008046:	4630      	mov	r0, r6
 8008048:	f7ff ff93 	bl	8007f72 <__sfputs_r>
 800804c:	3001      	adds	r0, #1
 800804e:	f000 80aa 	beq.w	80081a6 <_vfiprintf_r+0x20e>
 8008052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008054:	445a      	add	r2, fp
 8008056:	9209      	str	r2, [sp, #36]	; 0x24
 8008058:	f89a 3000 	ldrb.w	r3, [sl]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 80a2 	beq.w	80081a6 <_vfiprintf_r+0x20e>
 8008062:	2300      	movs	r3, #0
 8008064:	f04f 32ff 	mov.w	r2, #4294967295
 8008068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800806c:	f10a 0a01 	add.w	sl, sl, #1
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	9307      	str	r3, [sp, #28]
 8008074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008078:	931a      	str	r3, [sp, #104]	; 0x68
 800807a:	4654      	mov	r4, sl
 800807c:	2205      	movs	r2, #5
 800807e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008082:	4858      	ldr	r0, [pc, #352]	; (80081e4 <_vfiprintf_r+0x24c>)
 8008084:	f7f8 f934 	bl	80002f0 <memchr>
 8008088:	9a04      	ldr	r2, [sp, #16]
 800808a:	b9d8      	cbnz	r0, 80080c4 <_vfiprintf_r+0x12c>
 800808c:	06d1      	lsls	r1, r2, #27
 800808e:	bf44      	itt	mi
 8008090:	2320      	movmi	r3, #32
 8008092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008096:	0713      	lsls	r3, r2, #28
 8008098:	bf44      	itt	mi
 800809a:	232b      	movmi	r3, #43	; 0x2b
 800809c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080a0:	f89a 3000 	ldrb.w	r3, [sl]
 80080a4:	2b2a      	cmp	r3, #42	; 0x2a
 80080a6:	d015      	beq.n	80080d4 <_vfiprintf_r+0x13c>
 80080a8:	9a07      	ldr	r2, [sp, #28]
 80080aa:	4654      	mov	r4, sl
 80080ac:	2000      	movs	r0, #0
 80080ae:	f04f 0c0a 	mov.w	ip, #10
 80080b2:	4621      	mov	r1, r4
 80080b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080b8:	3b30      	subs	r3, #48	; 0x30
 80080ba:	2b09      	cmp	r3, #9
 80080bc:	d94e      	bls.n	800815c <_vfiprintf_r+0x1c4>
 80080be:	b1b0      	cbz	r0, 80080ee <_vfiprintf_r+0x156>
 80080c0:	9207      	str	r2, [sp, #28]
 80080c2:	e014      	b.n	80080ee <_vfiprintf_r+0x156>
 80080c4:	eba0 0308 	sub.w	r3, r0, r8
 80080c8:	fa09 f303 	lsl.w	r3, r9, r3
 80080cc:	4313      	orrs	r3, r2
 80080ce:	9304      	str	r3, [sp, #16]
 80080d0:	46a2      	mov	sl, r4
 80080d2:	e7d2      	b.n	800807a <_vfiprintf_r+0xe2>
 80080d4:	9b03      	ldr	r3, [sp, #12]
 80080d6:	1d19      	adds	r1, r3, #4
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	9103      	str	r1, [sp, #12]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	bfbb      	ittet	lt
 80080e0:	425b      	neglt	r3, r3
 80080e2:	f042 0202 	orrlt.w	r2, r2, #2
 80080e6:	9307      	strge	r3, [sp, #28]
 80080e8:	9307      	strlt	r3, [sp, #28]
 80080ea:	bfb8      	it	lt
 80080ec:	9204      	strlt	r2, [sp, #16]
 80080ee:	7823      	ldrb	r3, [r4, #0]
 80080f0:	2b2e      	cmp	r3, #46	; 0x2e
 80080f2:	d10c      	bne.n	800810e <_vfiprintf_r+0x176>
 80080f4:	7863      	ldrb	r3, [r4, #1]
 80080f6:	2b2a      	cmp	r3, #42	; 0x2a
 80080f8:	d135      	bne.n	8008166 <_vfiprintf_r+0x1ce>
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	1d1a      	adds	r2, r3, #4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	9203      	str	r2, [sp, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	bfb8      	it	lt
 8008106:	f04f 33ff 	movlt.w	r3, #4294967295
 800810a:	3402      	adds	r4, #2
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80081f4 <_vfiprintf_r+0x25c>
 8008112:	7821      	ldrb	r1, [r4, #0]
 8008114:	2203      	movs	r2, #3
 8008116:	4650      	mov	r0, sl
 8008118:	f7f8 f8ea 	bl	80002f0 <memchr>
 800811c:	b140      	cbz	r0, 8008130 <_vfiprintf_r+0x198>
 800811e:	2340      	movs	r3, #64	; 0x40
 8008120:	eba0 000a 	sub.w	r0, r0, sl
 8008124:	fa03 f000 	lsl.w	r0, r3, r0
 8008128:	9b04      	ldr	r3, [sp, #16]
 800812a:	4303      	orrs	r3, r0
 800812c:	3401      	adds	r4, #1
 800812e:	9304      	str	r3, [sp, #16]
 8008130:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008134:	482c      	ldr	r0, [pc, #176]	; (80081e8 <_vfiprintf_r+0x250>)
 8008136:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800813a:	2206      	movs	r2, #6
 800813c:	f7f8 f8d8 	bl	80002f0 <memchr>
 8008140:	2800      	cmp	r0, #0
 8008142:	d03f      	beq.n	80081c4 <_vfiprintf_r+0x22c>
 8008144:	4b29      	ldr	r3, [pc, #164]	; (80081ec <_vfiprintf_r+0x254>)
 8008146:	bb1b      	cbnz	r3, 8008190 <_vfiprintf_r+0x1f8>
 8008148:	9b03      	ldr	r3, [sp, #12]
 800814a:	3307      	adds	r3, #7
 800814c:	f023 0307 	bic.w	r3, r3, #7
 8008150:	3308      	adds	r3, #8
 8008152:	9303      	str	r3, [sp, #12]
 8008154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008156:	443b      	add	r3, r7
 8008158:	9309      	str	r3, [sp, #36]	; 0x24
 800815a:	e767      	b.n	800802c <_vfiprintf_r+0x94>
 800815c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008160:	460c      	mov	r4, r1
 8008162:	2001      	movs	r0, #1
 8008164:	e7a5      	b.n	80080b2 <_vfiprintf_r+0x11a>
 8008166:	2300      	movs	r3, #0
 8008168:	3401      	adds	r4, #1
 800816a:	9305      	str	r3, [sp, #20]
 800816c:	4619      	mov	r1, r3
 800816e:	f04f 0c0a 	mov.w	ip, #10
 8008172:	4620      	mov	r0, r4
 8008174:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008178:	3a30      	subs	r2, #48	; 0x30
 800817a:	2a09      	cmp	r2, #9
 800817c:	d903      	bls.n	8008186 <_vfiprintf_r+0x1ee>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0c5      	beq.n	800810e <_vfiprintf_r+0x176>
 8008182:	9105      	str	r1, [sp, #20]
 8008184:	e7c3      	b.n	800810e <_vfiprintf_r+0x176>
 8008186:	fb0c 2101 	mla	r1, ip, r1, r2
 800818a:	4604      	mov	r4, r0
 800818c:	2301      	movs	r3, #1
 800818e:	e7f0      	b.n	8008172 <_vfiprintf_r+0x1da>
 8008190:	ab03      	add	r3, sp, #12
 8008192:	9300      	str	r3, [sp, #0]
 8008194:	462a      	mov	r2, r5
 8008196:	4b16      	ldr	r3, [pc, #88]	; (80081f0 <_vfiprintf_r+0x258>)
 8008198:	a904      	add	r1, sp, #16
 800819a:	4630      	mov	r0, r6
 800819c:	f3af 8000 	nop.w
 80081a0:	4607      	mov	r7, r0
 80081a2:	1c78      	adds	r0, r7, #1
 80081a4:	d1d6      	bne.n	8008154 <_vfiprintf_r+0x1bc>
 80081a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081a8:	07d9      	lsls	r1, r3, #31
 80081aa:	d405      	bmi.n	80081b8 <_vfiprintf_r+0x220>
 80081ac:	89ab      	ldrh	r3, [r5, #12]
 80081ae:	059a      	lsls	r2, r3, #22
 80081b0:	d402      	bmi.n	80081b8 <_vfiprintf_r+0x220>
 80081b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b4:	f7ff fd7f 	bl	8007cb6 <__retarget_lock_release_recursive>
 80081b8:	89ab      	ldrh	r3, [r5, #12]
 80081ba:	065b      	lsls	r3, r3, #25
 80081bc:	f53f af12 	bmi.w	8007fe4 <_vfiprintf_r+0x4c>
 80081c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081c2:	e711      	b.n	8007fe8 <_vfiprintf_r+0x50>
 80081c4:	ab03      	add	r3, sp, #12
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	462a      	mov	r2, r5
 80081ca:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <_vfiprintf_r+0x258>)
 80081cc:	a904      	add	r1, sp, #16
 80081ce:	4630      	mov	r0, r6
 80081d0:	f000 f880 	bl	80082d4 <_printf_i>
 80081d4:	e7e4      	b.n	80081a0 <_vfiprintf_r+0x208>
 80081d6:	bf00      	nop
 80081d8:	08008750 	.word	0x08008750
 80081dc:	08008770 	.word	0x08008770
 80081e0:	08008730 	.word	0x08008730
 80081e4:	08008790 	.word	0x08008790
 80081e8:	0800879a 	.word	0x0800879a
 80081ec:	00000000 	.word	0x00000000
 80081f0:	08007f73 	.word	0x08007f73
 80081f4:	08008796 	.word	0x08008796

080081f8 <_printf_common>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	4616      	mov	r6, r2
 80081fe:	4699      	mov	r9, r3
 8008200:	688a      	ldr	r2, [r1, #8]
 8008202:	690b      	ldr	r3, [r1, #16]
 8008204:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008208:	4293      	cmp	r3, r2
 800820a:	bfb8      	it	lt
 800820c:	4613      	movlt	r3, r2
 800820e:	6033      	str	r3, [r6, #0]
 8008210:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008214:	4607      	mov	r7, r0
 8008216:	460c      	mov	r4, r1
 8008218:	b10a      	cbz	r2, 800821e <_printf_common+0x26>
 800821a:	3301      	adds	r3, #1
 800821c:	6033      	str	r3, [r6, #0]
 800821e:	6823      	ldr	r3, [r4, #0]
 8008220:	0699      	lsls	r1, r3, #26
 8008222:	bf42      	ittt	mi
 8008224:	6833      	ldrmi	r3, [r6, #0]
 8008226:	3302      	addmi	r3, #2
 8008228:	6033      	strmi	r3, [r6, #0]
 800822a:	6825      	ldr	r5, [r4, #0]
 800822c:	f015 0506 	ands.w	r5, r5, #6
 8008230:	d106      	bne.n	8008240 <_printf_common+0x48>
 8008232:	f104 0a19 	add.w	sl, r4, #25
 8008236:	68e3      	ldr	r3, [r4, #12]
 8008238:	6832      	ldr	r2, [r6, #0]
 800823a:	1a9b      	subs	r3, r3, r2
 800823c:	42ab      	cmp	r3, r5
 800823e:	dc26      	bgt.n	800828e <_printf_common+0x96>
 8008240:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008244:	1e13      	subs	r3, r2, #0
 8008246:	6822      	ldr	r2, [r4, #0]
 8008248:	bf18      	it	ne
 800824a:	2301      	movne	r3, #1
 800824c:	0692      	lsls	r2, r2, #26
 800824e:	d42b      	bmi.n	80082a8 <_printf_common+0xb0>
 8008250:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008254:	4649      	mov	r1, r9
 8008256:	4638      	mov	r0, r7
 8008258:	47c0      	blx	r8
 800825a:	3001      	adds	r0, #1
 800825c:	d01e      	beq.n	800829c <_printf_common+0xa4>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	68e5      	ldr	r5, [r4, #12]
 8008262:	6832      	ldr	r2, [r6, #0]
 8008264:	f003 0306 	and.w	r3, r3, #6
 8008268:	2b04      	cmp	r3, #4
 800826a:	bf08      	it	eq
 800826c:	1aad      	subeq	r5, r5, r2
 800826e:	68a3      	ldr	r3, [r4, #8]
 8008270:	6922      	ldr	r2, [r4, #16]
 8008272:	bf0c      	ite	eq
 8008274:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008278:	2500      	movne	r5, #0
 800827a:	4293      	cmp	r3, r2
 800827c:	bfc4      	itt	gt
 800827e:	1a9b      	subgt	r3, r3, r2
 8008280:	18ed      	addgt	r5, r5, r3
 8008282:	2600      	movs	r6, #0
 8008284:	341a      	adds	r4, #26
 8008286:	42b5      	cmp	r5, r6
 8008288:	d11a      	bne.n	80082c0 <_printf_common+0xc8>
 800828a:	2000      	movs	r0, #0
 800828c:	e008      	b.n	80082a0 <_printf_common+0xa8>
 800828e:	2301      	movs	r3, #1
 8008290:	4652      	mov	r2, sl
 8008292:	4649      	mov	r1, r9
 8008294:	4638      	mov	r0, r7
 8008296:	47c0      	blx	r8
 8008298:	3001      	adds	r0, #1
 800829a:	d103      	bne.n	80082a4 <_printf_common+0xac>
 800829c:	f04f 30ff 	mov.w	r0, #4294967295
 80082a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082a4:	3501      	adds	r5, #1
 80082a6:	e7c6      	b.n	8008236 <_printf_common+0x3e>
 80082a8:	18e1      	adds	r1, r4, r3
 80082aa:	1c5a      	adds	r2, r3, #1
 80082ac:	2030      	movs	r0, #48	; 0x30
 80082ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082b2:	4422      	add	r2, r4
 80082b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082bc:	3302      	adds	r3, #2
 80082be:	e7c7      	b.n	8008250 <_printf_common+0x58>
 80082c0:	2301      	movs	r3, #1
 80082c2:	4622      	mov	r2, r4
 80082c4:	4649      	mov	r1, r9
 80082c6:	4638      	mov	r0, r7
 80082c8:	47c0      	blx	r8
 80082ca:	3001      	adds	r0, #1
 80082cc:	d0e6      	beq.n	800829c <_printf_common+0xa4>
 80082ce:	3601      	adds	r6, #1
 80082d0:	e7d9      	b.n	8008286 <_printf_common+0x8e>
	...

080082d4 <_printf_i>:
 80082d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80082d8:	7e0f      	ldrb	r7, [r1, #24]
 80082da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80082dc:	2f78      	cmp	r7, #120	; 0x78
 80082de:	4691      	mov	r9, r2
 80082e0:	4680      	mov	r8, r0
 80082e2:	460c      	mov	r4, r1
 80082e4:	469a      	mov	sl, r3
 80082e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80082ea:	d807      	bhi.n	80082fc <_printf_i+0x28>
 80082ec:	2f62      	cmp	r7, #98	; 0x62
 80082ee:	d80a      	bhi.n	8008306 <_printf_i+0x32>
 80082f0:	2f00      	cmp	r7, #0
 80082f2:	f000 80d8 	beq.w	80084a6 <_printf_i+0x1d2>
 80082f6:	2f58      	cmp	r7, #88	; 0x58
 80082f8:	f000 80a3 	beq.w	8008442 <_printf_i+0x16e>
 80082fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008300:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008304:	e03a      	b.n	800837c <_printf_i+0xa8>
 8008306:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800830a:	2b15      	cmp	r3, #21
 800830c:	d8f6      	bhi.n	80082fc <_printf_i+0x28>
 800830e:	a101      	add	r1, pc, #4	; (adr r1, 8008314 <_printf_i+0x40>)
 8008310:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008314:	0800836d 	.word	0x0800836d
 8008318:	08008381 	.word	0x08008381
 800831c:	080082fd 	.word	0x080082fd
 8008320:	080082fd 	.word	0x080082fd
 8008324:	080082fd 	.word	0x080082fd
 8008328:	080082fd 	.word	0x080082fd
 800832c:	08008381 	.word	0x08008381
 8008330:	080082fd 	.word	0x080082fd
 8008334:	080082fd 	.word	0x080082fd
 8008338:	080082fd 	.word	0x080082fd
 800833c:	080082fd 	.word	0x080082fd
 8008340:	0800848d 	.word	0x0800848d
 8008344:	080083b1 	.word	0x080083b1
 8008348:	0800846f 	.word	0x0800846f
 800834c:	080082fd 	.word	0x080082fd
 8008350:	080082fd 	.word	0x080082fd
 8008354:	080084af 	.word	0x080084af
 8008358:	080082fd 	.word	0x080082fd
 800835c:	080083b1 	.word	0x080083b1
 8008360:	080082fd 	.word	0x080082fd
 8008364:	080082fd 	.word	0x080082fd
 8008368:	08008477 	.word	0x08008477
 800836c:	682b      	ldr	r3, [r5, #0]
 800836e:	1d1a      	adds	r2, r3, #4
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	602a      	str	r2, [r5, #0]
 8008374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008378:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800837c:	2301      	movs	r3, #1
 800837e:	e0a3      	b.n	80084c8 <_printf_i+0x1f4>
 8008380:	6820      	ldr	r0, [r4, #0]
 8008382:	6829      	ldr	r1, [r5, #0]
 8008384:	0606      	lsls	r6, r0, #24
 8008386:	f101 0304 	add.w	r3, r1, #4
 800838a:	d50a      	bpl.n	80083a2 <_printf_i+0xce>
 800838c:	680e      	ldr	r6, [r1, #0]
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	2e00      	cmp	r6, #0
 8008392:	da03      	bge.n	800839c <_printf_i+0xc8>
 8008394:	232d      	movs	r3, #45	; 0x2d
 8008396:	4276      	negs	r6, r6
 8008398:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800839c:	485e      	ldr	r0, [pc, #376]	; (8008518 <_printf_i+0x244>)
 800839e:	230a      	movs	r3, #10
 80083a0:	e019      	b.n	80083d6 <_printf_i+0x102>
 80083a2:	680e      	ldr	r6, [r1, #0]
 80083a4:	602b      	str	r3, [r5, #0]
 80083a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80083aa:	bf18      	it	ne
 80083ac:	b236      	sxthne	r6, r6
 80083ae:	e7ef      	b.n	8008390 <_printf_i+0xbc>
 80083b0:	682b      	ldr	r3, [r5, #0]
 80083b2:	6820      	ldr	r0, [r4, #0]
 80083b4:	1d19      	adds	r1, r3, #4
 80083b6:	6029      	str	r1, [r5, #0]
 80083b8:	0601      	lsls	r1, r0, #24
 80083ba:	d501      	bpl.n	80083c0 <_printf_i+0xec>
 80083bc:	681e      	ldr	r6, [r3, #0]
 80083be:	e002      	b.n	80083c6 <_printf_i+0xf2>
 80083c0:	0646      	lsls	r6, r0, #25
 80083c2:	d5fb      	bpl.n	80083bc <_printf_i+0xe8>
 80083c4:	881e      	ldrh	r6, [r3, #0]
 80083c6:	4854      	ldr	r0, [pc, #336]	; (8008518 <_printf_i+0x244>)
 80083c8:	2f6f      	cmp	r7, #111	; 0x6f
 80083ca:	bf0c      	ite	eq
 80083cc:	2308      	moveq	r3, #8
 80083ce:	230a      	movne	r3, #10
 80083d0:	2100      	movs	r1, #0
 80083d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083d6:	6865      	ldr	r5, [r4, #4]
 80083d8:	60a5      	str	r5, [r4, #8]
 80083da:	2d00      	cmp	r5, #0
 80083dc:	bfa2      	ittt	ge
 80083de:	6821      	ldrge	r1, [r4, #0]
 80083e0:	f021 0104 	bicge.w	r1, r1, #4
 80083e4:	6021      	strge	r1, [r4, #0]
 80083e6:	b90e      	cbnz	r6, 80083ec <_printf_i+0x118>
 80083e8:	2d00      	cmp	r5, #0
 80083ea:	d04d      	beq.n	8008488 <_printf_i+0x1b4>
 80083ec:	4615      	mov	r5, r2
 80083ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80083f2:	fb03 6711 	mls	r7, r3, r1, r6
 80083f6:	5dc7      	ldrb	r7, [r0, r7]
 80083f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80083fc:	4637      	mov	r7, r6
 80083fe:	42bb      	cmp	r3, r7
 8008400:	460e      	mov	r6, r1
 8008402:	d9f4      	bls.n	80083ee <_printf_i+0x11a>
 8008404:	2b08      	cmp	r3, #8
 8008406:	d10b      	bne.n	8008420 <_printf_i+0x14c>
 8008408:	6823      	ldr	r3, [r4, #0]
 800840a:	07de      	lsls	r6, r3, #31
 800840c:	d508      	bpl.n	8008420 <_printf_i+0x14c>
 800840e:	6923      	ldr	r3, [r4, #16]
 8008410:	6861      	ldr	r1, [r4, #4]
 8008412:	4299      	cmp	r1, r3
 8008414:	bfde      	ittt	le
 8008416:	2330      	movle	r3, #48	; 0x30
 8008418:	f805 3c01 	strble.w	r3, [r5, #-1]
 800841c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008420:	1b52      	subs	r2, r2, r5
 8008422:	6122      	str	r2, [r4, #16]
 8008424:	f8cd a000 	str.w	sl, [sp]
 8008428:	464b      	mov	r3, r9
 800842a:	aa03      	add	r2, sp, #12
 800842c:	4621      	mov	r1, r4
 800842e:	4640      	mov	r0, r8
 8008430:	f7ff fee2 	bl	80081f8 <_printf_common>
 8008434:	3001      	adds	r0, #1
 8008436:	d14c      	bne.n	80084d2 <_printf_i+0x1fe>
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	b004      	add	sp, #16
 800843e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008442:	4835      	ldr	r0, [pc, #212]	; (8008518 <_printf_i+0x244>)
 8008444:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008448:	6829      	ldr	r1, [r5, #0]
 800844a:	6823      	ldr	r3, [r4, #0]
 800844c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008450:	6029      	str	r1, [r5, #0]
 8008452:	061d      	lsls	r5, r3, #24
 8008454:	d514      	bpl.n	8008480 <_printf_i+0x1ac>
 8008456:	07df      	lsls	r7, r3, #31
 8008458:	bf44      	itt	mi
 800845a:	f043 0320 	orrmi.w	r3, r3, #32
 800845e:	6023      	strmi	r3, [r4, #0]
 8008460:	b91e      	cbnz	r6, 800846a <_printf_i+0x196>
 8008462:	6823      	ldr	r3, [r4, #0]
 8008464:	f023 0320 	bic.w	r3, r3, #32
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	2310      	movs	r3, #16
 800846c:	e7b0      	b.n	80083d0 <_printf_i+0xfc>
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	f043 0320 	orr.w	r3, r3, #32
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	2378      	movs	r3, #120	; 0x78
 8008478:	4828      	ldr	r0, [pc, #160]	; (800851c <_printf_i+0x248>)
 800847a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800847e:	e7e3      	b.n	8008448 <_printf_i+0x174>
 8008480:	0659      	lsls	r1, r3, #25
 8008482:	bf48      	it	mi
 8008484:	b2b6      	uxthmi	r6, r6
 8008486:	e7e6      	b.n	8008456 <_printf_i+0x182>
 8008488:	4615      	mov	r5, r2
 800848a:	e7bb      	b.n	8008404 <_printf_i+0x130>
 800848c:	682b      	ldr	r3, [r5, #0]
 800848e:	6826      	ldr	r6, [r4, #0]
 8008490:	6961      	ldr	r1, [r4, #20]
 8008492:	1d18      	adds	r0, r3, #4
 8008494:	6028      	str	r0, [r5, #0]
 8008496:	0635      	lsls	r5, r6, #24
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	d501      	bpl.n	80084a0 <_printf_i+0x1cc>
 800849c:	6019      	str	r1, [r3, #0]
 800849e:	e002      	b.n	80084a6 <_printf_i+0x1d2>
 80084a0:	0670      	lsls	r0, r6, #25
 80084a2:	d5fb      	bpl.n	800849c <_printf_i+0x1c8>
 80084a4:	8019      	strh	r1, [r3, #0]
 80084a6:	2300      	movs	r3, #0
 80084a8:	6123      	str	r3, [r4, #16]
 80084aa:	4615      	mov	r5, r2
 80084ac:	e7ba      	b.n	8008424 <_printf_i+0x150>
 80084ae:	682b      	ldr	r3, [r5, #0]
 80084b0:	1d1a      	adds	r2, r3, #4
 80084b2:	602a      	str	r2, [r5, #0]
 80084b4:	681d      	ldr	r5, [r3, #0]
 80084b6:	6862      	ldr	r2, [r4, #4]
 80084b8:	2100      	movs	r1, #0
 80084ba:	4628      	mov	r0, r5
 80084bc:	f7f7 ff18 	bl	80002f0 <memchr>
 80084c0:	b108      	cbz	r0, 80084c6 <_printf_i+0x1f2>
 80084c2:	1b40      	subs	r0, r0, r5
 80084c4:	6060      	str	r0, [r4, #4]
 80084c6:	6863      	ldr	r3, [r4, #4]
 80084c8:	6123      	str	r3, [r4, #16]
 80084ca:	2300      	movs	r3, #0
 80084cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80084d0:	e7a8      	b.n	8008424 <_printf_i+0x150>
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	462a      	mov	r2, r5
 80084d6:	4649      	mov	r1, r9
 80084d8:	4640      	mov	r0, r8
 80084da:	47d0      	blx	sl
 80084dc:	3001      	adds	r0, #1
 80084de:	d0ab      	beq.n	8008438 <_printf_i+0x164>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	079b      	lsls	r3, r3, #30
 80084e4:	d413      	bmi.n	800850e <_printf_i+0x23a>
 80084e6:	68e0      	ldr	r0, [r4, #12]
 80084e8:	9b03      	ldr	r3, [sp, #12]
 80084ea:	4298      	cmp	r0, r3
 80084ec:	bfb8      	it	lt
 80084ee:	4618      	movlt	r0, r3
 80084f0:	e7a4      	b.n	800843c <_printf_i+0x168>
 80084f2:	2301      	movs	r3, #1
 80084f4:	4632      	mov	r2, r6
 80084f6:	4649      	mov	r1, r9
 80084f8:	4640      	mov	r0, r8
 80084fa:	47d0      	blx	sl
 80084fc:	3001      	adds	r0, #1
 80084fe:	d09b      	beq.n	8008438 <_printf_i+0x164>
 8008500:	3501      	adds	r5, #1
 8008502:	68e3      	ldr	r3, [r4, #12]
 8008504:	9903      	ldr	r1, [sp, #12]
 8008506:	1a5b      	subs	r3, r3, r1
 8008508:	42ab      	cmp	r3, r5
 800850a:	dcf2      	bgt.n	80084f2 <_printf_i+0x21e>
 800850c:	e7eb      	b.n	80084e6 <_printf_i+0x212>
 800850e:	2500      	movs	r5, #0
 8008510:	f104 0619 	add.w	r6, r4, #25
 8008514:	e7f5      	b.n	8008502 <_printf_i+0x22e>
 8008516:	bf00      	nop
 8008518:	080087a1 	.word	0x080087a1
 800851c:	080087b2 	.word	0x080087b2

08008520 <_sbrk_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4d06      	ldr	r5, [pc, #24]	; (800853c <_sbrk_r+0x1c>)
 8008524:	2300      	movs	r3, #0
 8008526:	4604      	mov	r4, r0
 8008528:	4608      	mov	r0, r1
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	f7f8 fca0 	bl	8000e70 <_sbrk>
 8008530:	1c43      	adds	r3, r0, #1
 8008532:	d102      	bne.n	800853a <_sbrk_r+0x1a>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	b103      	cbz	r3, 800853a <_sbrk_r+0x1a>
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	bd38      	pop	{r3, r4, r5, pc}
 800853c:	240001b0 	.word	0x240001b0

08008540 <__sread>:
 8008540:	b510      	push	{r4, lr}
 8008542:	460c      	mov	r4, r1
 8008544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008548:	f000 f8a0 	bl	800868c <_read_r>
 800854c:	2800      	cmp	r0, #0
 800854e:	bfab      	itete	ge
 8008550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008552:	89a3      	ldrhlt	r3, [r4, #12]
 8008554:	181b      	addge	r3, r3, r0
 8008556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800855a:	bfac      	ite	ge
 800855c:	6563      	strge	r3, [r4, #84]	; 0x54
 800855e:	81a3      	strhlt	r3, [r4, #12]
 8008560:	bd10      	pop	{r4, pc}

08008562 <__swrite>:
 8008562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008566:	461f      	mov	r7, r3
 8008568:	898b      	ldrh	r3, [r1, #12]
 800856a:	05db      	lsls	r3, r3, #23
 800856c:	4605      	mov	r5, r0
 800856e:	460c      	mov	r4, r1
 8008570:	4616      	mov	r6, r2
 8008572:	d505      	bpl.n	8008580 <__swrite+0x1e>
 8008574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008578:	2302      	movs	r3, #2
 800857a:	2200      	movs	r2, #0
 800857c:	f000 f868 	bl	8008650 <_lseek_r>
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	4632      	mov	r2, r6
 800858e:	463b      	mov	r3, r7
 8008590:	4628      	mov	r0, r5
 8008592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008596:	f000 b817 	b.w	80085c8 <_write_r>

0800859a <__sseek>:
 800859a:	b510      	push	{r4, lr}
 800859c:	460c      	mov	r4, r1
 800859e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a2:	f000 f855 	bl	8008650 <_lseek_r>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	bf15      	itete	ne
 80085ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80085ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80085b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80085b6:	81a3      	strheq	r3, [r4, #12]
 80085b8:	bf18      	it	ne
 80085ba:	81a3      	strhne	r3, [r4, #12]
 80085bc:	bd10      	pop	{r4, pc}

080085be <__sclose>:
 80085be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c2:	f000 b813 	b.w	80085ec <_close_r>
	...

080085c8 <_write_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4d07      	ldr	r5, [pc, #28]	; (80085e8 <_write_r+0x20>)
 80085cc:	4604      	mov	r4, r0
 80085ce:	4608      	mov	r0, r1
 80085d0:	4611      	mov	r1, r2
 80085d2:	2200      	movs	r2, #0
 80085d4:	602a      	str	r2, [r5, #0]
 80085d6:	461a      	mov	r2, r3
 80085d8:	f7f8 fbf9 	bl	8000dce <_write>
 80085dc:	1c43      	adds	r3, r0, #1
 80085de:	d102      	bne.n	80085e6 <_write_r+0x1e>
 80085e0:	682b      	ldr	r3, [r5, #0]
 80085e2:	b103      	cbz	r3, 80085e6 <_write_r+0x1e>
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	bd38      	pop	{r3, r4, r5, pc}
 80085e8:	240001b0 	.word	0x240001b0

080085ec <_close_r>:
 80085ec:	b538      	push	{r3, r4, r5, lr}
 80085ee:	4d06      	ldr	r5, [pc, #24]	; (8008608 <_close_r+0x1c>)
 80085f0:	2300      	movs	r3, #0
 80085f2:	4604      	mov	r4, r0
 80085f4:	4608      	mov	r0, r1
 80085f6:	602b      	str	r3, [r5, #0]
 80085f8:	f7f8 fc05 	bl	8000e06 <_close>
 80085fc:	1c43      	adds	r3, r0, #1
 80085fe:	d102      	bne.n	8008606 <_close_r+0x1a>
 8008600:	682b      	ldr	r3, [r5, #0]
 8008602:	b103      	cbz	r3, 8008606 <_close_r+0x1a>
 8008604:	6023      	str	r3, [r4, #0]
 8008606:	bd38      	pop	{r3, r4, r5, pc}
 8008608:	240001b0 	.word	0x240001b0

0800860c <_fstat_r>:
 800860c:	b538      	push	{r3, r4, r5, lr}
 800860e:	4d07      	ldr	r5, [pc, #28]	; (800862c <_fstat_r+0x20>)
 8008610:	2300      	movs	r3, #0
 8008612:	4604      	mov	r4, r0
 8008614:	4608      	mov	r0, r1
 8008616:	4611      	mov	r1, r2
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	f7f8 fc00 	bl	8000e1e <_fstat>
 800861e:	1c43      	adds	r3, r0, #1
 8008620:	d102      	bne.n	8008628 <_fstat_r+0x1c>
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	b103      	cbz	r3, 8008628 <_fstat_r+0x1c>
 8008626:	6023      	str	r3, [r4, #0]
 8008628:	bd38      	pop	{r3, r4, r5, pc}
 800862a:	bf00      	nop
 800862c:	240001b0 	.word	0x240001b0

08008630 <_isatty_r>:
 8008630:	b538      	push	{r3, r4, r5, lr}
 8008632:	4d06      	ldr	r5, [pc, #24]	; (800864c <_isatty_r+0x1c>)
 8008634:	2300      	movs	r3, #0
 8008636:	4604      	mov	r4, r0
 8008638:	4608      	mov	r0, r1
 800863a:	602b      	str	r3, [r5, #0]
 800863c:	f7f8 fbff 	bl	8000e3e <_isatty>
 8008640:	1c43      	adds	r3, r0, #1
 8008642:	d102      	bne.n	800864a <_isatty_r+0x1a>
 8008644:	682b      	ldr	r3, [r5, #0]
 8008646:	b103      	cbz	r3, 800864a <_isatty_r+0x1a>
 8008648:	6023      	str	r3, [r4, #0]
 800864a:	bd38      	pop	{r3, r4, r5, pc}
 800864c:	240001b0 	.word	0x240001b0

08008650 <_lseek_r>:
 8008650:	b538      	push	{r3, r4, r5, lr}
 8008652:	4d07      	ldr	r5, [pc, #28]	; (8008670 <_lseek_r+0x20>)
 8008654:	4604      	mov	r4, r0
 8008656:	4608      	mov	r0, r1
 8008658:	4611      	mov	r1, r2
 800865a:	2200      	movs	r2, #0
 800865c:	602a      	str	r2, [r5, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	f7f8 fbf8 	bl	8000e54 <_lseek>
 8008664:	1c43      	adds	r3, r0, #1
 8008666:	d102      	bne.n	800866e <_lseek_r+0x1e>
 8008668:	682b      	ldr	r3, [r5, #0]
 800866a:	b103      	cbz	r3, 800866e <_lseek_r+0x1e>
 800866c:	6023      	str	r3, [r4, #0]
 800866e:	bd38      	pop	{r3, r4, r5, pc}
 8008670:	240001b0 	.word	0x240001b0

08008674 <__malloc_lock>:
 8008674:	4801      	ldr	r0, [pc, #4]	; (800867c <__malloc_lock+0x8>)
 8008676:	f7ff bb1d 	b.w	8007cb4 <__retarget_lock_acquire_recursive>
 800867a:	bf00      	nop
 800867c:	240001a4 	.word	0x240001a4

08008680 <__malloc_unlock>:
 8008680:	4801      	ldr	r0, [pc, #4]	; (8008688 <__malloc_unlock+0x8>)
 8008682:	f7ff bb18 	b.w	8007cb6 <__retarget_lock_release_recursive>
 8008686:	bf00      	nop
 8008688:	240001a4 	.word	0x240001a4

0800868c <_read_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d07      	ldr	r5, [pc, #28]	; (80086ac <_read_r+0x20>)
 8008690:	4604      	mov	r4, r0
 8008692:	4608      	mov	r0, r1
 8008694:	4611      	mov	r1, r2
 8008696:	2200      	movs	r2, #0
 8008698:	602a      	str	r2, [r5, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	f7f8 fb7a 	bl	8000d94 <_read>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_read_r+0x1e>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_read_r+0x1e>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	240001b0 	.word	0x240001b0

080086b0 <_init>:
 80086b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086b2:	bf00      	nop
 80086b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b6:	bc08      	pop	{r3}
 80086b8:	469e      	mov	lr, r3
 80086ba:	4770      	bx	lr

080086bc <_fini>:
 80086bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086be:	bf00      	nop
 80086c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086c2:	bc08      	pop	{r3}
 80086c4:	469e      	mov	lr, r3
 80086c6:	4770      	bx	lr
