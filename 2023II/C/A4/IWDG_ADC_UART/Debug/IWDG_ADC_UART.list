
IWDG_ADC_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fcc  080002ac  080002ac  000102ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08008278  08008278  00018278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08008330  08008330  00018330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008338  08008338  00018338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800833c  0800833c  0001833c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  24000000  08008340  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000140  24000074  080083b4  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001b4  080083b4  000201b4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001563b  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a62  00000000  00000000  000356dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e98  00000000  00000000  00038140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00000d70  00000000  00000000  00038fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00032f17  00000000  00000000  00039d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00014710  00000000  00000000  0006cc5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014a0bd  00000000  00000000  0008136f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001cb42c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000041f0  00000000  00000000  001cb47c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	; (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	; (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	; (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000074 	.word	0x24000074
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08008260 	.word	0x08008260

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	; (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	; (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	24000078 	.word	0x24000078
 80002e8:	08008260 	.word	0x08008260

080002ec <__aeabi_uldivmod>:
 80002ec:	b953      	cbnz	r3, 8000304 <__aeabi_uldivmod+0x18>
 80002ee:	b94a      	cbnz	r2, 8000304 <__aeabi_uldivmod+0x18>
 80002f0:	2900      	cmp	r1, #0
 80002f2:	bf08      	it	eq
 80002f4:	2800      	cmpeq	r0, #0
 80002f6:	bf1c      	itt	ne
 80002f8:	f04f 31ff 	movne.w	r1, #4294967295
 80002fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000300:	f000 b974 	b.w	80005ec <__aeabi_idiv0>
 8000304:	f1ad 0c08 	sub.w	ip, sp, #8
 8000308:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800030c:	f000 f806 	bl	800031c <__udivmoddi4>
 8000310:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000318:	b004      	add	sp, #16
 800031a:	4770      	bx	lr

0800031c <__udivmoddi4>:
 800031c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000320:	9d08      	ldr	r5, [sp, #32]
 8000322:	4604      	mov	r4, r0
 8000324:	468e      	mov	lr, r1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d14d      	bne.n	80003c6 <__udivmoddi4+0xaa>
 800032a:	428a      	cmp	r2, r1
 800032c:	4694      	mov	ip, r2
 800032e:	d969      	bls.n	8000404 <__udivmoddi4+0xe8>
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	b152      	cbz	r2, 800034c <__udivmoddi4+0x30>
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	f1c2 0120 	rsb	r1, r2, #32
 800033e:	fa20 f101 	lsr.w	r1, r0, r1
 8000342:	fa0c fc02 	lsl.w	ip, ip, r2
 8000346:	ea41 0e03 	orr.w	lr, r1, r3
 800034a:	4094      	lsls	r4, r2
 800034c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000350:	0c21      	lsrs	r1, r4, #16
 8000352:	fbbe f6f8 	udiv	r6, lr, r8
 8000356:	fa1f f78c 	uxth.w	r7, ip
 800035a:	fb08 e316 	mls	r3, r8, r6, lr
 800035e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000362:	fb06 f107 	mul.w	r1, r6, r7
 8000366:	4299      	cmp	r1, r3
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x64>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 811f 	bcs.w	80005b4 <__udivmoddi4+0x298>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 811c 	bls.w	80005b4 <__udivmoddi4+0x298>
 800037c:	3e02      	subs	r6, #2
 800037e:	4463      	add	r3, ip
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 f707 	mul.w	r7, r0, r7
 8000394:	42a7      	cmp	r7, r4
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x92>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a0:	f080 810a 	bcs.w	80005b8 <__udivmoddi4+0x29c>
 80003a4:	42a7      	cmp	r7, r4
 80003a6:	f240 8107 	bls.w	80005b8 <__udivmoddi4+0x29c>
 80003aa:	4464      	add	r4, ip
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b2:	1be4      	subs	r4, r4, r7
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa4>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xc2>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80ef 	beq.w	80005ae <__udivmoddi4+0x292>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x160>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd4>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80f9 	bhi.w	80005e2 <__udivmoddi4+0x2c6>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	469e      	mov	lr, r3
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa4>
 80003fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa4>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xec>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 8092 	bne.w	8000536 <__udivmoddi4+0x21a>
 8000412:	eba1 010c 	sub.w	r1, r1, ip
 8000416:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	2601      	movs	r6, #1
 8000420:	0c20      	lsrs	r0, r4, #16
 8000422:	fbb1 f3f7 	udiv	r3, r1, r7
 8000426:	fb07 1113 	mls	r1, r7, r3, r1
 800042a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042e:	fb0e f003 	mul.w	r0, lr, r3
 8000432:	4288      	cmp	r0, r1
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x12c>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f103 38ff 	add.w	r8, r3, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x12a>
 8000440:	4288      	cmp	r0, r1
 8000442:	f200 80cb 	bhi.w	80005dc <__udivmoddi4+0x2c0>
 8000446:	4643      	mov	r3, r8
 8000448:	1a09      	subs	r1, r1, r0
 800044a:	b2a4      	uxth	r4, r4
 800044c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000450:	fb07 1110 	mls	r1, r7, r0, r1
 8000454:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000458:	fb0e fe00 	mul.w	lr, lr, r0
 800045c:	45a6      	cmp	lr, r4
 800045e:	d908      	bls.n	8000472 <__udivmoddi4+0x156>
 8000460:	eb1c 0404 	adds.w	r4, ip, r4
 8000464:	f100 31ff 	add.w	r1, r0, #4294967295
 8000468:	d202      	bcs.n	8000470 <__udivmoddi4+0x154>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f200 80bb 	bhi.w	80005e6 <__udivmoddi4+0x2ca>
 8000470:	4608      	mov	r0, r1
 8000472:	eba4 040e 	sub.w	r4, r4, lr
 8000476:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047a:	e79c      	b.n	80003b6 <__udivmoddi4+0x9a>
 800047c:	f1c6 0720 	rsb	r7, r6, #32
 8000480:	40b3      	lsls	r3, r6
 8000482:	fa22 fc07 	lsr.w	ip, r2, r7
 8000486:	ea4c 0c03 	orr.w	ip, ip, r3
 800048a:	fa20 f407 	lsr.w	r4, r0, r7
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	431c      	orrs	r4, r3
 8000494:	40f9      	lsrs	r1, r7
 8000496:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049a:	fa00 f306 	lsl.w	r3, r0, r6
 800049e:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a2:	0c20      	lsrs	r0, r4, #16
 80004a4:	fa1f fe8c 	uxth.w	lr, ip
 80004a8:	fb09 1118 	mls	r1, r9, r8, r1
 80004ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b0:	fb08 f00e 	mul.w	r0, r8, lr
 80004b4:	4288      	cmp	r0, r1
 80004b6:	fa02 f206 	lsl.w	r2, r2, r6
 80004ba:	d90b      	bls.n	80004d4 <__udivmoddi4+0x1b8>
 80004bc:	eb1c 0101 	adds.w	r1, ip, r1
 80004c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c4:	f080 8088 	bcs.w	80005d8 <__udivmoddi4+0x2bc>
 80004c8:	4288      	cmp	r0, r1
 80004ca:	f240 8085 	bls.w	80005d8 <__udivmoddi4+0x2bc>
 80004ce:	f1a8 0802 	sub.w	r8, r8, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	1a09      	subs	r1, r1, r0
 80004d6:	b2a4      	uxth	r4, r4
 80004d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80004dc:	fb09 1110 	mls	r1, r9, r0, r1
 80004e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80004e8:	458e      	cmp	lr, r1
 80004ea:	d908      	bls.n	80004fe <__udivmoddi4+0x1e2>
 80004ec:	eb1c 0101 	adds.w	r1, ip, r1
 80004f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f4:	d26c      	bcs.n	80005d0 <__udivmoddi4+0x2b4>
 80004f6:	458e      	cmp	lr, r1
 80004f8:	d96a      	bls.n	80005d0 <__udivmoddi4+0x2b4>
 80004fa:	3802      	subs	r0, #2
 80004fc:	4461      	add	r1, ip
 80004fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000502:	fba0 9402 	umull	r9, r4, r0, r2
 8000506:	eba1 010e 	sub.w	r1, r1, lr
 800050a:	42a1      	cmp	r1, r4
 800050c:	46c8      	mov	r8, r9
 800050e:	46a6      	mov	lr, r4
 8000510:	d356      	bcc.n	80005c0 <__udivmoddi4+0x2a4>
 8000512:	d053      	beq.n	80005bc <__udivmoddi4+0x2a0>
 8000514:	b15d      	cbz	r5, 800052e <__udivmoddi4+0x212>
 8000516:	ebb3 0208 	subs.w	r2, r3, r8
 800051a:	eb61 010e 	sbc.w	r1, r1, lr
 800051e:	fa01 f707 	lsl.w	r7, r1, r7
 8000522:	fa22 f306 	lsr.w	r3, r2, r6
 8000526:	40f1      	lsrs	r1, r6
 8000528:	431f      	orrs	r7, r3
 800052a:	e9c5 7100 	strd	r7, r1, [r5]
 800052e:	2600      	movs	r6, #0
 8000530:	4631      	mov	r1, r6
 8000532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000536:	f1c2 0320 	rsb	r3, r2, #32
 800053a:	40d8      	lsrs	r0, r3
 800053c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000540:	fa21 f303 	lsr.w	r3, r1, r3
 8000544:	4091      	lsls	r1, r2
 8000546:	4301      	orrs	r1, r0
 8000548:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800054c:	fa1f fe8c 	uxth.w	lr, ip
 8000550:	fbb3 f0f7 	udiv	r0, r3, r7
 8000554:	fb07 3610 	mls	r6, r7, r0, r3
 8000558:	0c0b      	lsrs	r3, r1, #16
 800055a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800055e:	fb00 f60e 	mul.w	r6, r0, lr
 8000562:	429e      	cmp	r6, r3
 8000564:	fa04 f402 	lsl.w	r4, r4, r2
 8000568:	d908      	bls.n	800057c <__udivmoddi4+0x260>
 800056a:	eb1c 0303 	adds.w	r3, ip, r3
 800056e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000572:	d22f      	bcs.n	80005d4 <__udivmoddi4+0x2b8>
 8000574:	429e      	cmp	r6, r3
 8000576:	d92d      	bls.n	80005d4 <__udivmoddi4+0x2b8>
 8000578:	3802      	subs	r0, #2
 800057a:	4463      	add	r3, ip
 800057c:	1b9b      	subs	r3, r3, r6
 800057e:	b289      	uxth	r1, r1
 8000580:	fbb3 f6f7 	udiv	r6, r3, r7
 8000584:	fb07 3316 	mls	r3, r7, r6, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb06 f30e 	mul.w	r3, r6, lr
 8000590:	428b      	cmp	r3, r1
 8000592:	d908      	bls.n	80005a6 <__udivmoddi4+0x28a>
 8000594:	eb1c 0101 	adds.w	r1, ip, r1
 8000598:	f106 38ff 	add.w	r8, r6, #4294967295
 800059c:	d216      	bcs.n	80005cc <__udivmoddi4+0x2b0>
 800059e:	428b      	cmp	r3, r1
 80005a0:	d914      	bls.n	80005cc <__udivmoddi4+0x2b0>
 80005a2:	3e02      	subs	r6, #2
 80005a4:	4461      	add	r1, ip
 80005a6:	1ac9      	subs	r1, r1, r3
 80005a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005ac:	e738      	b.n	8000420 <__udivmoddi4+0x104>
 80005ae:	462e      	mov	r6, r5
 80005b0:	4628      	mov	r0, r5
 80005b2:	e705      	b.n	80003c0 <__udivmoddi4+0xa4>
 80005b4:	4606      	mov	r6, r0
 80005b6:	e6e3      	b.n	8000380 <__udivmoddi4+0x64>
 80005b8:	4618      	mov	r0, r3
 80005ba:	e6f8      	b.n	80003ae <__udivmoddi4+0x92>
 80005bc:	454b      	cmp	r3, r9
 80005be:	d2a9      	bcs.n	8000514 <__udivmoddi4+0x1f8>
 80005c0:	ebb9 0802 	subs.w	r8, r9, r2
 80005c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005c8:	3801      	subs	r0, #1
 80005ca:	e7a3      	b.n	8000514 <__udivmoddi4+0x1f8>
 80005cc:	4646      	mov	r6, r8
 80005ce:	e7ea      	b.n	80005a6 <__udivmoddi4+0x28a>
 80005d0:	4620      	mov	r0, r4
 80005d2:	e794      	b.n	80004fe <__udivmoddi4+0x1e2>
 80005d4:	4640      	mov	r0, r8
 80005d6:	e7d1      	b.n	800057c <__udivmoddi4+0x260>
 80005d8:	46d0      	mov	r8, sl
 80005da:	e77b      	b.n	80004d4 <__udivmoddi4+0x1b8>
 80005dc:	3b02      	subs	r3, #2
 80005de:	4461      	add	r1, ip
 80005e0:	e732      	b.n	8000448 <__udivmoddi4+0x12c>
 80005e2:	4630      	mov	r0, r6
 80005e4:	e709      	b.n	80003fa <__udivmoddi4+0xde>
 80005e6:	4464      	add	r4, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e742      	b.n	8000472 <__udivmoddi4+0x156>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <MX_ADC2_Init>:

ADC_HandleTypeDef hadc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80005f4:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_ADC2_Init+0x74>)
 80005f6:	4a1c      	ldr	r2, [pc, #112]	; (8000668 <MX_ADC2_Init+0x78>)
 80005f8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <MX_ADC2_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000600:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_ADC2_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000606:	4b17      	ldr	r3, [pc, #92]	; (8000664 <MX_ADC2_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800060c:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_ADC2_Init+0x74>)
 800060e:	2204      	movs	r2, #4
 8000610:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000612:	4b14      	ldr	r3, [pc, #80]	; (8000664 <MX_ADC2_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000618:	4b12      	ldr	r3, [pc, #72]	; (8000664 <MX_ADC2_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 800061e:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_ADC2_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000624:	4b0f      	ldr	r3, [pc, #60]	; (8000664 <MX_ADC2_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062a:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_ADC2_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000630:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_ADC2_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_ADC2_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800063c:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_ADC2_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <MX_ADC2_Init+0x74>)
 8000644:	2200      	movs	r2, #0
 8000646:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <MX_ADC2_Init+0x74>)
 800064a:	2200      	movs	r2, #0
 800064c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <MX_ADC2_Init+0x74>)
 8000652:	f001 f88f 	bl	8001774 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800065c:	f000 fc2e 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}
 8000664:	24000090 	.word	0x24000090
 8000668:	40022100 	.word	0x40022100

0800066c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0b4      	sub	sp, #208	; 0xd0
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 0310 	add.w	r3, r7, #16
 8000678:	22c0      	movs	r2, #192	; 0xc0
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f007 f8e9 	bl	8007854 <memset>
  if(adcHandle->Instance==ADC2)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a27      	ldr	r2, [pc, #156]	; (8000724 <HAL_ADC_MspInit+0xb8>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d146      	bne.n	800071a <HAL_ADC_MspInit+0xae>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800068c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000690:	f04f 0300 	mov.w	r3, #0
 8000694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000698:	2301      	movs	r3, #1
 800069a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 800069c:	2310      	movs	r3, #16
 800069e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 3;
 80006a0:	2303      	movs	r3, #3
 80006a2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 1;
 80006a4:	2301      	movs	r3, #1
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006ac:	23c0      	movs	r3, #192	; 0xc0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006be:	f107 0310 	add.w	r3, r7, #16
 80006c2:	4618      	mov	r0, r3
 80006c4:	f003 fa2a 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80006ce:	f000 fbf5 	bl	8000ebc <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006d8:	4a13      	ldr	r2, [pc, #76]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006da:	f043 0320 	orr.w	r3, r3, #32
 80006de:	f8c2 3138 	str.w	r3, [r2, #312]	; 0x138
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006e4:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80006e8:	f003 0320 	and.w	r3, r3, #32
 80006ec:	60fb      	str	r3, [r7, #12]
 80006ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80006f6:	4a0c      	ldr	r2, [pc, #48]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <HAL_ADC_MspInit+0xbc>)
 8000702:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	60bb      	str	r3, [r7, #8]
 800070c:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PC2_C     ------> ADC2_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800070e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000712:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000716:	f000 fed5 	bl	80014c4 <HAL_SYSCFG_AnalogSwitchConfig>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800071a:	bf00      	nop
 800071c:	37d0      	adds	r7, #208	; 0xd0
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40022100 	.word	0x40022100
 8000728:	58024400 	.word	0x58024400

0800072c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2224      	movs	r2, #36	; 0x24
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f007 f88b 	bl	8007854 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000740:	4a12      	ldr	r2, [pc, #72]	; (800078c <MX_DAC1_Init+0x60>)
 8000742:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000744:	4810      	ldr	r0, [pc, #64]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000746:	f001 fe8c 	bl	8002462 <HAL_DAC_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000750:	f000 fbb4 	bl	8000ebc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000768:	1d3b      	adds	r3, r7, #4
 800076a:	2200      	movs	r2, #0
 800076c:	4619      	mov	r1, r3
 800076e:	4806      	ldr	r0, [pc, #24]	; (8000788 <MX_DAC1_Init+0x5c>)
 8000770:	f001 fe9a 	bl	80024a8 <HAL_DAC_ConfigChannel>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 fb9f 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	3728      	adds	r7, #40	; 0x28
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	240000f4 	.word	0x240000f4
 800078c:	40007400 	.word	0x40007400

08000790 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b08a      	sub	sp, #40	; 0x28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a18      	ldr	r2, [pc, #96]	; (8000810 <HAL_DAC_MspInit+0x80>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d129      	bne.n	8000806 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007b4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007b8:	4a16      	ldr	r2, [pc, #88]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80007be:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80007c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d0:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <HAL_DAC_MspInit+0x84>)
 80007e2:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80007e6:	f003 0301 	and.w	r3, r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = DAC_Pin;
 80007ee:	2310      	movs	r3, #16
 80007f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f2:	2303      	movs	r3, #3
 80007f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4619      	mov	r1, r3
 8000800:	4805      	ldr	r0, [pc, #20]	; (8000818 <HAL_DAC_MspInit+0x88>)
 8000802:	f001 ff8f 	bl	8002724 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000806:	bf00      	nop
 8000808:	3728      	adds	r7, #40	; 0x28
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	40007400 	.word	0x40007400
 8000814:	58024400 	.word	0x58024400
 8000818:	58020000 	.word	0x58020000

0800081c <MX_GPIO_Init>:
     PA10   ------> USB_OTG_HS_ID
     PA11   ------> USB_OTG_HS_DM
     PA12   ------> USB_OTG_HS_DP
*/
void MX_GPIO_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
 8000830:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000832:	4b80      	ldr	r3, [pc, #512]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000834:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000838:	4a7e      	ldr	r2, [pc, #504]	; (8000a34 <MX_GPIO_Init+0x218>)
 800083a:	f043 0304 	orr.w	r3, r3, #4
 800083e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000842:	4b7c      	ldr	r3, [pc, #496]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000844:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000848:	f003 0304 	and.w	r3, r3, #4
 800084c:	623b      	str	r3, [r7, #32]
 800084e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000850:	4b78      	ldr	r3, [pc, #480]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000852:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000856:	4a77      	ldr	r2, [pc, #476]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000858:	f043 0320 	orr.w	r3, r3, #32
 800085c:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000860:	4b74      	ldr	r3, [pc, #464]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000862:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	61fb      	str	r3, [r7, #28]
 800086c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	4b71      	ldr	r3, [pc, #452]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000870:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000874:	4a6f      	ldr	r2, [pc, #444]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087a:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800087e:	4b6d      	ldr	r3, [pc, #436]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000880:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b69      	ldr	r3, [pc, #420]	; (8000a34 <MX_GPIO_Init+0x218>)
 800088e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 8000892:	4a68      	ldr	r2, [pc, #416]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 800089c:	4b65      	ldr	r3, [pc, #404]	; (8000a34 <MX_GPIO_Init+0x218>)
 800089e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	4b62      	ldr	r3, [pc, #392]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008b0:	4a60      	ldr	r2, [pc, #384]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008ba:	4b5e      	ldr	r3, [pc, #376]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008bc:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	613b      	str	r3, [r7, #16]
 80008c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c8:	4b5a      	ldr	r3, [pc, #360]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ca:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ce:	4a59      	ldr	r2, [pc, #356]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008d8:	4b56      	ldr	r3, [pc, #344]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008da:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008e6:	4b53      	ldr	r3, [pc, #332]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008ec:	4a51      	ldr	r2, [pc, #324]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f2:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80008f6:	4b4f      	ldr	r3, [pc, #316]	; (8000a34 <MX_GPIO_Init+0x218>)
 80008f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80008fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000900:	60bb      	str	r3, [r7, #8]
 8000902:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000904:	4b4b      	ldr	r3, [pc, #300]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000906:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800090a:	4a4a      	ldr	r2, [pc, #296]	; (8000a34 <MX_GPIO_Init+0x218>)
 800090c:	f043 0310 	orr.w	r3, r3, #16
 8000910:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 8000914:	4b47      	ldr	r3, [pc, #284]	; (8000a34 <MX_GPIO_Init+0x218>)
 8000916:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800091a:	f003 0310 	and.w	r3, r3, #16
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000928:	4843      	ldr	r0, [pc, #268]	; (8000a38 <MX_GPIO_Init+0x21c>)
 800092a:	f002 f8ab 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800092e:	2200      	movs	r2, #0
 8000930:	f244 0101 	movw	r1, #16385	; 0x4001
 8000934:	4841      	ldr	r0, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000936:	f002 f8a5 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093a:	2200      	movs	r2, #0
 800093c:	2102      	movs	r1, #2
 800093e:	4840      	ldr	r0, [pc, #256]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000940:	f002 f8a0 	bl	8002a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000944:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	4619      	mov	r1, r3
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <MX_GPIO_Init+0x228>)
 800095a:	f001 fee3 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4830      	ldr	r0, [pc, #192]	; (8000a38 <MX_GPIO_Init+0x21c>)
 8000978:	f001 fed4 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 800097c:	f244 0301 	movw	r3, #16385	; 0x4001
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000992:	4619      	mov	r1, r3
 8000994:	4829      	ldr	r0, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x220>)
 8000996:	f001 fec5 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 800099a:	2380      	movs	r3, #128	; 0x80
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ac:	4619      	mov	r1, r3
 80009ae:	4826      	ldr	r0, [pc, #152]	; (8000a48 <MX_GPIO_Init+0x22c>)
 80009b0:	f001 feb8 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80009b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ba:	2300      	movs	r3, #0
 80009bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	4619      	mov	r1, r3
 80009c8:	4820      	ldr	r0, [pc, #128]	; (8000a4c <MX_GPIO_Init+0x230>)
 80009ca:	f001 feab 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80009ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d4:	2302      	movs	r3, #2
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 80009e0:	230a      	movs	r3, #10
 80009e2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009e8:	4619      	mov	r1, r3
 80009ea:	4818      	ldr	r0, [pc, #96]	; (8000a4c <MX_GPIO_Init+0x230>)
 80009ec:	f001 fe9a 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = USB_FS_N_Pin|USB_FS_P_Pin;
 80009f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fe:	2300      	movs	r3, #0
 8000a00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a06:	4619      	mov	r1, r3
 8000a08:	4810      	ldr	r0, [pc, #64]	; (8000a4c <MX_GPIO_Init+0x230>)
 8000a0a:	f001 fe8b 	bl	8002724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a12:	2301      	movs	r3, #1
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a22:	4619      	mov	r1, r3
 8000a24:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_GPIO_Init+0x224>)
 8000a26:	f001 fe7d 	bl	8002724 <HAL_GPIO_Init>

}
 8000a2a:	bf00      	nop
 8000a2c:	3738      	adds	r7, #56	; 0x38
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	58024400 	.word	0x58024400
 8000a38:	58021400 	.word	0x58021400
 8000a3c:	58020400 	.word	0x58020400
 8000a40:	58021000 	.word	0x58021000
 8000a44:	58020800 	.word	0x58020800
 8000a48:	58021800 	.word	0x58021800
 8000a4c:	58020000 	.word	0x58020000

08000a50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b0b8      	sub	sp, #224	; 0xe0
 8000a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  uint16_t 	adc_value = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
  uint16_t adc[MUESTRAS] ;
  uint16_t sample = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde

  uint8_t uni = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	72fb      	strb	r3, [r7, #11]
  uint8_t dec = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	72bb      	strb	r3, [r7, #10]
  uint8_t cen = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	727b      	strb	r3, [r7, #9]
  uint8_t um  = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	723b      	strb	r3, [r7, #8]
  uint8_t dm   = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	71fb      	strb	r3, [r7, #7]

  uint8_t iu = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	71bb      	strb	r3, [r7, #6]
  uint8_t id = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	717b      	strb	r3, [r7, #5]
  uint8_t ic = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	713b      	strb	r3, [r7, #4]
  uint8_t im  = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a86:	f000 fc67 	bl	8001358 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8a:	f000 f979 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8e:	f7ff fec5 	bl	800081c <MX_GPIO_Init>
  MX_USB_OTG_HS_USB_Init();
 8000a92:	f000 fc2f 	bl	80012f4 <MX_USB_OTG_HS_USB_Init>
  MX_ADC2_Init();
 8000a96:	f7ff fdab 	bl	80005f0 <MX_ADC2_Init>
  MX_USART3_UART_Init();
 8000a9a:	f000 fb75 	bl	8001188 <MX_USART3_UART_Init>
  MX_DAC1_Init();
 8000a9e:	f7ff fe45 	bl	800072c <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  CyclesCounterInit(FRE_CLOCK); // Enable the cycle counter
 8000aa2:	48a9      	ldr	r0, [pc, #676]	; (8000d48 <main+0x2f8>)
 8000aa4:	f000 f9f6 	bl	8000e94 <CyclesCounterInit>

  printf("Inicio ADC DAC \r\n");
 8000aa8:	48a8      	ldr	r0, [pc, #672]	; (8000d4c <main+0x2fc>)
 8000aaa:	f006 ff49 	bl	8007940 <puts>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	CyclesCounterReset();
 8000aae:	4ba8      	ldr	r3, [pc, #672]	; (8000d50 <main+0x300>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	605a      	str	r2, [r3, #4]

	HAL_ADC_Start(&hadc2);
 8000ab4:	48a7      	ldr	r0, [pc, #668]	; (8000d54 <main+0x304>)
 8000ab6:	f000 ffb7 	bl	8001a28 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 1000);
 8000aba:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000abe:	48a5      	ldr	r0, [pc, #660]	; (8000d54 <main+0x304>)
 8000ac0:	f001 f8a0 	bl	8001c04 <HAL_ADC_PollForConversion>
	adc_value = HAL_ADC_GetValue(&hadc2);
 8000ac4:	48a3      	ldr	r0, [pc, #652]	; (8000d54 <main+0x304>)
 8000ac6:	f001 f975 	bl	8001db4 <HAL_ADC_GetValue>
 8000aca:	4603      	mov	r3, r0
 8000acc:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
	HAL_ADC_Stop(&hadc2);
 8000ad0:	48a0      	ldr	r0, [pc, #640]	; (8000d54 <main+0x304>)
 8000ad2:	f001 f863 	bl	8001b9c <HAL_ADC_Stop>

	adc[sample] = adc_value;
 8000ad6:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	33e0      	adds	r3, #224	; 0xe0
 8000ade:	443b      	add	r3, r7
 8000ae0:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8000ae4:	f823 2cd4 	strh.w	r2, [r3, #-212]
	sample++;
 8000ae8:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8000aec:	3301      	adds	r3, #1
 8000aee:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde

	while(CyclesCounterRead() <  FS )
 8000af2:	bf00      	nop
 8000af4:	4b96      	ldr	r3, [pc, #600]	; (8000d50 <main+0x300>)
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	4a97      	ldr	r2, [pc, #604]	; (8000d58 <main+0x308>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d3fa      	bcc.n	8000af4 <main+0xa4>
	{}

	if(sample > MUESTRAS)
 8000afe:	f8b7 30de 	ldrh.w	r3, [r7, #222]	; 0xde
 8000b02:	2b64      	cmp	r3, #100	; 0x64
 8000b04:	d9d3      	bls.n	8000aae <main+0x5e>
	{
		for(int i=0 ;i < MUESTRAS;i++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000b0c:	e116      	b.n	8000d3c <main+0x2ec>
		{
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000b0e:	2101      	movs	r1, #1
 8000b10:	4892      	ldr	r0, [pc, #584]	; (8000d5c <main+0x30c>)
 8000b12:	f001 ffd0 	bl	8002ab6 <HAL_GPIO_TogglePin>
			// printf("ADC = %d size = %d  \r\n",adc_value,sample);

			// 00000 - 65536

			iu = (i % 10) + 48;
 8000b16:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8000b1a:	4b91      	ldr	r3, [pc, #580]	; (8000d60 <main+0x310>)
 8000b1c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b20:	1099      	asrs	r1, r3, #2
 8000b22:	17d3      	asrs	r3, r2, #31
 8000b24:	1ac9      	subs	r1, r1, r3
 8000b26:	460b      	mov	r3, r1
 8000b28:	009b      	lsls	r3, r3, #2
 8000b2a:	440b      	add	r3, r1
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	1ad1      	subs	r1, r2, r3
 8000b30:	b2cb      	uxtb	r3, r1
 8000b32:	3330      	adds	r3, #48	; 0x30
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	71bb      	strb	r3, [r7, #6]
			id = ((i /    10) % 10) + 48;
 8000b38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b3c:	4a88      	ldr	r2, [pc, #544]	; (8000d60 <main+0x310>)
 8000b3e:	fb82 1203 	smull	r1, r2, r2, r3
 8000b42:	1092      	asrs	r2, r2, #2
 8000b44:	17db      	asrs	r3, r3, #31
 8000b46:	1ad2      	subs	r2, r2, r3
 8000b48:	4b85      	ldr	r3, [pc, #532]	; (8000d60 <main+0x310>)
 8000b4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000b4e:	1099      	asrs	r1, r3, #2
 8000b50:	17d3      	asrs	r3, r2, #31
 8000b52:	1ac9      	subs	r1, r1, r3
 8000b54:	460b      	mov	r3, r1
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	440b      	add	r3, r1
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	1ad1      	subs	r1, r2, r3
 8000b5e:	b2cb      	uxtb	r3, r1
 8000b60:	3330      	adds	r3, #48	; 0x30
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	717b      	strb	r3, [r7, #5]
			ic = ((i /   100) % 10) + 48;
 8000b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b6a:	4a7e      	ldr	r2, [pc, #504]	; (8000d64 <main+0x314>)
 8000b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b70:	1152      	asrs	r2, r2, #5
 8000b72:	17db      	asrs	r3, r3, #31
 8000b74:	1ad2      	subs	r2, r2, r3
 8000b76:	4b7a      	ldr	r3, [pc, #488]	; (8000d60 <main+0x310>)
 8000b78:	fb83 1302 	smull	r1, r3, r3, r2
 8000b7c:	1099      	asrs	r1, r3, #2
 8000b7e:	17d3      	asrs	r3, r2, #31
 8000b80:	1ac9      	subs	r1, r1, r3
 8000b82:	460b      	mov	r3, r1
 8000b84:	009b      	lsls	r3, r3, #2
 8000b86:	440b      	add	r3, r1
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	1ad1      	subs	r1, r2, r3
 8000b8c:	b2cb      	uxtb	r3, r1
 8000b8e:	3330      	adds	r3, #48	; 0x30
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	713b      	strb	r3, [r7, #4]
			im = ((i /  1000) % 10) + 48;
 8000b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000b98:	4a73      	ldr	r2, [pc, #460]	; (8000d68 <main+0x318>)
 8000b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8000b9e:	1192      	asrs	r2, r2, #6
 8000ba0:	17db      	asrs	r3, r3, #31
 8000ba2:	1ad2      	subs	r2, r2, r3
 8000ba4:	4b6e      	ldr	r3, [pc, #440]	; (8000d60 <main+0x310>)
 8000ba6:	fb83 1302 	smull	r1, r3, r3, r2
 8000baa:	1099      	asrs	r1, r3, #2
 8000bac:	17d3      	asrs	r3, r2, #31
 8000bae:	1ac9      	subs	r1, r1, r3
 8000bb0:	460b      	mov	r3, r1
 8000bb2:	009b      	lsls	r3, r3, #2
 8000bb4:	440b      	add	r3, r1
 8000bb6:	005b      	lsls	r3, r3, #1
 8000bb8:	1ad1      	subs	r1, r2, r3
 8000bba:	b2cb      	uxtb	r3, r1
 8000bbc:	3330      	adds	r3, #48	; 0x30
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	70fb      	strb	r3, [r7, #3]

			uni = (adc_value % 10) + 48;
 8000bc2:	f8b7 20d6 	ldrh.w	r2, [r7, #214]	; 0xd6
 8000bc6:	4b69      	ldr	r3, [pc, #420]	; (8000d6c <main+0x31c>)
 8000bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8000bcc:	08d9      	lsrs	r1, r3, #3
 8000bce:	460b      	mov	r3, r1
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	440b      	add	r3, r1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	3330      	adds	r3, #48	; 0x30
 8000bde:	b2db      	uxtb	r3, r3
 8000be0:	72fb      	strb	r3, [r7, #11]
			dec = ((adc_value /    10) % 10) + 48;
 8000be2:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8000be6:	4a61      	ldr	r2, [pc, #388]	; (8000d6c <main+0x31c>)
 8000be8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bec:	08db      	lsrs	r3, r3, #3
 8000bee:	b29a      	uxth	r2, r3
 8000bf0:	4b5e      	ldr	r3, [pc, #376]	; (8000d6c <main+0x31c>)
 8000bf2:	fba3 1302 	umull	r1, r3, r3, r2
 8000bf6:	08d9      	lsrs	r1, r3, #3
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	440b      	add	r3, r1
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	3330      	adds	r3, #48	; 0x30
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	72bb      	strb	r3, [r7, #10]
			cen = ((adc_value /   100) % 10) + 48;
 8000c0c:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8000c10:	4a54      	ldr	r2, [pc, #336]	; (8000d64 <main+0x314>)
 8000c12:	fba2 2303 	umull	r2, r3, r2, r3
 8000c16:	095b      	lsrs	r3, r3, #5
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b54      	ldr	r3, [pc, #336]	; (8000d6c <main+0x31c>)
 8000c1c:	fba3 1302 	umull	r1, r3, r3, r2
 8000c20:	08d9      	lsrs	r1, r3, #3
 8000c22:	460b      	mov	r3, r1
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	440b      	add	r3, r1
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	1ad3      	subs	r3, r2, r3
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	b2db      	uxtb	r3, r3
 8000c30:	3330      	adds	r3, #48	; 0x30
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	727b      	strb	r3, [r7, #9]
			um  = ((adc_value /  1000) % 10) + 48;
 8000c36:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8000c3a:	4a4b      	ldr	r2, [pc, #300]	; (8000d68 <main+0x318>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	099b      	lsrs	r3, r3, #6
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <main+0x31c>)
 8000c46:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4a:	08d9      	lsrs	r1, r3, #3
 8000c4c:	460b      	mov	r3, r1
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	440b      	add	r3, r1
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	3330      	adds	r3, #48	; 0x30
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	723b      	strb	r3, [r7, #8]
			dm  = ((adc_value / 10000) % 10) + 48;
 8000c60:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8000c64:	4a42      	ldr	r2, [pc, #264]	; (8000d70 <main+0x320>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	0b5b      	lsrs	r3, r3, #13
 8000c6c:	b29a      	uxth	r2, r3
 8000c6e:	4b3f      	ldr	r3, [pc, #252]	; (8000d6c <main+0x31c>)
 8000c70:	fba3 1302 	umull	r1, r3, r3, r2
 8000c74:	08d9      	lsrs	r1, r3, #3
 8000c76:	460b      	mov	r3, r1
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	3330      	adds	r3, #48	; 0x30
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	71fb      	strb	r3, [r7, #7]

			HAL_UART_Transmit(&huart3, (uint8_t *) "(" , 1, 0xFFFF);
 8000c8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4938      	ldr	r1, [pc, #224]	; (8000d74 <main+0x324>)
 8000c92:	4839      	ldr	r0, [pc, #228]	; (8000d78 <main+0x328>)
 8000c94:	f005 fb9c 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,              &im, 1, 0xFFFF);
 8000c98:	1cf9      	adds	r1, r7, #3
 8000c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4835      	ldr	r0, [pc, #212]	; (8000d78 <main+0x328>)
 8000ca2:	f005 fb95 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,              &ic, 1, 0xFFFF);
 8000ca6:	1d39      	adds	r1, r7, #4
 8000ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cac:	2201      	movs	r2, #1
 8000cae:	4832      	ldr	r0, [pc, #200]	; (8000d78 <main+0x328>)
 8000cb0:	f005 fb8e 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,              &id, 1, 0xFFFF);
 8000cb4:	1d79      	adds	r1, r7, #5
 8000cb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cba:	2201      	movs	r2, #1
 8000cbc:	482e      	ldr	r0, [pc, #184]	; (8000d78 <main+0x328>)
 8000cbe:	f005 fb87 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,              &iu, 1, 0xFFFF);
 8000cc2:	1db9      	adds	r1, r7, #6
 8000cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cc8:	2201      	movs	r2, #1
 8000cca:	482b      	ldr	r0, [pc, #172]	; (8000d78 <main+0x328>)
 8000ccc:	f005 fb80 	bl	80063d0 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart3,              &dm, 1, 0xFFFF);
 8000cd0:	1df9      	adds	r1, r7, #7
 8000cd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	4827      	ldr	r0, [pc, #156]	; (8000d78 <main+0x328>)
 8000cda:	f005 fb79 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,              &um, 1, 0xFFFF);
 8000cde:	f107 0108 	add.w	r1, r7, #8
 8000ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4823      	ldr	r0, [pc, #140]	; (8000d78 <main+0x328>)
 8000cea:	f005 fb71 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,             &cen, 1, 0xFFFF);
 8000cee:	f107 0109 	add.w	r1, r7, #9
 8000cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	481f      	ldr	r0, [pc, #124]	; (8000d78 <main+0x328>)
 8000cfa:	f005 fb69 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,             &dec, 1, 0xFFFF);
 8000cfe:	f107 010a 	add.w	r1, r7, #10
 8000d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d06:	2201      	movs	r2, #1
 8000d08:	481b      	ldr	r0, [pc, #108]	; (8000d78 <main+0x328>)
 8000d0a:	f005 fb61 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3,             &uni, 1, 0xFFFF);
 8000d0e:	f107 010b 	add.w	r1, r7, #11
 8000d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d16:	2201      	movs	r2, #1
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <main+0x328>)
 8000d1a:	f005 fb59 	bl	80063d0 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t *)  ")", 1, 0xFFFF);
 8000d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d22:	2201      	movs	r2, #1
 8000d24:	4915      	ldr	r1, [pc, #84]	; (8000d7c <main+0x32c>)
 8000d26:	4814      	ldr	r0, [pc, #80]	; (8000d78 <main+0x328>)
 8000d28:	f005 fb52 	bl	80063d0 <HAL_UART_Transmit>

			sample = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f8a7 30de 	strh.w	r3, [r7, #222]	; 0xde
		for(int i=0 ;i < MUESTRAS;i++)
 8000d32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000d36:	3301      	adds	r3, #1
 8000d38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8000d3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8000d40:	2b63      	cmp	r3, #99	; 0x63
 8000d42:	f77f aee4 	ble.w	8000b0e <main+0xbe>
	CyclesCounterReset();
 8000d46:	e6b2      	b.n	8000aae <main+0x5e>
 8000d48:	10b07600 	.word	0x10b07600
 8000d4c:	08008278 	.word	0x08008278
 8000d50:	e0001000 	.word	0xe0001000
 8000d54:	24000090 	.word	0x24000090
 8000d58:	002ab980 	.word	0x002ab980
 8000d5c:	58020400 	.word	0x58020400
 8000d60:	66666667 	.word	0x66666667
 8000d64:	51eb851f 	.word	0x51eb851f
 8000d68:	10624dd3 	.word	0x10624dd3
 8000d6c:	cccccccd 	.word	0xcccccccd
 8000d70:	d1b71759 	.word	0xd1b71759
 8000d74:	0800828c 	.word	0x0800828c
 8000d78:	2400010c 	.word	0x2400010c
 8000d7c:	08008290 	.word	0x08008290

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09c      	sub	sp, #112	; 0x70
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8a:	224c      	movs	r2, #76	; 0x4c
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f006 fd60 	bl	8007854 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2220      	movs	r2, #32
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f006 fd5a 	bl	8007854 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000da0:	4b31      	ldr	r3, [pc, #196]	; (8000e68 <SystemClock_Config+0xe8>)
 8000da2:	f04f 32ff 	mov.w	r2, #4294967295
 8000da6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000daa:	2004      	movs	r0, #4
 8000dac:	f001 fe9e 	bl	8002aec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000db0:	2300      	movs	r3, #0
 8000db2:	603b      	str	r3, [r7, #0]
 8000db4:	4b2d      	ldr	r3, [pc, #180]	; (8000e6c <SystemClock_Config+0xec>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a2c      	ldr	r2, [pc, #176]	; (8000e6c <SystemClock_Config+0xec>)
 8000dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <SystemClock_Config+0xec>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dcc:	bf00      	nop
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <SystemClock_Config+0xec>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dda:	d1f8      	bne.n	8000dce <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_LSI
 8000ddc:	2329      	movs	r3, #41	; 0x29
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000de0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000de4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000de6:	2301      	movs	r3, #1
 8000de8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000dea:	2301      	movs	r3, #1
 8000dec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dee:	2302      	movs	r3, #2
 8000df0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df2:	2302      	movs	r3, #2
 8000df4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000dfa:	2346      	movs	r3, #70	; 0x46
 8000dfc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 20;
 8000e02:	2314      	movs	r3, #20
 8000e04:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e06:	2302      	movs	r3, #2
 8000e08:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 fec0 	bl	8002ba0 <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000e26:	f000 f849 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	233f      	movs	r3, #63	; 0x3f
 8000e2c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e3a:	2340      	movs	r3, #64	; 0x40
 8000e3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e3e:	2340      	movs	r3, #64	; 0x40
 8000e40:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e46:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e48:	2340      	movs	r3, #64	; 0x40
 8000e4a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e4c:	1d3b      	adds	r3, r7, #4
 8000e4e:	2107      	movs	r1, #7
 8000e50:	4618      	mov	r0, r3
 8000e52:	f002 fad7 	bl	8003404 <HAL_RCC_ClockConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000e5c:	f000 f82e 	bl	8000ebc <Error_Handler>
  }
}
 8000e60:	bf00      	nop
 8000e62:	3770      	adds	r7, #112	; 0x70
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58024800 	.word	0x58024800

08000e70 <__io_putchar>:

/* USER CODE BEGIN 4 */

PUTCHAR_PROTOTYPE
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000e78:	1d39      	adds	r1, r7, #4
 8000e7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e7e:	2201      	movs	r2, #1
 8000e80:	4803      	ldr	r0, [pc, #12]	; (8000e90 <__io_putchar+0x20>)
 8000e82:	f005 faa5 	bl	80063d0 <HAL_UART_Transmit>

  return ch;
 8000e86:	687b      	ldr	r3, [r7, #4]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2400010c 	.word	0x2400010c

08000e94 <CyclesCounterInit>:

int CyclesCounterInit( uint32_t clockSpeed )
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
   DWT->CTRL  |= 1; // *DWT_CTRL  |= 1;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <CyclesCounterInit+0x24>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <CyclesCounterInit+0x24>)
 8000ea2:	f043 0301 	orr.w	r3, r3, #1
 8000ea6:	6013      	str	r3, [r2, #0]
   return 1;
 8000ea8:	2301      	movs	r3, #1
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e0001000 	.word	0xe0001000

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <Error_Handler+0x8>
	...

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <HAL_MspInit+0x30>)
 8000ed0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ed4:	4a08      	ldr	r2, [pc, #32]	; (8000ef8 <HAL_MspInit+0x30>)
 8000ed6:	f043 0302 	orr.w	r3, r3, #2
 8000eda:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 8000ede:	4b06      	ldr	r3, [pc, #24]	; (8000ef8 <HAL_MspInit+0x30>)
 8000ee0:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8000ee4:	f003 0302 	and.w	r3, r3, #2
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	58024400 	.word	0x58024400

08000efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <NMI_Handler+0x4>

08000f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f06:	e7fe      	b.n	8000f06 <HardFault_Handler+0x4>

08000f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <MemManage_Handler+0x4>

08000f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <BusFault_Handler+0x4>

08000f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <UsageFault_Handler+0x4>

08000f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr

08000f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f48:	f000 fa78 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	e00a      	b.n	8000f78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f62:	f3af 8000 	nop.w
 8000f66:	4601      	mov	r1, r0
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	1c5a      	adds	r2, r3, #1
 8000f6c:	60ba      	str	r2, [r7, #8]
 8000f6e:	b2ca      	uxtb	r2, r1
 8000f70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	3301      	adds	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	dbf0      	blt.n	8000f62 <_read+0x12>
  }

  return len;
 8000f80:	687b      	ldr	r3, [r7, #4]
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	617b      	str	r3, [r7, #20]
 8000f9a:	e009      	b.n	8000fb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff63 	bl	8000e70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	3301      	adds	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dbf1      	blt.n	8000f9c <_write+0x12>
  }
  return len;
 8000fb8:	687b      	ldr	r3, [r7, #4]
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <_close>:

int _close(int file)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	370c      	adds	r7, #12
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr

08000fda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fda:	b480      	push	{r7}
 8000fdc:	b083      	sub	sp, #12
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
 8000fe2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fea:	605a      	str	r2, [r3, #4]
  return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_isatty>:

int _isatty(int file)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001002:	2301      	movs	r3, #1
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3714      	adds	r7, #20
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <_sbrk+0x5c>)
 8001036:	4b15      	ldr	r3, [pc, #84]	; (800108c <_sbrk+0x60>)
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001040:	4b13      	ldr	r3, [pc, #76]	; (8001090 <_sbrk+0x64>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d102      	bne.n	800104e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <_sbrk+0x64>)
 800104a:	4a12      	ldr	r2, [pc, #72]	; (8001094 <_sbrk+0x68>)
 800104c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <_sbrk+0x64>)
 8001050:	681a      	ldr	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	429a      	cmp	r2, r3
 800105a:	d207      	bcs.n	800106c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800105c:	f006 fbd0 	bl	8007800 <__errno>
 8001060:	4603      	mov	r3, r0
 8001062:	220c      	movs	r2, #12
 8001064:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295
 800106a:	e009      	b.n	8001080 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800106c:	4b08      	ldr	r3, [pc, #32]	; (8001090 <_sbrk+0x64>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001072:	4b07      	ldr	r3, [pc, #28]	; (8001090 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	4a05      	ldr	r2, [pc, #20]	; (8001090 <_sbrk+0x64>)
 800107c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800107e:	68fb      	ldr	r3, [r7, #12]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3718      	adds	r7, #24
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	24100000 	.word	0x24100000
 800108c:	00000400 	.word	0x00000400
 8001090:	24000108 	.word	0x24000108
 8001094:	240001b8 	.word	0x240001b8

08001098 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800109c:	4b32      	ldr	r3, [pc, #200]	; (8001168 <SystemInit+0xd0>)
 800109e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a2:	4a31      	ldr	r2, [pc, #196]	; (8001168 <SystemInit+0xd0>)
 80010a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ac:	4b2f      	ldr	r3, [pc, #188]	; (800116c <SystemInit+0xd4>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 030f 	and.w	r3, r3, #15
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d807      	bhi.n	80010c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <SystemInit+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f023 030f 	bic.w	r3, r3, #15
 80010c0:	4a2a      	ldr	r2, [pc, #168]	; (800116c <SystemInit+0xd4>)
 80010c2:	f043 0303 	orr.w	r3, r3, #3
 80010c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <SystemInit+0xd8>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a28      	ldr	r2, [pc, #160]	; (8001170 <SystemInit+0xd8>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <SystemInit+0xd8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <SystemInit+0xd8>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4924      	ldr	r1, [pc, #144]	; (8001170 <SystemInit+0xd8>)
 80010e0:	4b24      	ldr	r3, [pc, #144]	; (8001174 <SystemInit+0xdc>)
 80010e2:	4013      	ands	r3, r2
 80010e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e6:	4b21      	ldr	r3, [pc, #132]	; (800116c <SystemInit+0xd4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f2:	4b1e      	ldr	r3, [pc, #120]	; (800116c <SystemInit+0xd4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f023 030f 	bic.w	r3, r3, #15
 80010fa:	4a1c      	ldr	r2, [pc, #112]	; (800116c <SystemInit+0xd4>)
 80010fc:	f043 0303 	orr.w	r3, r3, #3
 8001100:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <SystemInit+0xd8>)
 8001104:	2200      	movs	r2, #0
 8001106:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001108:	4b19      	ldr	r3, [pc, #100]	; (8001170 <SystemInit+0xd8>)
 800110a:	2200      	movs	r2, #0
 800110c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <SystemInit+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <SystemInit+0xd8>)
 8001116:	4a18      	ldr	r2, [pc, #96]	; (8001178 <SystemInit+0xe0>)
 8001118:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <SystemInit+0xd8>)
 800111c:	4a17      	ldr	r2, [pc, #92]	; (800117c <SystemInit+0xe4>)
 800111e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <SystemInit+0xd8>)
 8001122:	4a17      	ldr	r2, [pc, #92]	; (8001180 <SystemInit+0xe8>)
 8001124:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001126:	4b12      	ldr	r3, [pc, #72]	; (8001170 <SystemInit+0xd8>)
 8001128:	2200      	movs	r2, #0
 800112a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800112c:	4b10      	ldr	r3, [pc, #64]	; (8001170 <SystemInit+0xd8>)
 800112e:	4a14      	ldr	r2, [pc, #80]	; (8001180 <SystemInit+0xe8>)
 8001130:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001132:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <SystemInit+0xd8>)
 8001134:	2200      	movs	r2, #0
 8001136:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001138:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <SystemInit+0xd8>)
 800113a:	4a11      	ldr	r2, [pc, #68]	; (8001180 <SystemInit+0xe8>)
 800113c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <SystemInit+0xd8>)
 8001140:	2200      	movs	r2, #0
 8001142:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001144:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <SystemInit+0xd8>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a09      	ldr	r2, [pc, #36]	; (8001170 <SystemInit+0xd8>)
 800114a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800114e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <SystemInit+0xd8>)
 8001152:	2200      	movs	r2, #0
 8001154:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <SystemInit+0xec>)
 8001158:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800115c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800115e:	bf00      	nop
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00
 800116c:	52002000 	.word	0x52002000
 8001170:	58024400 	.word	0x58024400
 8001174:	eaf6ed7f 	.word	0xeaf6ed7f
 8001178:	02020200 	.word	0x02020200
 800117c:	01ff0000 	.word	0x01ff0000
 8001180:	01010280 	.word	0x01010280
 8001184:	52004000 	.word	0x52004000

08001188 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800118c:	4b22      	ldr	r3, [pc, #136]	; (8001218 <MX_USART3_UART_Init+0x90>)
 800118e:	4a23      	ldr	r2, [pc, #140]	; (800121c <MX_USART3_UART_Init+0x94>)
 8001190:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <MX_USART3_UART_Init+0x90>)
 8001194:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001198:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800119a:	4b1f      	ldr	r3, [pc, #124]	; (8001218 <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011a0:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011a6:	4b1c      	ldr	r3, [pc, #112]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011ac:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011ae:	220c      	movs	r2, #12
 80011b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b8:	4b17      	ldr	r3, [pc, #92]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011d0:	4811      	ldr	r0, [pc, #68]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011d2:	f005 f8ad 	bl	8006330 <HAL_UART_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011dc:	f7ff fe6e 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e0:	2100      	movs	r1, #0
 80011e2:	480d      	ldr	r0, [pc, #52]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011e4:	f006 fa41 	bl	800766a <HAL_UARTEx_SetTxFifoThreshold>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011ee:	f7ff fe65 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011f2:	2100      	movs	r1, #0
 80011f4:	4808      	ldr	r0, [pc, #32]	; (8001218 <MX_USART3_UART_Init+0x90>)
 80011f6:	f006 fa76 	bl	80076e6 <HAL_UARTEx_SetRxFifoThreshold>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001200:	f7ff fe5c 	bl	8000ebc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <MX_USART3_UART_Init+0x90>)
 8001206:	f006 f9f7 	bl	80075f8 <HAL_UARTEx_DisableFifoMode>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001210:	f7ff fe54 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	bd80      	pop	{r7, pc}
 8001218:	2400010c 	.word	0x2400010c
 800121c:	40004800 	.word	0x40004800

08001220 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b0ba      	sub	sp, #232	; 0xe8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001238:	f107 0310 	add.w	r3, r7, #16
 800123c:	22c0      	movs	r2, #192	; 0xc0
 800123e:	2100      	movs	r1, #0
 8001240:	4618      	mov	r0, r3
 8001242:	f006 fb07 	bl	8007854 <memset>
  if(uartHandle->Instance==USART3)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <HAL_UART_MspInit+0xc8>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d146      	bne.n	80012de <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001250:	f04f 0202 	mov.w	r2, #2
 8001254:	f04f 0300 	mov.w	r3, #0
 8001258:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800125c:	2300      	movs	r3, #0
 800125e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	4618      	mov	r0, r3
 8001268:	f002 fc58 	bl	8003b1c <HAL_RCCEx_PeriphCLKConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001272:	f7ff fe23 	bl	8000ebc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001276:	4b1d      	ldr	r3, [pc, #116]	; (80012ec <HAL_UART_MspInit+0xcc>)
 8001278:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <HAL_UART_MspInit+0xcc>)
 800127e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001282:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
 8001286:	4b19      	ldr	r3, [pc, #100]	; (80012ec <HAL_UART_MspInit+0xcc>)
 8001288:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800128c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_UART_MspInit+0xcc>)
 8001296:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800129a:	4a14      	ldr	r2, [pc, #80]	; (80012ec <HAL_UART_MspInit+0xcc>)
 800129c:	f043 0308 	orr.w	r3, r3, #8
 80012a0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_UART_MspInit+0xcc>)
 80012a6:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 80012aa:	f003 0308 	and.w	r3, r3, #8
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80012b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012cc:	2307      	movs	r3, #7
 80012ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012d2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_UART_MspInit+0xd0>)
 80012da:	f001 fa23 	bl	8002724 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012de:	bf00      	nop
 80012e0:	37e8      	adds	r7, #232	; 0xe8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40004800 	.word	0x40004800
 80012ec:	58024400 	.word	0x58024400
 80012f0:	58020c00 	.word	0x58020c00

080012f4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800133c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001308:	f7ff fec6 	bl	8001098 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800130e:	490d      	ldr	r1, [pc, #52]	; (8001344 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001310:	4a0d      	ldr	r2, [pc, #52]	; (8001348 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001314:	e002      	b.n	800131c <LoopCopyDataInit>

08001316 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001316:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001318:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800131a:	3304      	adds	r3, #4

0800131c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  adds r4, r0, r3
 800131c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001320:	d3f9      	bcc.n	8001316 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001324:	4c0a      	ldr	r4, [pc, #40]	; (8001350 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001326:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001328:	e001      	b.n	800132e <LoopFillZerobss>

0800132a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800132a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800132c:	3204      	adds	r2, #4

0800132e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001330:	d3fb      	bcc.n	800132a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001332:	f006 fa6b 	bl	800780c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001336:	f7ff fb8b 	bl	8000a50 <main>
  bx  lr
 800133a:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack      /* set stack pointer */
 800133c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001340:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001344:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8001348:	08008340 	.word	0x08008340
  ldr r2, =_sbss
 800134c:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8001350:	240001b4 	.word	0x240001b4

08001354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC_IRQHandler>
	...

08001358 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135e:	2003      	movs	r0, #3
 8001360:	f001 f84e 	bl	8002400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001364:	f002 fa04 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8001368:	4602      	mov	r2, r0
 800136a:	4b15      	ldr	r3, [pc, #84]	; (80013c0 <HAL_Init+0x68>)
 800136c:	699b      	ldr	r3, [r3, #24]
 800136e:	0a1b      	lsrs	r3, r3, #8
 8001370:	f003 030f 	and.w	r3, r3, #15
 8001374:	4913      	ldr	r1, [pc, #76]	; (80013c4 <HAL_Init+0x6c>)
 8001376:	5ccb      	ldrb	r3, [r1, r3]
 8001378:	f003 031f 	and.w	r3, r3, #31
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_Init+0x68>)
 8001384:	699b      	ldr	r3, [r3, #24]
 8001386:	f003 030f 	and.w	r3, r3, #15
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <HAL_Init+0x6c>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	f003 031f 	and.w	r3, r3, #31
 8001392:	687a      	ldr	r2, [r7, #4]
 8001394:	fa22 f303 	lsr.w	r3, r2, r3
 8001398:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <HAL_Init+0x70>)
 800139a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800139c:	4a0b      	ldr	r2, [pc, #44]	; (80013cc <HAL_Init+0x74>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013a2:	2000      	movs	r0, #0
 80013a4:	f000 f814 	bl	80013d0 <HAL_InitTick>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e002      	b.n	80013b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013b2:	f7ff fd89 	bl	8000ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	58024400 	.word	0x58024400
 80013c4:	08008294 	.word	0x08008294
 80013c8:	24000004 	.word	0x24000004
 80013cc:	24000000 	.word	0x24000000

080013d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013d8:	4b15      	ldr	r3, [pc, #84]	; (8001430 <HAL_InitTick+0x60>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d101      	bne.n	80013e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e021      	b.n	8001428 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e4:	4b13      	ldr	r3, [pc, #76]	; (8001434 <HAL_InitTick+0x64>)
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <HAL_InitTick+0x60>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	f001 f825 	bl	800244a <HAL_SYSTICK_Config>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e00e      	b.n	8001428 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d80a      	bhi.n	8001426 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	f04f 30ff 	mov.w	r0, #4294967295
 8001418:	f000 fffd 	bl	8002416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800141c:	4a06      	ldr	r2, [pc, #24]	; (8001438 <HAL_InitTick+0x68>)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e000      	b.n	8001428 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
}
 8001428:	4618      	mov	r0, r3
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2400000c 	.word	0x2400000c
 8001434:	24000000 	.word	0x24000000
 8001438:	24000008 	.word	0x24000008

0800143c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x20>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	461a      	mov	r2, r3
 8001446:	4b06      	ldr	r3, [pc, #24]	; (8001460 <HAL_IncTick+0x24>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4413      	add	r3, r2
 800144c:	4a04      	ldr	r2, [pc, #16]	; (8001460 <HAL_IncTick+0x24>)
 800144e:	6013      	str	r3, [r2, #0]
}
 8001450:	bf00      	nop
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2400000c 	.word	0x2400000c
 8001460:	240001a0 	.word	0x240001a0

08001464 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return uwTick;
 8001468:	4b03      	ldr	r3, [pc, #12]	; (8001478 <HAL_GetTick+0x14>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	240001a0 	.word	0x240001a0

0800147c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001484:	f7ff ffee 	bl	8001464 <HAL_GetTick>
 8001488:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001494:	d005      	beq.n	80014a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001496:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <HAL_Delay+0x44>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	4413      	add	r3, r2
 80014a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014a2:	bf00      	nop
 80014a4:	f7ff ffde 	bl	8001464 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	68fa      	ldr	r2, [r7, #12]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8f7      	bhi.n	80014a4 <HAL_Delay+0x28>
  {
  }
}
 80014b4:	bf00      	nop
 80014b6:	bf00      	nop
 80014b8:	3710      	adds	r7, #16
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2400000c 	.word	0x2400000c

080014c4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80014ce:	4b07      	ldr	r3, [pc, #28]	; (80014ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	43db      	mvns	r3, r3
 80014d6:	401a      	ands	r2, r3
 80014d8:	4904      	ldr	r1, [pc, #16]	; (80014ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	58000400 	.word	0x58000400

080014f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	609a      	str	r2, [r3, #8]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 031f 	and.w	r3, r3, #31
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001582:	4013      	ands	r3, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6093      	str	r3, [r2, #8]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	5fffffc0 	.word	0x5fffffc0

08001598 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	689b      	ldr	r3, [r3, #8]
 80015a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015ac:	d101      	bne.n	80015b2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015ae:	2301      	movs	r3, #1
 80015b0:	e000      	b.n	80015b4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <LL_ADC_EnableInternalRegulator+0x24>)
 80015ce:	4013      	ands	r3, r2
 80015d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	6fffffc0 	.word	0x6fffffc0

080015e8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80015fc:	d101      	bne.n	8001602 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80015fe:	2301      	movs	r3, #1
 8001600:	e000      	b.n	8001604 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001602:	2300      	movs	r3, #0
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689a      	ldr	r2, [r3, #8]
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <LL_ADC_Enable+0x24>)
 800161e:	4013      	ands	r3, r2
 8001620:	f043 0201 	orr.w	r2, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr
 8001634:	7fffffc0 	.word	0x7fffffc0

08001638 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689a      	ldr	r2, [r3, #8]
 8001644:	4b05      	ldr	r3, [pc, #20]	; (800165c <LL_ADC_Disable+0x24>)
 8001646:	4013      	ands	r3, r2
 8001648:	f043 0202 	orr.w	r2, r3, #2
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	7fffffc0 	.word	0x7fffffc0

08001660 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d101      	bne.n	8001678 <LL_ADC_IsEnabled+0x18>
 8001674:	2301      	movs	r3, #1
 8001676:	e000      	b.n	800167a <LL_ADC_IsEnabled+0x1a>
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr

08001686 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b02      	cmp	r3, #2
 8001698:	d101      	bne.n	800169e <LL_ADC_IsDisableOngoing+0x18>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <LL_ADC_IsDisableOngoing+0x1a>
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <LL_ADC_REG_StartConversion+0x24>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	f043 0204 	orr.w	r2, r3, #4
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016c4:	bf00      	nop
 80016c6:	370c      	adds	r7, #12
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	7fffffc0 	.word	0x7fffffc0

080016d4 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <LL_ADC_REG_StopConversion+0x24>)
 80016e2:	4013      	ands	r3, r2
 80016e4:	f043 0210 	orr.w	r2, r3, #16
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	7fffffc0 	.word	0x7fffffc0

080016fc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b04      	cmp	r3, #4
 800170e:	d101      	bne.n	8001714 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001710:	2301      	movs	r3, #1
 8001712:	e000      	b.n	8001716 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001714:	2300      	movs	r3, #0
}
 8001716:	4618      	mov	r0, r3
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
	...

08001724 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <LL_ADC_INJ_StopConversion+0x24>)
 8001732:	4013      	ands	r3, r2
 8001734:	f043 0220 	orr.w	r2, r3, #32
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	7fffffc0 	.word	0x7fffffc0

0800174c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	f003 0308 	and.w	r3, r3, #8
 800175c:	2b08      	cmp	r3, #8
 800175e:	d101      	bne.n	8001764 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001760:	2301      	movs	r3, #1
 8001762:	e000      	b.n	8001766 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b089      	sub	sp, #36	; 0x24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800177c:	2300      	movs	r3, #0
 800177e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e138      	b.n	8001a00 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	2b00      	cmp	r3, #0
 800179a:	d109      	bne.n	80017b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7fe ff65 	bl	800066c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff feef 	bl	8001598 <LL_ADC_IsDeepPowerDownEnabled>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d004      	beq.n	80017ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fed5 	bl	8001574 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff0a 	bl	80015e8 <LL_ADC_IsInternalRegulatorEnabled>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d114      	bne.n	8001804 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff feee 	bl	80015c0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80017e4:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_ADC_Init+0x294>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	4a88      	ldr	r2, [pc, #544]	; (8001a0c <HAL_ADC_Init+0x298>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	099b      	lsrs	r3, r3, #6
 80017f2:	3301      	adds	r3, #1
 80017f4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017f6:	e002      	b.n	80017fe <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d1f9      	bne.n	80017f8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff feed 	bl	80015e8 <LL_ADC_IsInternalRegulatorEnabled>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d10d      	bne.n	8001830 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f043 0210 	orr.w	r2, r3, #16
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff ff61 	bl	80016fc <LL_ADC_REG_IsConversionOngoing>
 800183a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001840:	f003 0310 	and.w	r3, r3, #16
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 80d2 	bne.w	80019ee <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2b00      	cmp	r3, #0
 800184e:	f040 80ce 	bne.w	80019ee <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001856:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800185a:	f043 0202 	orr.w	r2, r3, #2
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fefa 	bl	8001660 <LL_ADC_IsEnabled>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d110      	bne.n	8001894 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001872:	4867      	ldr	r0, [pc, #412]	; (8001a10 <HAL_ADC_Init+0x29c>)
 8001874:	f7ff fef4 	bl	8001660 <LL_ADC_IsEnabled>
 8001878:	4604      	mov	r4, r0
 800187a:	4866      	ldr	r0, [pc, #408]	; (8001a14 <HAL_ADC_Init+0x2a0>)
 800187c:	f7ff fef0 	bl	8001660 <LL_ADC_IsEnabled>
 8001880:	4603      	mov	r3, r0
 8001882:	4323      	orrs	r3, r4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	4619      	mov	r1, r3
 800188e:	4862      	ldr	r0, [pc, #392]	; (8001a18 <HAL_ADC_Init+0x2a4>)
 8001890:	f7ff fe2e 	bl	80014f0 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7d5b      	ldrb	r3, [r3, #21]
 8001898:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800189e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80018a4:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	7f1b      	ldrb	r3, [r3, #28]
 80018aa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018ac:	4313      	orrs	r3, r2
 80018ae:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	7f1b      	ldrb	r3, [r3, #28]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d106      	bne.n	80018c6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a1b      	ldr	r3, [r3, #32]
 80018bc:	3b01      	subs	r3, #1
 80018be:	045b      	lsls	r3, r3, #17
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018d2:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <HAL_ADC_Init+0x2a8>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6812      	ldr	r2, [r2, #0]
 80018f0:	69b9      	ldr	r1, [r7, #24]
 80018f2:	430b      	orrs	r3, r1
 80018f4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff fefe 	bl	80016fc <LL_ADC_REG_IsConversionOngoing>
 8001900:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4618      	mov	r0, r3
 8001908:	f7ff ff20 	bl	800174c <LL_ADC_INJ_IsConversionOngoing>
 800190c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d14a      	bne.n	80019aa <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d147      	bne.n	80019aa <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7d1b      	ldrb	r3, [r3, #20]
 800191e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	68da      	ldr	r2, [r3, #12]
 800192e:	4b3c      	ldr	r3, [pc, #240]	; (8001a20 <HAL_ADC_Init+0x2ac>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	69b9      	ldr	r1, [r7, #24]
 8001938:	430b      	orrs	r3, r1
 800193a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001942:	2b01      	cmp	r3, #1
 8001944:	d11b      	bne.n	800197e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	691a      	ldr	r2, [r3, #16]
 8001952:	4b34      	ldr	r3, [pc, #208]	; (8001a24 <HAL_ADC_Init+0x2b0>)
 8001954:	4013      	ands	r3, r2
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800195a:	3a01      	subs	r2, #1
 800195c:	0411      	lsls	r1, r2, #16
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001962:	4311      	orrs	r1, r2
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001968:	4311      	orrs	r1, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800196e:	430a      	orrs	r2, r1
 8001970:	431a      	orrs	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	611a      	str	r2, [r3, #16]
 800197c:	e007      	b.n	800198e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	691a      	ldr	r2, [r3, #16]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0201 	bic.w	r2, r2, #1
 800198c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	691b      	ldr	r3, [r3, #16]
 8001994:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 fbab 	bl	8002100 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d10c      	bne.n	80019cc <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b8:	f023 010f 	bic.w	r1, r3, #15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	1e5a      	subs	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	631a      	str	r2, [r3, #48]	; 0x30
 80019ca:	e007      	b.n	80019dc <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 020f 	bic.w	r2, r2, #15
 80019da:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	f023 0303 	bic.w	r3, r3, #3
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	655a      	str	r2, [r3, #84]	; 0x54
 80019ec:	e007      	b.n	80019fe <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	f043 0210 	orr.w	r2, r3, #16
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80019fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3724      	adds	r7, #36	; 0x24
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd90      	pop	{r4, r7, pc}
 8001a08:	24000000 	.word	0x24000000
 8001a0c:	053e2d63 	.word	0x053e2d63
 8001a10:	40022000 	.word	0x40022000
 8001a14:	40022100 	.word	0x40022100
 8001a18:	40022300 	.word	0x40022300
 8001a1c:	fff0c003 	.word	0xfff0c003
 8001a20:	ffffbffc 	.word	0xffffbffc
 8001a24:	fc00f81e 	.word	0xfc00f81e

08001a28 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a30:	4856      	ldr	r0, [pc, #344]	; (8001b8c <HAL_ADC_Start+0x164>)
 8001a32:	f7ff fd83 	bl	800153c <LL_ADC_GetMultimode>
 8001a36:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fe5d 	bl	80016fc <LL_ADC_REG_IsConversionOngoing>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f040 809a 	bne.w	8001b7e <HAL_ADC_Start+0x156>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_ADC_Start+0x30>
 8001a54:	2302      	movs	r3, #2
 8001a56:	e095      	b.n	8001b84 <HAL_ADC_Start+0x15c>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f000 fa71 	bl	8001f48 <ADC_Enable>
 8001a66:	4603      	mov	r3, r0
 8001a68:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a6a:	7dfb      	ldrb	r3, [r7, #23]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f040 8081 	bne.w	8001b74 <HAL_ADC_Start+0x14c>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001a76:	4b46      	ldr	r3, [pc, #280]	; (8001b90 <HAL_ADC_Start+0x168>)
 8001a78:	4013      	ands	r3, r2
 8001a7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a43      	ldr	r2, [pc, #268]	; (8001b94 <HAL_ADC_Start+0x16c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d002      	beq.n	8001a92 <HAL_ADC_Start+0x6a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	e000      	b.n	8001a94 <HAL_ADC_Start+0x6c>
 8001a92:	4b41      	ldr	r3, [pc, #260]	; (8001b98 <HAL_ADC_Start+0x170>)
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6812      	ldr	r2, [r2, #0]
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d002      	beq.n	8001aa2 <HAL_ADC_Start+0x7a>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d105      	bne.n	8001aae <HAL_ADC_Start+0x86>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aba:	d106      	bne.n	8001aca <HAL_ADC_Start+0xa2>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f023 0206 	bic.w	r2, r3, #6
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ac8:	e002      	b.n	8001ad0 <HAL_ADC_Start+0xa8>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	221c      	movs	r2, #28
 8001ad6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a2b      	ldr	r2, [pc, #172]	; (8001b94 <HAL_ADC_Start+0x16c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d002      	beq.n	8001af0 <HAL_ADC_Start+0xc8>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	e000      	b.n	8001af2 <HAL_ADC_Start+0xca>
 8001af0:	4b29      	ldr	r3, [pc, #164]	; (8001b98 <HAL_ADC_Start+0x170>)
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6812      	ldr	r2, [r2, #0]
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d008      	beq.n	8001b0c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d005      	beq.n	8001b0c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d002      	beq.n	8001b0c <HAL_ADC_Start+0xe4>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	2b09      	cmp	r3, #9
 8001b0a:	d114      	bne.n	8001b36 <HAL_ADC_Start+0x10e>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68db      	ldr	r3, [r3, #12]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d007      	beq.n	8001b2a <HAL_ADC_Start+0x102>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b22:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fdbc 	bl	80016ac <LL_ADC_REG_StartConversion>
 8001b34:	e025      	b.n	8001b82 <HAL_ADC_Start+0x15a>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a13      	ldr	r2, [pc, #76]	; (8001b94 <HAL_ADC_Start+0x16c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d002      	beq.n	8001b52 <HAL_ADC_Start+0x12a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	e000      	b.n	8001b54 <HAL_ADC_Start+0x12c>
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_ADC_Start+0x170>)
 8001b54:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	68db      	ldr	r3, [r3, #12]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00f      	beq.n	8001b82 <HAL_ADC_Start+0x15a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b66:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	655a      	str	r2, [r3, #84]	; 0x54
 8001b72:	e006      	b.n	8001b82 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001b7c:	e001      	b.n	8001b82 <HAL_ADC_Start+0x15a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40022300 	.word	0x40022300
 8001b90:	fffff0fe 	.word	0xfffff0fe
 8001b94:	40022100 	.word	0x40022100
 8001b98:	40022000 	.word	0x40022000

08001b9c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_Stop+0x16>
 8001bae:	2302      	movs	r3, #2
 8001bb0:	e021      	b.n	8001bf6 <HAL_ADC_Stop+0x5a>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001bba:	2103      	movs	r1, #3
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f907 	bl	8001dd0 <ADC_ConversionStop>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d10f      	bne.n	8001bec <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f000 fa37 	bl	8002040 <ADC_Disable>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001bd6:	7bfb      	ldrb	r3, [r7, #15]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d107      	bne.n	8001bec <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_ADC_Stop+0x64>)
 8001be2:	4013      	ands	r3, r2
 8001be4:	f043 0201 	orr.w	r2, r3, #1
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	ffffeefe 	.word	0xffffeefe

08001c04 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c0e:	4866      	ldr	r0, [pc, #408]	; (8001da8 <HAL_ADC_PollForConversion+0x1a4>)
 8001c10:	f7ff fc94 	bl	800153c <LL_ADC_GetMultimode>
 8001c14:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d102      	bne.n	8001c24 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001c1e:	2308      	movs	r3, #8
 8001c20:	61fb      	str	r3, [r7, #28]
 8001c22:	e02a      	b.n	8001c7a <HAL_ADC_PollForConversion+0x76>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d002      	beq.n	8001c36 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2b09      	cmp	r3, #9
 8001c34:	d111      	bne.n	8001c5a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	f003 0301 	and.w	r3, r3, #1
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d007      	beq.n	8001c54 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c48:	f043 0220 	orr.w	r2, r3, #32
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e0a4      	b.n	8001d9e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c54:	2304      	movs	r3, #4
 8001c56:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8001c58:	e00f      	b.n	8001c7a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001c5a:	4853      	ldr	r0, [pc, #332]	; (8001da8 <HAL_ADC_PollForConversion+0x1a4>)
 8001c5c:	f7ff fc7c 	bl	8001558 <LL_ADC_GetMultiDMATransfer>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6a:	f043 0220 	orr.w	r2, r3, #32
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e093      	b.n	8001d9e <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001c76:	2304      	movs	r3, #4
 8001c78:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001c7a:	f7ff fbf3 	bl	8001464 <HAL_GetTick>
 8001c7e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001c80:	e021      	b.n	8001cc6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d01d      	beq.n	8001cc6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001c8a:	f7ff fbeb 	bl	8001464 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <HAL_ADC_PollForConversion+0x9c>
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d112      	bne.n	8001cc6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d10b      	bne.n	8001cc6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f043 0204 	orr.w	r2, r3, #4
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e06b      	b.n	8001d9e <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0d6      	beq.n	8001c82 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fc16 	bl	8001516 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01c      	beq.n	8001d2a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7d5b      	ldrb	r3, [r3, #21]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d118      	bne.n	8001d2a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0308 	and.w	r3, r3, #8
 8001d02:	2b08      	cmp	r3, #8
 8001d04:	d111      	bne.n	8001d2a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d22:	f043 0201 	orr.w	r2, r3, #1
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <HAL_ADC_PollForConversion+0x1a8>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d002      	beq.n	8001d3a <HAL_ADC_PollForConversion+0x136>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	e000      	b.n	8001d3c <HAL_ADC_PollForConversion+0x138>
 8001d3a:	4b1d      	ldr	r3, [pc, #116]	; (8001db0 <HAL_ADC_PollForConversion+0x1ac>)
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d008      	beq.n	8001d56 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d005      	beq.n	8001d56 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b05      	cmp	r3, #5
 8001d4e:	d002      	beq.n	8001d56 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	2b09      	cmp	r3, #9
 8001d54:	d104      	bne.n	8001d60 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	e00c      	b.n	8001d7a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a11      	ldr	r2, [pc, #68]	; (8001dac <HAL_ADC_PollForConversion+0x1a8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d002      	beq.n	8001d70 <HAL_ADC_PollForConversion+0x16c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e000      	b.n	8001d72 <HAL_ADC_PollForConversion+0x16e>
 8001d70:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_ADC_PollForConversion+0x1ac>)
 8001d72:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	2b08      	cmp	r3, #8
 8001d7e:	d104      	bne.n	8001d8a <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	e008      	b.n	8001d9c <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d103      	bne.n	8001d9c <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	220c      	movs	r2, #12
 8001d9a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40022300 	.word	0x40022300
 8001dac:	40022100 	.word	0x40022100
 8001db0:	40022000 	.word	0x40022000

08001db4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7ff fc88 	bl	80016fc <LL_ADC_REG_IsConversionOngoing>
 8001dec:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fcaa 	bl	800174c <LL_ADC_INJ_IsConversionOngoing>
 8001df8:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d103      	bne.n	8001e08 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 8098 	beq.w	8001f38 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	68db      	ldr	r3, [r3, #12]
 8001e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d02a      	beq.n	8001e6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	7d5b      	ldrb	r3, [r3, #21]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d126      	bne.n	8001e6c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	7d1b      	ldrb	r3, [r3, #20]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d122      	bne.n	8001e6c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8001e26:	2301      	movs	r3, #1
 8001e28:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e2a:	e014      	b.n	8001e56 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <ADC_ConversionStop+0x174>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d90d      	bls.n	8001e50 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e38:	f043 0210 	orr.w	r2, r3, #16
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e44:	f043 0201 	orr.w	r2, r3, #1
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e074      	b.n	8001f3a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	3301      	adds	r3, #1
 8001e54:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	2b40      	cmp	r3, #64	; 0x40
 8001e62:	d1e3      	bne.n	8001e2c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2240      	movs	r2, #64	; 0x40
 8001e6a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d014      	beq.n	8001e9c <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fc40 	bl	80016fc <LL_ADC_REG_IsConversionOngoing>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fbfd 	bl	8001686 <LL_ADC_IsDisableOngoing>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d104      	bne.n	8001e9c <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fc1c 	bl	80016d4 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d014      	beq.n	8001ecc <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fc50 	bl	800174c <LL_ADC_INJ_IsConversionOngoing>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00c      	beq.n	8001ecc <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fbe5 	bl	8001686 <LL_ADC_IsDisableOngoing>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d104      	bne.n	8001ecc <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff fc2c 	bl	8001724 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d005      	beq.n	8001ede <ADC_ConversionStop+0x10e>
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d105      	bne.n	8001ee4 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001ed8:	230c      	movs	r3, #12
 8001eda:	617b      	str	r3, [r7, #20]
        break;
 8001edc:	e005      	b.n	8001eea <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	617b      	str	r3, [r7, #20]
        break;
 8001ee2:	e002      	b.n	8001eea <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]
        break;
 8001ee8:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001eea:	f7ff fabb 	bl	8001464 <HAL_GetTick>
 8001eee:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001ef0:	e01b      	b.n	8001f2a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001ef2:	f7ff fab7 	bl	8001464 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b05      	cmp	r3, #5
 8001efe:	d914      	bls.n	8001f2a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00d      	beq.n	8001f2a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f12:	f043 0210 	orr.w	r2, r3, #16
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1e:	f043 0201 	orr.w	r2, r3, #1
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e007      	b.n	8001f3a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	689a      	ldr	r2, [r3, #8]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	4013      	ands	r3, r2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1dc      	bne.n	8001ef2 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3720      	adds	r7, #32
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	000cdbff 	.word	0x000cdbff

08001f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fb83 	bl	8001660 <LL_ADC_IsEnabled>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d161      	bne.n	8002024 <ADC_Enable+0xdc>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	4b32      	ldr	r3, [pc, #200]	; (8002030 <ADC_Enable+0xe8>)
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00d      	beq.n	8001f8a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f72:	f043 0210 	orr.w	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e04d      	b.n	8002026 <ADC_Enable+0xde>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fb3e 	bl	8001610 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001f94:	f7ff fa66 	bl	8001464 <HAL_GetTick>
 8001f98:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9a:	4826      	ldr	r0, [pc, #152]	; (8002034 <ADC_Enable+0xec>)
 8001f9c:	f7ff face 	bl	800153c <LL_ADC_GetMultimode>
 8001fa0:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a24      	ldr	r2, [pc, #144]	; (8002038 <ADC_Enable+0xf0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d002      	beq.n	8001fb2 <ADC_Enable+0x6a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	e000      	b.n	8001fb4 <ADC_Enable+0x6c>
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <ADC_Enable+0xf4>)
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d02c      	beq.n	8002016 <ADC_Enable+0xce>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d130      	bne.n	8002024 <ADC_Enable+0xdc>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fc2:	e028      	b.n	8002016 <ADC_Enable+0xce>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff fb49 	bl	8001660 <LL_ADC_IsEnabled>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d104      	bne.n	8001fde <ADC_Enable+0x96>
        {
          LL_ADC_Enable(hadc->Instance);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7ff fb19 	bl	8001610 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001fde:	f7ff fa41 	bl	8001464 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d914      	bls.n	8002016 <ADC_Enable+0xce>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d00d      	beq.n	8002016 <ADC_Enable+0xce>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ffe:	f043 0210 	orr.w	r2, r3, #16
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f043 0201 	orr.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e007      	b.n	8002026 <ADC_Enable+0xde>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b01      	cmp	r3, #1
 8002022:	d1cf      	bne.n	8001fc4 <ADC_Enable+0x7c>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	8000003f 	.word	0x8000003f
 8002034:	40022300 	.word	0x40022300
 8002038:	40022100 	.word	0x40022100
 800203c:	40022000 	.word	0x40022000

08002040 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fb1a 	bl	8001686 <LL_ADC_IsDisableOngoing>
 8002052:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fb01 	bl	8001660 <LL_ADC_IsEnabled>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d047      	beq.n	80020f4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d144      	bne.n	80020f4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030d 	and.w	r3, r3, #13
 8002074:	2b01      	cmp	r3, #1
 8002076:	d10c      	bne.n	8002092 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff fadb 	bl	8001638 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2203      	movs	r2, #3
 8002088:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800208a:	f7ff f9eb 	bl	8001464 <HAL_GetTick>
 800208e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002090:	e029      	b.n	80020e6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002096:	f043 0210 	orr.w	r2, r3, #16
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a2:	f043 0201 	orr.w	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e023      	b.n	80020f6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020ae:	f7ff f9d9 	bl	8001464 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d914      	bls.n	80020e6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00d      	beq.n	80020e6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ce:	f043 0210 	orr.w	r2, r3, #16
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e007      	b.n	80020f6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1dc      	bne.n	80020ae <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
	...

08002100 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002108:	4b60      	ldr	r3, [pc, #384]	; (800228c <ADC_ConfigureBoostMode+0x18c>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d01c      	beq.n	800214e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8002114:	f001 fca6 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8002118:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002122:	d010      	beq.n	8002146 <ADC_ConfigureBoostMode+0x46>
 8002124:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002128:	d873      	bhi.n	8002212 <ADC_ConfigureBoostMode+0x112>
 800212a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800212e:	d002      	beq.n	8002136 <ADC_ConfigureBoostMode+0x36>
 8002130:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002134:	d16d      	bne.n	8002212 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	0c1b      	lsrs	r3, r3, #16
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002142:	60fb      	str	r3, [r7, #12]
        break;
 8002144:	e068      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	60fb      	str	r3, [r7, #12]
        break;
 800214c:	e064      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800214e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002152:	f04f 0100 	mov.w	r1, #0
 8002156:	f002 fe9f 	bl	8004e98 <HAL_RCCEx_GetPeriphCLKFreq>
 800215a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002164:	d051      	beq.n	800220a <ADC_ConfigureBoostMode+0x10a>
 8002166:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800216a:	d854      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 800216c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002170:	d047      	beq.n	8002202 <ADC_ConfigureBoostMode+0x102>
 8002172:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002176:	d84e      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 8002178:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800217c:	d03d      	beq.n	80021fa <ADC_ConfigureBoostMode+0xfa>
 800217e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002182:	d848      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 8002184:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002188:	d033      	beq.n	80021f2 <ADC_ConfigureBoostMode+0xf2>
 800218a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800218e:	d842      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 8002190:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002194:	d029      	beq.n	80021ea <ADC_ConfigureBoostMode+0xea>
 8002196:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800219a:	d83c      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 800219c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021a0:	d01a      	beq.n	80021d8 <ADC_ConfigureBoostMode+0xd8>
 80021a2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80021a6:	d836      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 80021a8:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021ac:	d014      	beq.n	80021d8 <ADC_ConfigureBoostMode+0xd8>
 80021ae:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80021b2:	d830      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 80021b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021b8:	d00e      	beq.n	80021d8 <ADC_ConfigureBoostMode+0xd8>
 80021ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021be:	d82a      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 80021c0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021c4:	d008      	beq.n	80021d8 <ADC_ConfigureBoostMode+0xd8>
 80021c6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80021ca:	d824      	bhi.n	8002216 <ADC_ConfigureBoostMode+0x116>
 80021cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80021d0:	d002      	beq.n	80021d8 <ADC_ConfigureBoostMode+0xd8>
 80021d2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80021d6:	d11e      	bne.n	8002216 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0c9b      	lsrs	r3, r3, #18
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	68fa      	ldr	r2, [r7, #12]
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	60fb      	str	r3, [r7, #12]
        break;
 80021e8:	e016      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	60fb      	str	r3, [r7, #12]
        break;
 80021f0:	e012      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	095b      	lsrs	r3, r3, #5
 80021f6:	60fb      	str	r3, [r7, #12]
        break;
 80021f8:	e00e      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	099b      	lsrs	r3, r3, #6
 80021fe:	60fb      	str	r3, [r7, #12]
        break;
 8002200:	e00a      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	09db      	lsrs	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]
        break;
 8002208:	e006      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	0a1b      	lsrs	r3, r3, #8
 800220e:	60fb      	str	r3, [r7, #12]
        break;
 8002210:	e002      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
        break;
 8002212:	bf00      	nop
 8002214:	e000      	b.n	8002218 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8002216:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	085b      	lsrs	r3, r3, #1
 800221c:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a1b      	ldr	r2, [pc, #108]	; (8002290 <ADC_ConfigureBoostMode+0x190>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d808      	bhi.n	8002238 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002234:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002236:	e025      	b.n	8002284 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	4a16      	ldr	r2, [pc, #88]	; (8002294 <ADC_ConfigureBoostMode+0x194>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d80a      	bhi.n	8002256 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	e016      	b.n	8002284 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <ADC_ConfigureBoostMode+0x198>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d80a      	bhi.n	8002274 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002270:	609a      	str	r2, [r3, #8]
}
 8002272:	e007      	b.n	8002284 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002282:	609a      	str	r2, [r3, #8]
}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40022300 	.word	0x40022300
 8002290:	005f5e10 	.word	0x005f5e10
 8002294:	00bebc20 	.word	0x00bebc20
 8002298:	017d7840 	.word	0x017d7840

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <__NVIC_SetPriorityGrouping+0x40>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x40>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	05fa0000 	.word	0x05fa0000

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	; (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	6039      	str	r1, [r7, #0]
 800230a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800230c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002310:	2b00      	cmp	r3, #0
 8002312:	db0a      	blt.n	800232a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	b2da      	uxtb	r2, r3
 8002318:	490c      	ldr	r1, [pc, #48]	; (800234c <__NVIC_SetPriority+0x4c>)
 800231a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231e:	0112      	lsls	r2, r2, #4
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	440b      	add	r3, r1
 8002324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002328:	e00a      	b.n	8002340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b2da      	uxtb	r2, r3
 800232e:	4908      	ldr	r1, [pc, #32]	; (8002350 <__NVIC_SetPriority+0x50>)
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	3b04      	subs	r3, #4
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	440b      	add	r3, r1
 800233e:	761a      	strb	r2, [r3, #24]
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	e000e100 	.word	0xe000e100
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002354:	b480      	push	{r7}
 8002356:	b089      	sub	sp, #36	; 0x24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f003 0307 	and.w	r3, r3, #7
 8002366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	f1c3 0307 	rsb	r3, r3, #7
 800236e:	2b04      	cmp	r3, #4
 8002370:	bf28      	it	cs
 8002372:	2304      	movcs	r3, #4
 8002374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	3304      	adds	r3, #4
 800237a:	2b06      	cmp	r3, #6
 800237c:	d902      	bls.n	8002384 <NVIC_EncodePriority+0x30>
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3b03      	subs	r3, #3
 8002382:	e000      	b.n	8002386 <NVIC_EncodePriority+0x32>
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002388:	f04f 32ff 	mov.w	r2, #4294967295
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43da      	mvns	r2, r3
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800239c:	f04f 31ff 	mov.w	r1, #4294967295
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43d9      	mvns	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023ac:	4313      	orrs	r3, r2
         );
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3724      	adds	r7, #36	; 0x24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
	...

080023bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023cc:	d301      	bcc.n	80023d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ce:	2301      	movs	r3, #1
 80023d0:	e00f      	b.n	80023f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023d2:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <SysTick_Config+0x40>)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023da:	210f      	movs	r1, #15
 80023dc:	f04f 30ff 	mov.w	r0, #4294967295
 80023e0:	f7ff ff8e 	bl	8002300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <SysTick_Config+0x40>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023ea:	4b04      	ldr	r3, [pc, #16]	; (80023fc <SysTick_Config+0x40>)
 80023ec:	2207      	movs	r2, #7
 80023ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	e000e010 	.word	0xe000e010

08002400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ff47 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	4603      	mov	r3, r0
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002424:	f7ff ff5e 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 8002428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	68b9      	ldr	r1, [r7, #8]
 800242e:	6978      	ldr	r0, [r7, #20]
 8002430:	f7ff ff90 	bl	8002354 <NVIC_EncodePriority>
 8002434:	4602      	mov	r2, r0
 8002436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f7ff ff5f 	bl	8002300 <__NVIC_SetPriority>
}
 8002442:	bf00      	nop
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}

0800244a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800244a:	b580      	push	{r7, lr}
 800244c:	b082      	sub	sp, #8
 800244e:	af00      	add	r7, sp, #0
 8002450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff ffb2 	bl	80023bc <SysTick_Config>
 8002458:	4603      	mov	r3, r0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e014      	b.n	800249e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	791b      	ldrb	r3, [r3, #4]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d105      	bne.n	800248a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f7fe f983 	bl	8000790 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2202      	movs	r2, #2
 800248e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2201      	movs	r2, #1
 800249a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800249c:	2300      	movs	r3, #0
}
 800249e:	4618      	mov	r0, r3
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	795b      	ldrb	r3, [r3, #5]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d101      	bne.n	80024c0 <HAL_DAC_ConfigChannel+0x18>
 80024bc:	2302      	movs	r3, #2
 80024be:	e12a      	b.n	8002716 <HAL_DAC_ConfigChannel+0x26e>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2201      	movs	r2, #1
 80024c4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2202      	movs	r2, #2
 80024ca:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b04      	cmp	r3, #4
 80024d2:	f040 8081 	bne.w	80025d8 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80024d6:	f7fe ffc5 	bl	8001464 <HAL_GetTick>
 80024da:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d140      	bne.n	8002564 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024e2:	e018      	b.n	8002516 <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80024e4:	f7fe ffbe 	bl	8001464 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d911      	bls.n	8002516 <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f8:	4b89      	ldr	r3, [pc, #548]	; (8002720 <HAL_DAC_ConfigChannel+0x278>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00a      	beq.n	8002516 <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f043 0208 	orr.w	r2, r3, #8
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2203      	movs	r2, #3
 8002510:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e0ff      	b.n	8002716 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800251c:	4b80      	ldr	r3, [pc, #512]	; (8002720 <HAL_DAC_ConfigChannel+0x278>)
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1df      	bne.n	80024e4 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8002524:	2001      	movs	r0, #1
 8002526:	f7fe ffa9 	bl	800147c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	6992      	ldr	r2, [r2, #24]
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
 8002534:	e023      	b.n	800257e <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002536:	f7fe ff95 	bl	8001464 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b01      	cmp	r3, #1
 8002542:	d90f      	bls.n	8002564 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800254a:	2b00      	cmp	r3, #0
 800254c:	da0a      	bge.n	8002564 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f043 0208 	orr.w	r2, r3, #8
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2203      	movs	r2, #3
 800255e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0d8      	b.n	8002716 <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800256a:	2b00      	cmp	r3, #0
 800256c:	dbe3      	blt.n	8002536 <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 800256e:	2001      	movs	r0, #1
 8002570:	f7fe ff84 	bl	800147c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	6992      	ldr	r2, [r2, #24]
 800257c:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800258e:	fa01 f303 	lsl.w	r3, r1, r3
 8002592:	43db      	mvns	r3, r3
 8002594:	ea02 0103 	and.w	r1, r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	69da      	ldr	r2, [r3, #28]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	f003 0310 	and.w	r3, r3, #16
 80025a2:	409a      	lsls	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	430a      	orrs	r2, r1
 80025aa:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	21ff      	movs	r1, #255	; 0xff
 80025ba:	fa01 f303 	lsl.w	r3, r1, r3
 80025be:	43db      	mvns	r3, r3
 80025c0:	ea02 0103 	and.w	r1, r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6a1a      	ldr	r2, [r3, #32]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	409a      	lsls	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d11d      	bne.n	800261c <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e6:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	221f      	movs	r2, #31
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	4013      	ands	r3, r2
 80025fa:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f003 0310 	and.w	r3, r3, #16
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002622:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f003 0310 	and.w	r3, r3, #16
 800262a:	2207      	movs	r2, #7
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d102      	bne.n	8002646 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	e00f      	b.n	8002666 <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b02      	cmp	r3, #2
 800264c:	d102      	bne.n	8002654 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800264e:	2301      	movs	r3, #1
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	e008      	b.n	8002666 <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800265c:	2301      	movs	r3, #1
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	e001      	b.n	8002666 <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002662:	2300      	movs	r3, #0
 8002664:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	4313      	orrs	r3, r2
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	4313      	orrs	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	693a      	ldr	r2, [r7, #16]
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	697a      	ldr	r2, [r7, #20]
 8002684:	4313      	orrs	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	6819      	ldr	r1, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4013      	ands	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	693a      	ldr	r2, [r7, #16]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6819      	ldr	r1, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	22c0      	movs	r2, #192	; 0xc0
 80026fa:	fa02 f303 	lsl.w	r3, r2, r3
 80026fe:	43da      	mvns	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	400a      	ands	r2, r1
 8002706:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	2201      	movs	r2, #1
 800270c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2200      	movs	r2, #0
 8002712:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3720      	adds	r7, #32
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20008000 	.word	0x20008000

08002724 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002724:	b480      	push	{r7}
 8002726:	b089      	sub	sp, #36	; 0x24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002732:	4b89      	ldr	r3, [pc, #548]	; (8002958 <HAL_GPIO_Init+0x234>)
 8002734:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002736:	e194      	b.n	8002a62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	2101      	movs	r1, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa01 f303 	lsl.w	r3, r1, r3
 8002744:	4013      	ands	r3, r2
 8002746:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b00      	cmp	r3, #0
 800274c:	f000 8186 	beq.w	8002a5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b01      	cmp	r3, #1
 800275a:	d005      	beq.n	8002768 <HAL_GPIO_Init+0x44>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d130      	bne.n	80027ca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	2203      	movs	r2, #3
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	43db      	mvns	r3, r3
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	4013      	ands	r3, r2
 800277e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68da      	ldr	r2, [r3, #12]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69ba      	ldr	r2, [r7, #24]
 8002796:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800279e:	2201      	movs	r2, #1
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	091b      	lsrs	r3, r3, #4
 80027b4:	f003 0201 	and.w	r2, r3, #1
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b03      	cmp	r3, #3
 80027d4:	d017      	beq.n	8002806 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	005b      	lsls	r3, r3, #1
 80027e0:	2203      	movs	r2, #3
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43db      	mvns	r3, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4013      	ands	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d123      	bne.n	800285a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	08da      	lsrs	r2, r3, #3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3208      	adds	r2, #8
 800281a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f003 0307 	and.w	r3, r3, #7
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	220f      	movs	r2, #15
 800282a:	fa02 f303 	lsl.w	r3, r2, r3
 800282e:	43db      	mvns	r3, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4013      	ands	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	691a      	ldr	r2, [r3, #16]
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	08da      	lsrs	r2, r3, #3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3208      	adds	r2, #8
 8002854:	69b9      	ldr	r1, [r7, #24]
 8002856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	2203      	movs	r2, #3
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 0203 	and.w	r2, r3, #3
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002896:	2b00      	cmp	r3, #0
 8002898:	f000 80e0 	beq.w	8002a5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800289c:	4b2f      	ldr	r3, [pc, #188]	; (800295c <HAL_GPIO_Init+0x238>)
 800289e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80028a2:	4a2e      	ldr	r2, [pc, #184]	; (800295c <HAL_GPIO_Init+0x238>)
 80028a4:	f043 0302 	orr.w	r3, r3, #2
 80028a8:	f8c2 3154 	str.w	r3, [r2, #340]	; 0x154
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <HAL_GPIO_Init+0x238>)
 80028ae:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80028b2:	f003 0302 	and.w	r3, r3, #2
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ba:	4a29      	ldr	r2, [pc, #164]	; (8002960 <HAL_GPIO_Init+0x23c>)
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	3302      	adds	r3, #2
 80028c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	220f      	movs	r2, #15
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69ba      	ldr	r2, [r7, #24]
 80028da:	4013      	ands	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a20      	ldr	r2, [pc, #128]	; (8002964 <HAL_GPIO_Init+0x240>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d052      	beq.n	800298c <HAL_GPIO_Init+0x268>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_GPIO_Init+0x244>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d031      	beq.n	8002952 <HAL_GPIO_Init+0x22e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1e      	ldr	r2, [pc, #120]	; (800296c <HAL_GPIO_Init+0x248>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d02b      	beq.n	800294e <HAL_GPIO_Init+0x22a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a1d      	ldr	r2, [pc, #116]	; (8002970 <HAL_GPIO_Init+0x24c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d025      	beq.n	800294a <HAL_GPIO_Init+0x226>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a1c      	ldr	r2, [pc, #112]	; (8002974 <HAL_GPIO_Init+0x250>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d01f      	beq.n	8002946 <HAL_GPIO_Init+0x222>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a1b      	ldr	r2, [pc, #108]	; (8002978 <HAL_GPIO_Init+0x254>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d019      	beq.n	8002942 <HAL_GPIO_Init+0x21e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a1a      	ldr	r2, [pc, #104]	; (800297c <HAL_GPIO_Init+0x258>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0x21a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_GPIO_Init+0x25c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00d      	beq.n	800293a <HAL_GPIO_Init+0x216>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a18      	ldr	r2, [pc, #96]	; (8002984 <HAL_GPIO_Init+0x260>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d007      	beq.n	8002936 <HAL_GPIO_Init+0x212>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_GPIO_Init+0x264>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d101      	bne.n	8002932 <HAL_GPIO_Init+0x20e>
 800292e:	2309      	movs	r3, #9
 8002930:	e02d      	b.n	800298e <HAL_GPIO_Init+0x26a>
 8002932:	230a      	movs	r3, #10
 8002934:	e02b      	b.n	800298e <HAL_GPIO_Init+0x26a>
 8002936:	2308      	movs	r3, #8
 8002938:	e029      	b.n	800298e <HAL_GPIO_Init+0x26a>
 800293a:	2307      	movs	r3, #7
 800293c:	e027      	b.n	800298e <HAL_GPIO_Init+0x26a>
 800293e:	2306      	movs	r3, #6
 8002940:	e025      	b.n	800298e <HAL_GPIO_Init+0x26a>
 8002942:	2305      	movs	r3, #5
 8002944:	e023      	b.n	800298e <HAL_GPIO_Init+0x26a>
 8002946:	2304      	movs	r3, #4
 8002948:	e021      	b.n	800298e <HAL_GPIO_Init+0x26a>
 800294a:	2303      	movs	r3, #3
 800294c:	e01f      	b.n	800298e <HAL_GPIO_Init+0x26a>
 800294e:	2302      	movs	r3, #2
 8002950:	e01d      	b.n	800298e <HAL_GPIO_Init+0x26a>
 8002952:	2301      	movs	r3, #1
 8002954:	e01b      	b.n	800298e <HAL_GPIO_Init+0x26a>
 8002956:	bf00      	nop
 8002958:	58000080 	.word	0x58000080
 800295c:	58024400 	.word	0x58024400
 8002960:	58000400 	.word	0x58000400
 8002964:	58020000 	.word	0x58020000
 8002968:	58020400 	.word	0x58020400
 800296c:	58020800 	.word	0x58020800
 8002970:	58020c00 	.word	0x58020c00
 8002974:	58021000 	.word	0x58021000
 8002978:	58021400 	.word	0x58021400
 800297c:	58021800 	.word	0x58021800
 8002980:	58021c00 	.word	0x58021c00
 8002984:	58022000 	.word	0x58022000
 8002988:	58022400 	.word	0x58022400
 800298c:	2300      	movs	r3, #0
 800298e:	69fa      	ldr	r2, [r7, #28]
 8002990:	f002 0203 	and.w	r2, r2, #3
 8002994:	0092      	lsls	r2, r2, #2
 8002996:	4093      	lsls	r3, r2
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800299e:	4938      	ldr	r1, [pc, #224]	; (8002a80 <HAL_GPIO_Init+0x35c>)
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	089b      	lsrs	r3, r3, #2
 80029a4:	3302      	adds	r3, #2
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80029ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80029d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80029da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	43db      	mvns	r3, r3
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	4013      	ands	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	43db      	mvns	r3, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4013      	ands	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002a4e:	69ba      	ldr	r2, [r7, #24]
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f47f ae63 	bne.w	8002738 <HAL_GPIO_Init+0x14>
  }
}
 8002a72:	bf00      	nop
 8002a74:	bf00      	nop
 8002a76:	3724      	adds	r7, #36	; 0x24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	58000400 	.word	0x58000400

08002a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b083      	sub	sp, #12
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	460b      	mov	r3, r1
 8002a8e:	807b      	strh	r3, [r7, #2]
 8002a90:	4613      	mov	r3, r2
 8002a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002a94:	787b      	ldrb	r3, [r7, #1]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a9a:	887a      	ldrh	r2, [r7, #2]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002aa0:	e003      	b.n	8002aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aa2:	887b      	ldrh	r3, [r7, #2]
 8002aa4:	041a      	lsls	r2, r3, #16
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	619a      	str	r2, [r3, #24]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b085      	sub	sp, #20
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
 8002abe:	460b      	mov	r3, r1
 8002ac0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ac8:	887a      	ldrh	r2, [r7, #2]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	041a      	lsls	r2, r3, #16
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	43d9      	mvns	r1, r3
 8002ad4:	887b      	ldrh	r3, [r7, #2]
 8002ad6:	400b      	ands	r3, r1
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	619a      	str	r2, [r3, #24]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
	...

08002aec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002af4:	4b29      	ldr	r3, [pc, #164]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	2b06      	cmp	r3, #6
 8002afe:	d00a      	beq.n	8002b16 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e040      	b.n	8002b94 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	e03e      	b.n	8002b94 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002b16:	4b21      	ldr	r3, [pc, #132]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002b1e:	491f      	ldr	r1, [pc, #124]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002b26:	f7fe fc9d 	bl	8001464 <HAL_GetTick>
 8002b2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b2c:	e009      	b.n	8002b42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b2e:	f7fe fc99 	bl	8001464 <HAL_GetTick>
 8002b32:	4602      	mov	r2, r0
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1ad3      	subs	r3, r2, r3
 8002b38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b3c:	d901      	bls.n	8002b42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e028      	b.n	8002b94 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002b42:	4b16      	ldr	r3, [pc, #88]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b4e:	d1ee      	bne.n	8002b2e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b1e      	cmp	r3, #30
 8002b54:	d008      	beq.n	8002b68 <HAL_PWREx_ConfigSupply+0x7c>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b2e      	cmp	r3, #46	; 0x2e
 8002b5a:	d005      	beq.n	8002b68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b1d      	cmp	r3, #29
 8002b60:	d002      	beq.n	8002b68 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b2d      	cmp	r3, #45	; 0x2d
 8002b66:	d114      	bne.n	8002b92 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002b68:	f7fe fc7c 	bl	8001464 <HAL_GetTick>
 8002b6c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b6e:	e009      	b.n	8002b84 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002b70:	f7fe fc78 	bl	8001464 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7e:	d901      	bls.n	8002b84 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e007      	b.n	8002b94 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_PWREx_ConfigSupply+0xb0>)
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d1ee      	bne.n	8002b70 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	58024800 	.word	0x58024800

08002ba0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08c      	sub	sp, #48	; 0x30
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	f000 bc1f 	b.w	80033f2 <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80b3 	beq.w	8002d28 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bc2:	4b95      	ldr	r3, [pc, #596]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bcc:	4b92      	ldr	r3, [pc, #584]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd4:	2b10      	cmp	r3, #16
 8002bd6:	d007      	beq.n	8002be8 <HAL_RCC_OscConfig+0x48>
 8002bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bda:	2b18      	cmp	r3, #24
 8002bdc:	d112      	bne.n	8002c04 <HAL_RCC_OscConfig+0x64>
 8002bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d10d      	bne.n	8002c04 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002be8:	4b8b      	ldr	r3, [pc, #556]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8098 	beq.w	8002d26 <HAL_RCC_OscConfig+0x186>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 8093 	bne.w	8002d26 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e3f6      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCC_OscConfig+0x7c>
 8002c0e:	4b82      	ldr	r3, [pc, #520]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a81      	ldr	r2, [pc, #516]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c18:	6013      	str	r3, [r2, #0]
 8002c1a:	e058      	b.n	8002cce <HAL_RCC_OscConfig+0x12e>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d112      	bne.n	8002c4a <HAL_RCC_OscConfig+0xaa>
 8002c24:	4b7c      	ldr	r3, [pc, #496]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a7b      	ldr	r2, [pc, #492]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c2e:	6013      	str	r3, [r2, #0]
 8002c30:	4b79      	ldr	r3, [pc, #484]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a78      	ldr	r2, [pc, #480]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c36:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c3a:	6013      	str	r3, [r2, #0]
 8002c3c:	4b76      	ldr	r3, [pc, #472]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a75      	ldr	r2, [pc, #468]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e041      	b.n	8002cce <HAL_RCC_OscConfig+0x12e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c52:	d112      	bne.n	8002c7a <HAL_RCC_OscConfig+0xda>
 8002c54:	4b70      	ldr	r3, [pc, #448]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6f      	ldr	r2, [pc, #444]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	4b6d      	ldr	r3, [pc, #436]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a6c      	ldr	r2, [pc, #432]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c66:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b6a      	ldr	r3, [pc, #424]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a69      	ldr	r2, [pc, #420]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	e029      	b.n	8002cce <HAL_RCC_OscConfig+0x12e>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8002c82:	d112      	bne.n	8002caa <HAL_RCC_OscConfig+0x10a>
 8002c84:	4b64      	ldr	r3, [pc, #400]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a63      	ldr	r2, [pc, #396]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c8e:	6013      	str	r3, [r2, #0]
 8002c90:	4b61      	ldr	r3, [pc, #388]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a60      	ldr	r2, [pc, #384]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b5e      	ldr	r3, [pc, #376]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a5d      	ldr	r2, [pc, #372]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e011      	b.n	8002cce <HAL_RCC_OscConfig+0x12e>
 8002caa:	4b5b      	ldr	r3, [pc, #364]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a5a      	ldr	r2, [pc, #360]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002cb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b58      	ldr	r3, [pc, #352]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a57      	ldr	r2, [pc, #348]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002cbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a54      	ldr	r2, [pc, #336]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002cc8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002ccc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d013      	beq.n	8002cfe <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7fe fbc5 	bl	8001464 <HAL_GetTick>
 8002cda:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cde:	f7fe fbc1 	bl	8001464 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b64      	cmp	r3, #100	; 0x64
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e380      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf0:	4b49      	ldr	r3, [pc, #292]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x13e>
 8002cfc:	e014      	b.n	8002d28 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fbb1 	bl	8001464 <HAL_GetTick>
 8002d02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d04:	e008      	b.n	8002d18 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d06:	f7fe fbad 	bl	8001464 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	2b64      	cmp	r3, #100	; 0x64
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e36c      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002d18:	4b3f      	ldr	r3, [pc, #252]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1f0      	bne.n	8002d06 <HAL_RCC_OscConfig+0x166>
 8002d24:	e000      	b.n	8002d28 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0302 	and.w	r3, r3, #2
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 808c 	beq.w	8002e4e <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d36:	4b38      	ldr	r3, [pc, #224]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d3e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d40:	4b35      	ldr	r3, [pc, #212]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <HAL_RCC_OscConfig+0x1bc>
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	2b18      	cmp	r3, #24
 8002d50:	d137      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x222>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d132      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d5c:	4b2e      	ldr	r3, [pc, #184]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0304 	and.w	r3, r3, #4
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d005      	beq.n	8002d74 <HAL_RCC_OscConfig+0x1d4>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d101      	bne.n	8002d74 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e33e      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002d74:	4b28      	ldr	r3, [pc, #160]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 0219 	bic.w	r2, r3, #25
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	4925      	ldr	r1, [pc, #148]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d86:	f7fe fb6d 	bl	8001464 <HAL_GetTick>
 8002d8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d8e:	f7fe fb69 	bl	8001464 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e328      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002da0:	4b1d      	ldr	r3, [pc, #116]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dac:	4b1a      	ldr	r3, [pc, #104]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	061b      	lsls	r3, r3, #24
 8002dba:	4917      	ldr	r1, [pc, #92]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002dc0:	e045      	b.n	8002e4e <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002dca:	4b13      	ldr	r3, [pc, #76]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0219 	bic.w	r2, r3, #25
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	4910      	ldr	r1, [pc, #64]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fb42 	bl	8001464 <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de4:	f7fe fb3e 	bl	8001464 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e2fd      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0304 	and.w	r3, r3, #4
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	061b      	lsls	r3, r3, #24
 8002e10:	4901      	ldr	r1, [pc, #4]	; (8002e18 <HAL_RCC_OscConfig+0x278>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	604b      	str	r3, [r1, #4]
 8002e16:	e01a      	b.n	8002e4e <HAL_RCC_OscConfig+0x2ae>
 8002e18:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e1c:	4b97      	ldr	r3, [pc, #604]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a96      	ldr	r2, [pc, #600]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002e22:	f023 0301 	bic.w	r3, r3, #1
 8002e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e28:	f7fe fb1c 	bl	8001464 <HAL_GetTick>
 8002e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e2e:	e008      	b.n	8002e42 <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e30:	f7fe fb18 	bl	8001464 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e2d7      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002e42:	4b8e      	ldr	r3, [pc, #568]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0304 	and.w	r3, r3, #4
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1f0      	bne.n	8002e30 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f003 0310 	and.w	r3, r3, #16
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d06a      	beq.n	8002f30 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5a:	4b88      	ldr	r3, [pc, #544]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e64:	4b85      	ldr	r3, [pc, #532]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d007      	beq.n	8002e80 <HAL_RCC_OscConfig+0x2e0>
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b18      	cmp	r3, #24
 8002e74:	d11b      	bne.n	8002eae <HAL_RCC_OscConfig+0x30e>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d116      	bne.n	8002eae <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002e80:	4b7e      	ldr	r3, [pc, #504]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2f8>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b80      	cmp	r3, #128	; 0x80
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e2ac      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002e98:	4b78      	ldr	r3, [pc, #480]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	061b      	lsls	r3, r3, #24
 8002ea6:	4975      	ldr	r1, [pc, #468]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002eac:	e040      	b.n	8002f30 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d023      	beq.n	8002efe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002eb6:	4b71      	ldr	r3, [pc, #452]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a70      	ldr	r2, [pc, #448]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec2:	f7fe facf 	bl	8001464 <HAL_GetTick>
 8002ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ec8:	e008      	b.n	8002edc <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002eca:	f7fe facb 	bl	8001464 <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e28a      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002edc:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0f0      	beq.n	8002eca <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ee8:	4b64      	ldr	r3, [pc, #400]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	4961      	ldr	r1, [pc, #388]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60cb      	str	r3, [r1, #12]
 8002efc:	e018      	b.n	8002f30 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002efe:	4b5f      	ldr	r3, [pc, #380]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a5e      	ldr	r2, [pc, #376]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe faab 	bl	8001464 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002f12:	f7fe faa7 	bl	8001464 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e266      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002f24:	4b55      	ldr	r3, [pc, #340]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d036      	beq.n	8002faa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d019      	beq.n	8002f78 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f44:	4b4d      	ldr	r3, [pc, #308]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f48:	4a4c      	ldr	r2, [pc, #304]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fe fa88 	bl	8001464 <HAL_GetTick>
 8002f54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f56:	e008      	b.n	8002f6a <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f58:	f7fe fa84 	bl	8001464 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e243      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002f6a:	4b44      	ldr	r3, [pc, #272]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d0f0      	beq.n	8002f58 <HAL_RCC_OscConfig+0x3b8>
 8002f76:	e018      	b.n	8002faa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f78:	4b40      	ldr	r3, [pc, #256]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	4a3f      	ldr	r2, [pc, #252]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002f7e:	f023 0301 	bic.w	r3, r3, #1
 8002f82:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f84:	f7fe fa6e 	bl	8001464 <HAL_GetTick>
 8002f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f8c:	f7fe fa6a 	bl	8001464 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e229      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f0      	bne.n	8002f8c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d036      	beq.n	8003024 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d019      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fbe:	4b2f      	ldr	r3, [pc, #188]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a2e      	ldr	r2, [pc, #184]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002fc4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fc8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002fca:	f7fe fa4b 	bl	8001464 <HAL_GetTick>
 8002fce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fd0:	e008      	b.n	8002fe4 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fd2:	f7fe fa47 	bl	8001464 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e206      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002fe4:	4b25      	ldr	r3, [pc, #148]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0f0      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x432>
 8002ff0:	e018      	b.n	8003024 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ff2:	4b22      	ldr	r3, [pc, #136]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a21      	ldr	r2, [pc, #132]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8002ff8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ffc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fa31 	bl	8001464 <HAL_GetTick>
 8003002:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003006:	f7fe fa2d 	bl	8001464 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e1ec      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80af 	beq.w	8003190 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003032:	4b13      	ldr	r3, [pc, #76]	; (8003080 <HAL_RCC_OscConfig+0x4e0>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a12      	ldr	r2, [pc, #72]	; (8003080 <HAL_RCC_OscConfig+0x4e0>)
 8003038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800303e:	f7fe fa11 	bl	8001464 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003046:	f7fe fa0d 	bl	8001464 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b64      	cmp	r3, #100	; 0x64
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1cc      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003058:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_OscConfig+0x4e0>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10b      	bne.n	8003084 <HAL_RCC_OscConfig+0x4e4>
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	4a02      	ldr	r2, [pc, #8]	; (800307c <HAL_RCC_OscConfig+0x4dc>)
 8003072:	f043 0301 	orr.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	; 0x70
 8003078:	e05b      	b.n	8003132 <HAL_RCC_OscConfig+0x592>
 800307a:	bf00      	nop
 800307c:	58024400 	.word	0x58024400
 8003080:	58024800 	.word	0x58024800
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d112      	bne.n	80030b2 <HAL_RCC_OscConfig+0x512>
 800308c:	4b9d      	ldr	r3, [pc, #628]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800308e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003090:	4a9c      	ldr	r2, [pc, #624]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003092:	f023 0301 	bic.w	r3, r3, #1
 8003096:	6713      	str	r3, [r2, #112]	; 0x70
 8003098:	4b9a      	ldr	r3, [pc, #616]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800309a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309c:	4a99      	ldr	r2, [pc, #612]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800309e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030a2:	6713      	str	r3, [r2, #112]	; 0x70
 80030a4:	4b97      	ldr	r3, [pc, #604]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	4a96      	ldr	r2, [pc, #600]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030aa:	f023 0304 	bic.w	r3, r3, #4
 80030ae:	6713      	str	r3, [r2, #112]	; 0x70
 80030b0:	e03f      	b.n	8003132 <HAL_RCC_OscConfig+0x592>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d112      	bne.n	80030e0 <HAL_RCC_OscConfig+0x540>
 80030ba:	4b92      	ldr	r3, [pc, #584]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030be:	4a91      	ldr	r2, [pc, #580]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030c0:	f043 0304 	orr.w	r3, r3, #4
 80030c4:	6713      	str	r3, [r2, #112]	; 0x70
 80030c6:	4b8f      	ldr	r3, [pc, #572]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ca:	4a8e      	ldr	r2, [pc, #568]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030d0:	6713      	str	r3, [r2, #112]	; 0x70
 80030d2:	4b8c      	ldr	r3, [pc, #560]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	4a8b      	ldr	r2, [pc, #556]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030d8:	f043 0301 	orr.w	r3, r3, #1
 80030dc:	6713      	str	r3, [r2, #112]	; 0x70
 80030de:	e028      	b.n	8003132 <HAL_RCC_OscConfig+0x592>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b85      	cmp	r3, #133	; 0x85
 80030e6:	d112      	bne.n	800310e <HAL_RCC_OscConfig+0x56e>
 80030e8:	4b86      	ldr	r3, [pc, #536]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4a85      	ldr	r2, [pc, #532]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030ee:	f043 0304 	orr.w	r3, r3, #4
 80030f2:	6713      	str	r3, [r2, #112]	; 0x70
 80030f4:	4b83      	ldr	r3, [pc, #524]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a82      	ldr	r2, [pc, #520]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80030fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003100:	4b80      	ldr	r3, [pc, #512]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a7f      	ldr	r2, [pc, #508]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	e011      	b.n	8003132 <HAL_RCC_OscConfig+0x592>
 800310e:	4b7d      	ldr	r3, [pc, #500]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003112:	4a7c      	ldr	r2, [pc, #496]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6713      	str	r3, [r2, #112]	; 0x70
 800311a:	4b7a      	ldr	r3, [pc, #488]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311e:	4a79      	ldr	r2, [pc, #484]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003120:	f023 0304 	bic.w	r3, r3, #4
 8003124:	6713      	str	r3, [r2, #112]	; 0x70
 8003126:	4b77      	ldr	r3, [pc, #476]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4a76      	ldr	r2, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800312c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003130:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d015      	beq.n	8003166 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fe f993 	bl	8001464 <HAL_GetTick>
 800313e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003140:	e00a      	b.n	8003158 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003142:	f7fe f98f 	bl	8001464 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003150:	4293      	cmp	r3, r2
 8003152:	d901      	bls.n	8003158 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e14c      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003158:	4b6a      	ldr	r3, [pc, #424]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d0ee      	beq.n	8003142 <HAL_RCC_OscConfig+0x5a2>
 8003164:	e014      	b.n	8003190 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003166:	f7fe f97d 	bl	8001464 <HAL_GetTick>
 800316a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800316c:	e00a      	b.n	8003184 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800316e:	f7fe f979 	bl	8001464 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	f241 3288 	movw	r2, #5000	; 0x1388
 800317c:	4293      	cmp	r3, r2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e136      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003184:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1ee      	bne.n	800316e <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 812b 	beq.w	80033f0 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800319a:	4b5a      	ldr	r3, [pc, #360]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031a2:	2b18      	cmp	r3, #24
 80031a4:	f000 80bb 	beq.w	800331e <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	f040 8095 	bne.w	80032dc <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031b2:	4b54      	ldr	r3, [pc, #336]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a53      	ldr	r2, [pc, #332]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80031b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fe f951 	bl	8001464 <HAL_GetTick>
 80031c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c6:	f7fe f94d 	bl	8001464 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e10c      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031d8:	4b4a      	ldr	r3, [pc, #296]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f0      	bne.n	80031c6 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031e4:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80031e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e8:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_OscConfig+0x768>)
 80031ea:	4013      	ands	r3, r2
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80031f4:	0112      	lsls	r2, r2, #4
 80031f6:	430a      	orrs	r2, r1
 80031f8:	4942      	ldr	r1, [pc, #264]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	628b      	str	r3, [r1, #40]	; 0x28
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	3b01      	subs	r3, #1
 8003204:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320c:	3b01      	subs	r3, #1
 800320e:	025b      	lsls	r3, r3, #9
 8003210:	b29b      	uxth	r3, r3
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003218:	3b01      	subs	r3, #1
 800321a:	041b      	lsls	r3, r3, #16
 800321c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003226:	3b01      	subs	r3, #1
 8003228:	061b      	lsls	r3, r3, #24
 800322a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800322e:	4935      	ldr	r1, [pc, #212]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003230:	4313      	orrs	r3, r2
 8003232:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003234:	4b33      	ldr	r3, [pc, #204]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003238:	4a32      	ldr	r2, [pc, #200]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003240:	4b30      	ldr	r3, [pc, #192]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003242:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003244:	4b31      	ldr	r3, [pc, #196]	; (800330c <HAL_RCC_OscConfig+0x76c>)
 8003246:	4013      	ands	r3, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800324c:	00d2      	lsls	r2, r2, #3
 800324e:	492d      	ldr	r1, [pc, #180]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003250:	4313      	orrs	r3, r2
 8003252:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003254:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003258:	f023 020c 	bic.w	r2, r3, #12
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	4928      	ldr	r1, [pc, #160]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003262:	4313      	orrs	r3, r2
 8003264:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003266:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f023 0202 	bic.w	r2, r3, #2
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	4924      	ldr	r1, [pc, #144]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003274:	4313      	orrs	r3, r2
 8003276:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003278:	4b22      	ldr	r3, [pc, #136]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800327a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327c:	4a21      	ldr	r2, [pc, #132]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003284:	4b1f      	ldr	r3, [pc, #124]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800328a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003290:	4b1c      	ldr	r3, [pc, #112]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 8003296:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800329a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 800329e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a0:	4a18      	ldr	r2, [pc, #96]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80032a2:	f043 0301 	orr.w	r3, r3, #1
 80032a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032a8:	4b16      	ldr	r3, [pc, #88]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a15      	ldr	r2, [pc, #84]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80032ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032b4:	f7fe f8d6 	bl	8001464 <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032bc:	f7fe f8d2 	bl	8001464 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e091      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0f0      	beq.n	80032bc <HAL_RCC_OscConfig+0x71c>
 80032da:	e089      	b.n	80033f0 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032dc:	4b09      	ldr	r3, [pc, #36]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a08      	ldr	r2, [pc, #32]	; (8003304 <HAL_RCC_OscConfig+0x764>)
 80032e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e8:	f7fe f8bc 	bl	8001464 <HAL_GetTick>
 80032ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ee:	e00f      	b.n	8003310 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f0:	f7fe f8b8 	bl	8001464 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d908      	bls.n	8003310 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e077      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
 8003302:	bf00      	nop
 8003304:	58024400 	.word	0x58024400
 8003308:	fffffc0c 	.word	0xfffffc0c
 800330c:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003310:	4b3a      	ldr	r3, [pc, #232]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d1e9      	bne.n	80032f0 <HAL_RCC_OscConfig+0x750>
 800331c:	e068      	b.n	80033f0 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800331e:	4b37      	ldr	r3, [pc, #220]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003324:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332e:	2b01      	cmp	r3, #1
 8003330:	d031      	beq.n	8003396 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	f003 0203 	and.w	r2, r3, #3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d12a      	bne.n	8003396 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d122      	bne.n	8003396 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800335c:	429a      	cmp	r2, r3
 800335e:	d11a      	bne.n	8003396 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	0a5b      	lsrs	r3, r3, #9
 8003364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800336c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800336e:	429a      	cmp	r2, r3
 8003370:	d111      	bne.n	8003396 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	0c1b      	lsrs	r3, r3, #16
 8003376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d108      	bne.n	8003396 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	0e1b      	lsrs	r3, r3, #24
 8003388:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003390:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e02b      	b.n	80033f2 <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 800339c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339e:	08db      	lsrs	r3, r3, #3
 80033a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80033a4:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d01f      	beq.n	80033f0 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80033b0:	4b12      	ldr	r3, [pc, #72]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 80033b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80033bc:	f7fe f852 	bl	8001464 <HAL_GetTick>
 80033c0:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80033c2:	bf00      	nop
 80033c4:	f7fe f84e 	bl	8001464 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d0f9      	beq.n	80033c4 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80033d0:	4b0a      	ldr	r3, [pc, #40]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 80033d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <HAL_RCC_OscConfig+0x860>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80033dc:	00d2      	lsls	r2, r2, #3
 80033de:	4907      	ldr	r1, [pc, #28]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e8:	4a04      	ldr	r2, [pc, #16]	; (80033fc <HAL_RCC_OscConfig+0x85c>)
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3730      	adds	r7, #48	; 0x30
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	58024400 	.word	0x58024400
 8003400:	ffff0007 	.word	0xffff0007

08003404 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e19c      	b.n	8003752 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003418:	4b8a      	ldr	r3, [pc, #552]	; (8003644 <HAL_RCC_ClockConfig+0x240>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 030f 	and.w	r3, r3, #15
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d910      	bls.n	8003448 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003426:	4b87      	ldr	r3, [pc, #540]	; (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f023 020f 	bic.w	r2, r3, #15
 800342e:	4985      	ldr	r1, [pc, #532]	; (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	4313      	orrs	r3, r2
 8003434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b83      	ldr	r3, [pc, #524]	; (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e184      	b.n	8003752 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d010      	beq.n	8003476 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691a      	ldr	r2, [r3, #16]
 8003458:	4b7b      	ldr	r3, [pc, #492]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003460:	429a      	cmp	r2, r3
 8003462:	d908      	bls.n	8003476 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003464:	4b78      	ldr	r3, [pc, #480]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	4975      	ldr	r1, [pc, #468]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003472:	4313      	orrs	r3, r2
 8003474:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695a      	ldr	r2, [r3, #20]
 8003486:	4b70      	ldr	r3, [pc, #448]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800348e:	429a      	cmp	r2, r3
 8003490:	d908      	bls.n	80034a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003492:	4b6d      	ldr	r3, [pc, #436]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	496a      	ldr	r1, [pc, #424]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d010      	beq.n	80034d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699a      	ldr	r2, [r3, #24]
 80034b4:	4b64      	ldr	r3, [pc, #400]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80034bc:	429a      	cmp	r2, r3
 80034be:	d908      	bls.n	80034d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80034c0:	4b61      	ldr	r3, [pc, #388]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	495e      	ldr	r1, [pc, #376]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d010      	beq.n	8003500 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	69da      	ldr	r2, [r3, #28]
 80034e2:	4b59      	ldr	r3, [pc, #356]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80034e4:	6a1b      	ldr	r3, [r3, #32]
 80034e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d908      	bls.n	8003500 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80034ee:	4b56      	ldr	r3, [pc, #344]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	69db      	ldr	r3, [r3, #28]
 80034fa:	4953      	ldr	r1, [pc, #332]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d010      	beq.n	800352e <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68da      	ldr	r2, [r3, #12]
 8003510:	4b4d      	ldr	r3, [pc, #308]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	429a      	cmp	r2, r3
 800351a:	d908      	bls.n	800352e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800351c:	4b4a      	ldr	r3, [pc, #296]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f023 020f 	bic.w	r2, r3, #15
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	4947      	ldr	r1, [pc, #284]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 800352a:	4313      	orrs	r3, r2
 800352c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d055      	beq.n	80035e6 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800353a:	4b43      	ldr	r3, [pc, #268]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 800353c:	699b      	ldr	r3, [r3, #24]
 800353e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	4940      	ldr	r1, [pc, #256]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003548:	4313      	orrs	r3, r2
 800354a:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b02      	cmp	r3, #2
 8003552:	d107      	bne.n	8003564 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003554:	4b3c      	ldr	r3, [pc, #240]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d121      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0f6      	b.n	8003752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	2b03      	cmp	r3, #3
 800356a:	d107      	bne.n	800357c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800356c:	4b36      	ldr	r3, [pc, #216]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d115      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0ea      	b.n	8003752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d107      	bne.n	8003594 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003584:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e0de      	b.n	8003752 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003594:	4b2c      	ldr	r3, [pc, #176]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e0d6      	b.n	8003752 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80035a4:	4b28      	ldr	r3, [pc, #160]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	f023 0207 	bic.w	r2, r3, #7
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4925      	ldr	r1, [pc, #148]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035b6:	f7fd ff55 	bl	8001464 <HAL_GetTick>
 80035ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035bc:	e00a      	b.n	80035d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035be:	f7fd ff51 	bl	8001464 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e0be      	b.n	8003752 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d4:	4b1c      	ldr	r3, [pc, #112]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d1eb      	bne.n	80035be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0302 	and.w	r3, r3, #2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d010      	beq.n	8003614 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 80035f8:	699b      	ldr	r3, [r3, #24]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	429a      	cmp	r2, r3
 8003600:	d208      	bcs.n	8003614 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	f023 020f 	bic.w	r2, r3, #15
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	490e      	ldr	r1, [pc, #56]	; (8003648 <HAL_RCC_ClockConfig+0x244>)
 8003610:	4313      	orrs	r3, r2
 8003612:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 030f 	and.w	r3, r3, #15
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d214      	bcs.n	800364c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f023 020f 	bic.w	r2, r3, #15
 800362a:	4906      	ldr	r1, [pc, #24]	; (8003644 <HAL_RCC_ClockConfig+0x240>)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003632:	4b04      	ldr	r3, [pc, #16]	; (8003644 <HAL_RCC_ClockConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	429a      	cmp	r2, r3
 800363e:	d005      	beq.n	800364c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e086      	b.n	8003752 <HAL_RCC_ClockConfig+0x34e>
 8003644:	52002000 	.word	0x52002000
 8003648:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d010      	beq.n	800367a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	4b3f      	ldr	r3, [pc, #252]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003664:	429a      	cmp	r2, r3
 8003666:	d208      	bcs.n	800367a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003668:	4b3c      	ldr	r3, [pc, #240]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	4939      	ldr	r1, [pc, #228]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 8003676:	4313      	orrs	r3, r2
 8003678:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0308 	and.w	r3, r3, #8
 8003682:	2b00      	cmp	r3, #0
 8003684:	d010      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	4b34      	ldr	r3, [pc, #208]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 800368c:	69db      	ldr	r3, [r3, #28]
 800368e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003692:	429a      	cmp	r2, r3
 8003694:	d208      	bcs.n	80036a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003696:	4b31      	ldr	r3, [pc, #196]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	492e      	ldr	r1, [pc, #184]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0310 	and.w	r3, r3, #16
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d010      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	4b28      	ldr	r3, [pc, #160]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d208      	bcs.n	80036d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	4922      	ldr	r1, [pc, #136]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0320 	and.w	r3, r3, #32
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d010      	beq.n	8003704 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69da      	ldr	r2, [r3, #28]
 80036e6:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d208      	bcs.n	8003704 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036f2:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69db      	ldr	r3, [r3, #28]
 80036fe:	4917      	ldr	r1, [pc, #92]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 8003700:	4313      	orrs	r3, r2
 8003702:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8003704:	f000 f834 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b14      	ldr	r3, [pc, #80]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	0a1b      	lsrs	r3, r3, #8
 8003710:	f003 030f 	and.w	r3, r3, #15
 8003714:	4912      	ldr	r1, [pc, #72]	; (8003760 <HAL_RCC_ClockConfig+0x35c>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	f003 031f 	and.w	r3, r3, #31
 800371c:	fa22 f303 	lsr.w	r3, r2, r3
 8003720:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003722:	4b0e      	ldr	r3, [pc, #56]	; (800375c <HAL_RCC_ClockConfig+0x358>)
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	4a0d      	ldr	r2, [pc, #52]	; (8003760 <HAL_RCC_ClockConfig+0x35c>)
 800372c:	5cd3      	ldrb	r3, [r2, r3]
 800372e:	f003 031f 	and.w	r3, r3, #31
 8003732:	693a      	ldr	r2, [r7, #16]
 8003734:	fa22 f303 	lsr.w	r3, r2, r3
 8003738:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <HAL_RCC_ClockConfig+0x360>)
 800373a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800373c:	4a0a      	ldr	r2, [pc, #40]	; (8003768 <HAL_RCC_ClockConfig+0x364>)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003742:	4b0a      	ldr	r3, [pc, #40]	; (800376c <HAL_RCC_ClockConfig+0x368>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fe42 	bl	80013d0 <HAL_InitTick>
 800374c:	4603      	mov	r3, r0
 800374e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3718      	adds	r7, #24
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	58024400 	.word	0x58024400
 8003760:	08008294 	.word	0x08008294
 8003764:	24000004 	.word	0x24000004
 8003768:	24000000 	.word	0x24000000
 800376c:	24000008 	.word	0x24000008

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	b089      	sub	sp, #36	; 0x24
 8003774:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003776:	4bb3      	ldr	r3, [pc, #716]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377e:	2b18      	cmp	r3, #24
 8003780:	f200 8155 	bhi.w	8003a2e <HAL_RCC_GetSysClockFreq+0x2be>
 8003784:	a201      	add	r2, pc, #4	; (adr r2, 800378c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378a:	bf00      	nop
 800378c:	080037f1 	.word	0x080037f1
 8003790:	08003a2f 	.word	0x08003a2f
 8003794:	08003a2f 	.word	0x08003a2f
 8003798:	08003a2f 	.word	0x08003a2f
 800379c:	08003a2f 	.word	0x08003a2f
 80037a0:	08003a2f 	.word	0x08003a2f
 80037a4:	08003a2f 	.word	0x08003a2f
 80037a8:	08003a2f 	.word	0x08003a2f
 80037ac:	08003817 	.word	0x08003817
 80037b0:	08003a2f 	.word	0x08003a2f
 80037b4:	08003a2f 	.word	0x08003a2f
 80037b8:	08003a2f 	.word	0x08003a2f
 80037bc:	08003a2f 	.word	0x08003a2f
 80037c0:	08003a2f 	.word	0x08003a2f
 80037c4:	08003a2f 	.word	0x08003a2f
 80037c8:	08003a2f 	.word	0x08003a2f
 80037cc:	0800381d 	.word	0x0800381d
 80037d0:	08003a2f 	.word	0x08003a2f
 80037d4:	08003a2f 	.word	0x08003a2f
 80037d8:	08003a2f 	.word	0x08003a2f
 80037dc:	08003a2f 	.word	0x08003a2f
 80037e0:	08003a2f 	.word	0x08003a2f
 80037e4:	08003a2f 	.word	0x08003a2f
 80037e8:	08003a2f 	.word	0x08003a2f
 80037ec:	08003823 	.word	0x08003823
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037f0:	4b94      	ldr	r3, [pc, #592]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d009      	beq.n	8003810 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80037fc:	4b91      	ldr	r3, [pc, #580]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	08db      	lsrs	r3, r3, #3
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	4a90      	ldr	r2, [pc, #576]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003808:	fa22 f303 	lsr.w	r3, r2, r3
 800380c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800380e:	e111      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003810:	4b8d      	ldr	r3, [pc, #564]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003812:	61bb      	str	r3, [r7, #24]
      break;
 8003814:	e10e      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003816:	4b8d      	ldr	r3, [pc, #564]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003818:	61bb      	str	r3, [r7, #24]
      break;
 800381a:	e10b      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800381c:	4b8c      	ldr	r3, [pc, #560]	; (8003a50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800381e:	61bb      	str	r3, [r7, #24]
      break;
 8003820:	e108      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003822:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	f003 0303 	and.w	r3, r3, #3
 800382a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800382c:	4b85      	ldr	r3, [pc, #532]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003836:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003838:	4b82      	ldr	r3, [pc, #520]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003842:	4b80      	ldr	r3, [pc, #512]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003844:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003846:	08db      	lsrs	r3, r3, #3
 8003848:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	fb02 f303 	mul.w	r3, r2, r3
 8003852:	ee07 3a90 	vmov	s15, r3
 8003856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80e1 	beq.w	8003a28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b02      	cmp	r3, #2
 800386a:	f000 8083 	beq.w	8003974 <HAL_RCC_GetSysClockFreq+0x204>
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2b02      	cmp	r3, #2
 8003872:	f200 80a1 	bhi.w	80039b8 <HAL_RCC_GetSysClockFreq+0x248>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_RCC_GetSysClockFreq+0x114>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d056      	beq.n	8003930 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003882:	e099      	b.n	80039b8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003884:	4b6f      	ldr	r3, [pc, #444]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d02d      	beq.n	80038ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003890:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	08db      	lsrs	r3, r3, #3
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	4a6b      	ldr	r2, [pc, #428]	; (8003a48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800389c:	fa22 f303 	lsr.w	r3, r2, r3
 80038a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	ee07 3a90 	vmov	s15, r3
 80038a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	ee07 3a90 	vmov	s15, r3
 80038b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038ba:	4b62      	ldr	r3, [pc, #392]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038c2:	ee07 3a90 	vmov	s15, r3
 80038c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80038ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80038d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80038de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80038ea:	e087      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	ee07 3a90 	vmov	s15, r3
 80038f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003a58 <HAL_RCC_GetSysClockFreq+0x2e8>
 80038fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038fe:	4b51      	ldr	r3, [pc, #324]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003906:	ee07 3a90 	vmov	s15, r3
 800390a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800390e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003912:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800391a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800391e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800392a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800392e:	e065      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	ee07 3a90 	vmov	s15, r3
 8003936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800393a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003a5c <HAL_RCC_GetSysClockFreq+0x2ec>
 800393e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003942:	4b40      	ldr	r3, [pc, #256]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800394a:	ee07 3a90 	vmov	s15, r3
 800394e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003952:	ed97 6a02 	vldr	s12, [r7, #8]
 8003956:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800395a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800395e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003962:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003966:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800396a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800396e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003972:	e043      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003a60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003986:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003996:	ed97 6a02 	vldr	s12, [r7, #8]
 800399a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 800399e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039b6:	e021      	b.n	80039fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	ee07 3a90 	vmov	s15, r3
 80039be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003a5c <HAL_RCC_GetSysClockFreq+0x2ec>
 80039c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ca:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d2:	ee07 3a90 	vmov	s15, r3
 80039d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039da:	ed97 6a02 	vldr	s12, [r7, #8]
 80039de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003a54 <HAL_RCC_GetSysClockFreq+0x2e4>
 80039e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80039fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80039fc:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	0a5b      	lsrs	r3, r3, #9
 8003a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a06:	3301      	adds	r3, #1
 8003a08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	ee07 3a90 	vmov	s15, r3
 8003a10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003a14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a20:	ee17 3a90 	vmov	r3, s15
 8003a24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003a26:	e005      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
      break;
 8003a2c:	e002      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a30:	61bb      	str	r3, [r7, #24]
      break;
 8003a32:	bf00      	nop
  }

  return sysclockfreq;
 8003a34:	69bb      	ldr	r3, [r7, #24]
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3724      	adds	r7, #36	; 0x24
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop
 8003a44:	58024400 	.word	0x58024400
 8003a48:	03d09000 	.word	0x03d09000
 8003a4c:	003d0900 	.word	0x003d0900
 8003a50:	007a1200 	.word	0x007a1200
 8003a54:	46000000 	.word	0x46000000
 8003a58:	4c742400 	.word	0x4c742400
 8003a5c:	4a742400 	.word	0x4a742400
 8003a60:	4af42400 	.word	0x4af42400

08003a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8003a6a:	f7ff fe81 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b10      	ldr	r3, [pc, #64]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	0a1b      	lsrs	r3, r3, #8
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	490f      	ldr	r1, [pc, #60]	; (8003ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a7c:	5ccb      	ldrb	r3, [r1, r3]
 8003a7e:	f003 031f 	and.w	r3, r3, #31
 8003a82:	fa22 f303 	lsr.w	r3, r2, r3
 8003a86:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8003a88:	4b0a      	ldr	r3, [pc, #40]	; (8003ab4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003a8a:	699b      	ldr	r3, [r3, #24]
 8003a8c:	f003 030f 	and.w	r3, r3, #15
 8003a90:	4a09      	ldr	r2, [pc, #36]	; (8003ab8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003a92:	5cd3      	ldrb	r3, [r2, r3]
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a9e:	4a07      	ldr	r2, [pc, #28]	; (8003abc <HAL_RCC_GetHCLKFreq+0x58>)
 8003aa0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aa2:	4a07      	ldr	r2, [pc, #28]	; (8003ac0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003aa8:	4b04      	ldr	r3, [pc, #16]	; (8003abc <HAL_RCC_GetHCLKFreq+0x58>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3708      	adds	r7, #8
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	58024400 	.word	0x58024400
 8003ab8:	08008294 	.word	0x08008294
 8003abc:	24000004 	.word	0x24000004
 8003ac0:	24000000 	.word	0x24000000

08003ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8003ac8:	f7ff ffcc 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b06      	ldr	r3, [pc, #24]	; (8003ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	091b      	lsrs	r3, r3, #4
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	4904      	ldr	r1, [pc, #16]	; (8003aec <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	58024400 	.word	0x58024400
 8003aec:	08008294 	.word	0x08008294

08003af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
 8003af4:	f7ff ffb6 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003afc:	69db      	ldr	r3, [r3, #28]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4904      	ldr	r1, [pc, #16]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	58024400 	.word	0x58024400
 8003b18:	08008294 	.word	0x08008294

08003b1c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b20:	b0c8      	sub	sp, #288	; 0x120
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b2e:	2300      	movs	r3, #0
 8003b30:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b34:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003b40:	2500      	movs	r5, #0
 8003b42:	ea54 0305 	orrs.w	r3, r4, r5
 8003b46:	d049      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003b48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b4e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b52:	d02f      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003b54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003b58:	d828      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b5e:	d01a      	beq.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003b60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b64:	d822      	bhi.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b6e:	d007      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003b70:	e01c      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b72:	4ba7      	ldr	r3, [pc, #668]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	4aa6      	ldr	r2, [pc, #664]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b7e:	e01a      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b80:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b84:	3308      	adds	r3, #8
 8003b86:	2102      	movs	r1, #2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f002 fa6d 	bl	8006068 <RCCEx_PLL2_Config>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003b94:	e00f      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003b96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b9a:	3328      	adds	r3, #40	; 0x28
 8003b9c:	2102      	movs	r1, #2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f002 fb14 	bl	80061cc <RCCEx_PLL3_Config>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003baa:	e004      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003bb2:	e000      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003bb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10a      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003bbe:	4b94      	ldr	r3, [pc, #592]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003bcc:	4a90      	ldr	r2, [pc, #576]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	6513      	str	r3, [r2, #80]	; 0x50
 8003bd2:	e003      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bd8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003be8:	f04f 0900 	mov.w	r9, #0
 8003bec:	ea58 0309 	orrs.w	r3, r8, r9
 8003bf0:	d047      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003bf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d82a      	bhi.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003bfc:	a201      	add	r2, pc, #4	; (adr r2, 8003c04 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c02:	bf00      	nop
 8003c04:	08003c19 	.word	0x08003c19
 8003c08:	08003c27 	.word	0x08003c27
 8003c0c:	08003c3d 	.word	0x08003c3d
 8003c10:	08003c5b 	.word	0x08003c5b
 8003c14:	08003c5b 	.word	0x08003c5b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c18:	4b7d      	ldr	r3, [pc, #500]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c1c:	4a7c      	ldr	r2, [pc, #496]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c22:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c24:	e01a      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c2a:	3308      	adds	r3, #8
 8003c2c:	2100      	movs	r1, #0
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f002 fa1a 	bl	8006068 <RCCEx_PLL2_Config>
 8003c34:	4603      	mov	r3, r0
 8003c36:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c3a:	e00f      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c40:	3328      	adds	r3, #40	; 0x28
 8003c42:	2100      	movs	r1, #0
 8003c44:	4618      	mov	r0, r3
 8003c46:	f002 fac1 	bl	80061cc <RCCEx_PLL3_Config>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c50:	e004      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c58:	e000      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c5c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10a      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003c64:	4b6a      	ldr	r3, [pc, #424]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c68:	f023 0107 	bic.w	r1, r3, #7
 8003c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	4a67      	ldr	r2, [pc, #412]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6513      	str	r3, [r2, #80]	; 0x50
 8003c78:	e003      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8003c82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003c8e:	f04f 0b00 	mov.w	fp, #0
 8003c92:	ea5a 030b 	orrs.w	r3, sl, fp
 8003c96:	d054      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8003c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003ca2:	d036      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8003ca4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003ca8:	d82f      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cae:	d032      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003cb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb4:	d829      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb8:	d02f      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8003cba:	2bc0      	cmp	r3, #192	; 0xc0
 8003cbc:	d825      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d018      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d821      	bhi.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d007      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8003cce:	e01c      	b.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cd0:	4b4f      	ldr	r3, [pc, #316]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd4:	4a4e      	ldr	r2, [pc, #312]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003cdc:	e01e      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cde:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f002 f9be 	bl	8006068 <RCCEx_PLL2_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003cf2:	e013      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cf4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cf8:	3328      	adds	r3, #40	; 0x28
 8003cfa:	2100      	movs	r1, #0
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f002 fa65 	bl	80061cc <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8003d08:	e008      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d10:	e004      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8003d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10a      	bne.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8003d24:	4b3a      	ldr	r3, [pc, #232]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d28:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d32:	4a37      	ldr	r2, [pc, #220]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003d34:	430b      	orrs	r3, r1
 8003d36:	6513      	str	r3, [r2, #80]	; 0x50
 8003d38:	e003      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d3a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8003d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003d4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003d52:	2300      	movs	r3, #0
 8003d54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003d58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	d05c      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8003d62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d68:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003d6c:	d03b      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003d6e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003d72:	d834      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d78:	d037      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d82e      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d80:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d84:	d033      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003d86:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d8a:	d828      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d90:	d01a      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8003d92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d96:	d822      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8003d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003da0:	d007      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8003da2:	e01c      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003da4:	4b1a      	ldr	r3, [pc, #104]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da8:	4a19      	ldr	r2, [pc, #100]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003daa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003db0:	e01e      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003db6:	3308      	adds	r3, #8
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f002 f954 	bl	8006068 <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003dc6:	e013      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003dc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003dcc:	3328      	adds	r3, #40	; 0x28
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f002 f9fb 	bl	80061cc <RCCEx_PLL3_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8003ddc:	e008      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003de4:	e004      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8003dee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	f423 6160 	bic.w	r1, r3, #3584	; 0xe00
 8003e00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e06:	4a02      	ldr	r2, [pc, #8]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6513      	str	r3, [r2, #80]	; 0x50
 8003e0c:	e006      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x300>
 8003e0e:	bf00      	nop
 8003e10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e18:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003e28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003e32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003e36:	460b      	mov	r3, r1
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	d03a      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003e3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e42:	2b30      	cmp	r3, #48	; 0x30
 8003e44:	d01f      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 8003e46:	2b30      	cmp	r3, #48	; 0x30
 8003e48:	d819      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d00c      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d815      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x362>
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d019      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d111      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e5a:	4bae      	ldr	r3, [pc, #696]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e5e:	4aad      	ldr	r2, [pc, #692]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e66:	e011      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 f8f9 	bl	8006068 <RCCEx_PLL2_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003e7c:	e006      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e84:	e002      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003e86:	bf00      	nop
 8003e88:	e000      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 8003e8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e94:	4b9f      	ldr	r3, [pc, #636]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003e96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e98:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003e9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea2:	4a9c      	ldr	r2, [pc, #624]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eaa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003eb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003ebe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003ec8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	d051      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ed2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ed8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003edc:	d035      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003ede:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ee2:	d82e      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003ee4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ee8:	d031      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x432>
 8003eea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003eee:	d828      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ef4:	d01a      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x410>
 8003ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003efa:	d822      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x426>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d003      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8003f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f04:	d007      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8003f06:	e01c      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f08:	4b82      	ldr	r3, [pc, #520]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	4a81      	ldr	r2, [pc, #516]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f14:	e01c      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f1a:	3308      	adds	r3, #8
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f002 f8a2 	bl	8006068 <RCCEx_PLL2_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f2a:	e011      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f30:	3328      	adds	r3, #40	; 0x28
 8003f32:	2100      	movs	r1, #0
 8003f34:	4618      	mov	r0, r3
 8003f36:	f002 f949 	bl	80061cc <RCCEx_PLL3_Config>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f48:	e002      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003f4a:	bf00      	nop
 8003f4c:	e000      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 8003f4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f50:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003f58:	4b6e      	ldr	r3, [pc, #440]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f5c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003f60:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f66:	4a6b      	ldr	r2, [pc, #428]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6513      	str	r3, [r2, #80]	; 0x50
 8003f6c:	e003      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f72:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f86:	2300      	movs	r3, #0
 8003f88:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f8c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003f90:	460b      	mov	r3, r1
 8003f92:	4313      	orrs	r3, r2
 8003f94:	d053      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa0:	d033      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003fa2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fa6:	d82c      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003fa8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fac:	d02f      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8003fae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fb2:	d826      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003fb4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fb8:	d02b      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003fba:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003fbe:	d820      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003fc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fc4:	d012      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 8003fc6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fca:	d81a      	bhi.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d022      	beq.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 8003fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd4:	d115      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fda:	3308      	adds	r3, #8
 8003fdc:	2101      	movs	r1, #1
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f002 f842 	bl	8006068 <RCCEx_PLL2_Config>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003fea:	e015      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff0:	3328      	adds	r3, #40	; 0x28
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f002 f8e9 	bl	80061cc <RCCEx_PLL3_Config>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004000:	e00a      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004008:	e006      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800400a:	bf00      	nop
 800400c:	e004      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800400e:	bf00      	nop
 8004010:	e002      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004012:	bf00      	nop
 8004014:	e000      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 8004016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004018:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004020:	4b3c      	ldr	r3, [pc, #240]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004024:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800402e:	4a39      	ldr	r2, [pc, #228]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004030:	430b      	orrs	r3, r1
 8004032:	6513      	str	r3, [r2, #80]	; 0x50
 8004034:	e003      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004036:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800403a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800404a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004054:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d060      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800405e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004062:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004066:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 800406a:	d039      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800406c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8004070:	d832      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004072:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004076:	d035      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004078:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800407c:	d82c      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800407e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004082:	d031      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004088:	d826      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800408a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800408e:	d02d      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004090:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004094:	d820      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8004096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800409a:	d012      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800409c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040a0:	d81a      	bhi.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d024      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80040a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040aa:	d115      	bne.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b0:	3308      	adds	r3, #8
 80040b2:	2101      	movs	r1, #1
 80040b4:	4618      	mov	r0, r3
 80040b6:	f001 ffd7 	bl	8006068 <RCCEx_PLL2_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040c0:	e017      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c6:	3328      	adds	r3, #40	; 0x28
 80040c8:	2101      	movs	r1, #1
 80040ca:	4618      	mov	r0, r3
 80040cc:	f002 f87e 	bl	80061cc <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80040d6:	e00c      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80040de:	e008      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040e0:	bf00      	nop
 80040e2:	e006      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040e4:	bf00      	nop
 80040e6:	e004      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040e8:	bf00      	nop
 80040ea:	e002      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040ec:	bf00      	nop
 80040ee:	e000      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80040f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10e      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80040fa:	4b06      	ldr	r3, [pc, #24]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80040fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fe:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004106:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800410a:	4a02      	ldr	r2, [pc, #8]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800410c:	430b      	orrs	r3, r1
 800410e:	6593      	str	r3, [r2, #88]	; 0x58
 8004110:	e006      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8004112:	bf00      	nop
 8004114:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800411c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800412c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004130:	2300      	movs	r3, #0
 8004132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004136:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800413a:	460b      	mov	r3, r1
 800413c:	4313      	orrs	r3, r2
 800413e:	d037      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004140:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004146:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800414a:	d00e      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800414c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004150:	d816      	bhi.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004152:	2b00      	cmp	r3, #0
 8004154:	d018      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800415a:	d111      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800415c:	4bc4      	ldr	r3, [pc, #784]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800415e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004160:	4ac3      	ldr	r2, [pc, #780]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004166:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004168:	e00f      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800416a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800416e:	3308      	adds	r3, #8
 8004170:	2101      	movs	r1, #1
 8004172:	4618      	mov	r0, r3
 8004174:	f001 ff78 	bl	8006068 <RCCEx_PLL2_Config>
 8004178:	4603      	mov	r3, r0
 800417a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800417e:	e004      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004192:	4bb7      	ldr	r3, [pc, #732]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004196:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800419a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800419e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a0:	4ab3      	ldr	r2, [pc, #716]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6513      	str	r3, [r2, #80]	; 0x50
 80041a6:	e003      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041ac:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80041bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80041c6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4313      	orrs	r3, r2
 80041ce:	d039      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80041d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d81c      	bhi.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	0800421d 	.word	0x0800421d
 80041e4:	080041f1 	.word	0x080041f1
 80041e8:	080041ff 	.word	0x080041ff
 80041ec:	0800421d 	.word	0x0800421d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f0:	4b9f      	ldr	r3, [pc, #636]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4a9e      	ldr	r2, [pc, #632]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80041fc:	e00f      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004202:	3308      	adds	r3, #8
 8004204:	2102      	movs	r1, #2
 8004206:	4618      	mov	r0, r3
 8004208:	f001 ff2e 	bl	8006068 <RCCEx_PLL2_Config>
 800420c:	4603      	mov	r3, r0
 800420e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004212:	e004      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800421a:	e000      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800421c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800421e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10a      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004226:	4b92      	ldr	r3, [pc, #584]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800422a:	f023 0103 	bic.w	r1, r3, #3
 800422e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004232:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004234:	4a8e      	ldr	r2, [pc, #568]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004236:	430b      	orrs	r3, r1
 8004238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800423a:	e003      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004240:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004250:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004254:	2300      	movs	r3, #0
 8004256:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800425a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800425e:	460b      	mov	r3, r1
 8004260:	4313      	orrs	r3, r2
 8004262:	f000 8099 	beq.w	8004398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004266:	4b83      	ldr	r3, [pc, #524]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a82      	ldr	r2, [pc, #520]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800426c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004272:	f7fd f8f7 	bl	8001464 <HAL_GetTick>
 8004276:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800427a:	e00b      	b.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800427c:	f7fd f8f2 	bl	8001464 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b64      	cmp	r3, #100	; 0x64
 800428a:	d903      	bls.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004292:	e005      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004294:	4b77      	ldr	r3, [pc, #476]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ed      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80042a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d173      	bne.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80042a8:	4b71      	ldr	r3, [pc, #452]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042b4:	4053      	eors	r3, r2
 80042b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d015      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042be:	4b6c      	ldr	r3, [pc, #432]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042ca:	4b69      	ldr	r3, [pc, #420]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	4a68      	ldr	r2, [pc, #416]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042d4:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042d6:	4b66      	ldr	r3, [pc, #408]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042da:	4a65      	ldr	r2, [pc, #404]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e0:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80042e2:	4a63      	ldr	r2, [pc, #396]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80042e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80042ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ee:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80042f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042f6:	d118      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f8:	f7fd f8b4 	bl	8001464 <HAL_GetTick>
 80042fc:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004300:	e00d      	b.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004302:	f7fd f8af 	bl	8001464 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800430c:	1ad2      	subs	r2, r2, r3
 800430e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004312:	429a      	cmp	r2, r3
 8004314:	d903      	bls.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800431c:	e005      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800431e:	4b54      	ldr	r3, [pc, #336]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d0eb      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800432a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800432e:	2b00      	cmp	r3, #0
 8004330:	d129      	bne.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004332:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004336:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800433a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800433e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004342:	d10e      	bne.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004344:	4b4a      	ldr	r3, [pc, #296]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800434c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004350:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004354:	091a      	lsrs	r2, r3, #4
 8004356:	4b48      	ldr	r3, [pc, #288]	; (8004478 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004358:	4013      	ands	r3, r2
 800435a:	4a45      	ldr	r2, [pc, #276]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6113      	str	r3, [r2, #16]
 8004360:	e005      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004362:	4b43      	ldr	r3, [pc, #268]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	4a42      	ldr	r2, [pc, #264]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004368:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800436c:	6113      	str	r3, [r2, #16]
 800436e:	4b40      	ldr	r3, [pc, #256]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004370:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004372:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004376:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800437a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800437e:	4a3c      	ldr	r2, [pc, #240]	; (8004470 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6713      	str	r3, [r2, #112]	; 0x70
 8004384:	e008      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004386:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800438a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800438e:	e003      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004390:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004394:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004398:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a0:	f002 0301 	and.w	r3, r2, #1
 80043a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043a8:	2300      	movs	r3, #0
 80043aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f000 8090 	beq.w	80044da <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80043ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	2b28      	cmp	r3, #40	; 0x28
 80043c4:	d870      	bhi.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80043c6:	a201      	add	r2, pc, #4	; (adr r2, 80043cc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80043c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043cc:	080044b1 	.word	0x080044b1
 80043d0:	080044a9 	.word	0x080044a9
 80043d4:	080044a9 	.word	0x080044a9
 80043d8:	080044a9 	.word	0x080044a9
 80043dc:	080044a9 	.word	0x080044a9
 80043e0:	080044a9 	.word	0x080044a9
 80043e4:	080044a9 	.word	0x080044a9
 80043e8:	080044a9 	.word	0x080044a9
 80043ec:	0800447d 	.word	0x0800447d
 80043f0:	080044a9 	.word	0x080044a9
 80043f4:	080044a9 	.word	0x080044a9
 80043f8:	080044a9 	.word	0x080044a9
 80043fc:	080044a9 	.word	0x080044a9
 8004400:	080044a9 	.word	0x080044a9
 8004404:	080044a9 	.word	0x080044a9
 8004408:	080044a9 	.word	0x080044a9
 800440c:	08004493 	.word	0x08004493
 8004410:	080044a9 	.word	0x080044a9
 8004414:	080044a9 	.word	0x080044a9
 8004418:	080044a9 	.word	0x080044a9
 800441c:	080044a9 	.word	0x080044a9
 8004420:	080044a9 	.word	0x080044a9
 8004424:	080044a9 	.word	0x080044a9
 8004428:	080044a9 	.word	0x080044a9
 800442c:	080044b1 	.word	0x080044b1
 8004430:	080044a9 	.word	0x080044a9
 8004434:	080044a9 	.word	0x080044a9
 8004438:	080044a9 	.word	0x080044a9
 800443c:	080044a9 	.word	0x080044a9
 8004440:	080044a9 	.word	0x080044a9
 8004444:	080044a9 	.word	0x080044a9
 8004448:	080044a9 	.word	0x080044a9
 800444c:	080044b1 	.word	0x080044b1
 8004450:	080044a9 	.word	0x080044a9
 8004454:	080044a9 	.word	0x080044a9
 8004458:	080044a9 	.word	0x080044a9
 800445c:	080044a9 	.word	0x080044a9
 8004460:	080044a9 	.word	0x080044a9
 8004464:	080044a9 	.word	0x080044a9
 8004468:	080044a9 	.word	0x080044a9
 800446c:	080044b1 	.word	0x080044b1
 8004470:	58024400 	.word	0x58024400
 8004474:	58024800 	.word	0x58024800
 8004478:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800447c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004480:	3308      	adds	r3, #8
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fdef 	bl	8006068 <RCCEx_PLL2_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004490:	e00f      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004492:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004496:	3328      	adds	r3, #40	; 0x28
 8004498:	2101      	movs	r1, #1
 800449a:	4618      	mov	r0, r3
 800449c:	f001 fe96 	bl	80061cc <RCCEx_PLL3_Config>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80044a6:	e004      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044ae:	e000      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80044b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80044ba:	4bc0      	ldr	r3, [pc, #768]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80044c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ca:	4abc      	ldr	r2, [pc, #752]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80044cc:	430b      	orrs	r3, r1
 80044ce:	6553      	str	r3, [r2, #84]	; 0x54
 80044d0:	e003      	b.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80044da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f002 0302 	and.w	r3, r2, #2
 80044e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80044f0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d043      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80044fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004502:	2b05      	cmp	r3, #5
 8004504:	d824      	bhi.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004559 	.word	0x08004559
 8004510:	08004525 	.word	0x08004525
 8004514:	0800453b 	.word	0x0800453b
 8004518:	08004559 	.word	0x08004559
 800451c:	08004559 	.word	0x08004559
 8004520:	08004559 	.word	0x08004559
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004524:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004528:	3308      	adds	r3, #8
 800452a:	2101      	movs	r1, #1
 800452c:	4618      	mov	r0, r3
 800452e:	f001 fd9b 	bl	8006068 <RCCEx_PLL2_Config>
 8004532:	4603      	mov	r3, r0
 8004534:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004538:	e00f      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800453a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800453e:	3328      	adds	r3, #40	; 0x28
 8004540:	2101      	movs	r1, #1
 8004542:	4618      	mov	r0, r3
 8004544:	f001 fe42 	bl	80061cc <RCCEx_PLL3_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800454e:	e004      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004556:	e000      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 8004558:	bf00      	nop
    }

    if (ret == HAL_OK)
 800455a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004562:	4b96      	ldr	r3, [pc, #600]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f023 0107 	bic.w	r1, r3, #7
 800456a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800456e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004572:	4a92      	ldr	r2, [pc, #584]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 8004574:	430b      	orrs	r3, r1
 8004576:	6553      	str	r3, [r2, #84]	; 0x54
 8004578:	e003      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800457e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004582:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	f002 0304 	and.w	r3, r2, #4
 800458e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004592:	2300      	movs	r3, #0
 8004594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004598:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800459c:	460b      	mov	r3, r1
 800459e:	4313      	orrs	r3, r2
 80045a0:	d043      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80045a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045aa:	2b05      	cmp	r3, #5
 80045ac:	d824      	bhi.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	08004601 	.word	0x08004601
 80045b8:	080045cd 	.word	0x080045cd
 80045bc:	080045e3 	.word	0x080045e3
 80045c0:	08004601 	.word	0x08004601
 80045c4:	08004601 	.word	0x08004601
 80045c8:	08004601 	.word	0x08004601
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045d0:	3308      	adds	r3, #8
 80045d2:	2101      	movs	r1, #1
 80045d4:	4618      	mov	r0, r3
 80045d6:	f001 fd47 	bl	8006068 <RCCEx_PLL2_Config>
 80045da:	4603      	mov	r3, r0
 80045dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045e0:	e00f      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e6:	3328      	adds	r3, #40	; 0x28
 80045e8:	2101      	movs	r1, #1
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 fdee 	bl	80061cc <RCCEx_PLL3_Config>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80045f6:	e004      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80045fe:	e000      	b.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 8004600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004602:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10b      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800460a:	4b6c      	ldr	r3, [pc, #432]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800460c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460e:	f023 0107 	bic.w	r1, r3, #7
 8004612:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004616:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800461a:	4a68      	ldr	r2, [pc, #416]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800461c:	430b      	orrs	r3, r1
 800461e:	6593      	str	r3, [r2, #88]	; 0x58
 8004620:	e003      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004626:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800462a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f002 0320 	and.w	r3, r2, #32
 8004636:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800463a:	2300      	movs	r3, #0
 800463c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004640:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004644:	460b      	mov	r3, r1
 8004646:	4313      	orrs	r3, r2
 8004648:	d055      	beq.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004652:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004656:	d033      	beq.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004658:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800465c:	d82c      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800465e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004662:	d02f      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004668:	d826      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800466a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800466e:	d02b      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004670:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004674:	d820      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004676:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800467a:	d012      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800467c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004680:	d81a      	bhi.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 8004682:	2b00      	cmp	r3, #0
 8004684:	d022      	beq.n	80046cc <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004686:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800468a:	d115      	bne.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800468c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004690:	3308      	adds	r3, #8
 8004692:	2100      	movs	r1, #0
 8004694:	4618      	mov	r0, r3
 8004696:	f001 fce7 	bl	8006068 <RCCEx_PLL2_Config>
 800469a:	4603      	mov	r3, r0
 800469c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046a0:	e015      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a6:	3328      	adds	r3, #40	; 0x28
 80046a8:	2102      	movs	r1, #2
 80046aa:	4618      	mov	r0, r3
 80046ac:	f001 fd8e 	bl	80061cc <RCCEx_PLL3_Config>
 80046b0:	4603      	mov	r3, r0
 80046b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80046b6:	e00a      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80046be:	e006      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80046c0:	bf00      	nop
 80046c2:	e004      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80046c4:	bf00      	nop
 80046c6:	e002      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80046c8:	bf00      	nop
 80046ca:	e000      	b.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 80046cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046ce:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10b      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046d6:	4b39      	ldr	r3, [pc, #228]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80046de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046e6:	4a35      	ldr	r2, [pc, #212]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6553      	str	r3, [r2, #84]	; 0x54
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046f2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80046f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004702:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004706:	2300      	movs	r3, #0
 8004708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800470c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004710:	460b      	mov	r3, r1
 8004712:	4313      	orrs	r3, r2
 8004714:	d058      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800471a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800471e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004722:	d033      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004724:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004728:	d82c      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800472a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800472e:	d02f      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004730:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004734:	d826      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800473a:	d02b      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800473c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004740:	d820      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8004742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004746:	d012      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474c:	d81a      	bhi.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d022      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d115      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004758:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800475c:	3308      	adds	r3, #8
 800475e:	2100      	movs	r1, #0
 8004760:	4618      	mov	r0, r3
 8004762:	f001 fc81 	bl	8006068 <RCCEx_PLL2_Config>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800476c:	e015      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800476e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004772:	3328      	adds	r3, #40	; 0x28
 8004774:	2102      	movs	r1, #2
 8004776:	4618      	mov	r0, r3
 8004778:	f001 fd28 	bl	80061cc <RCCEx_PLL3_Config>
 800477c:	4603      	mov	r3, r0
 800477e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004782:	e00a      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800478a:	e006      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800478c:	bf00      	nop
 800478e:	e004      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004790:	bf00      	nop
 8004792:	e002      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 8004798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800479a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10e      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80047aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80047b2:	4a02      	ldr	r2, [pc, #8]	; (80047bc <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 80047b4:	430b      	orrs	r3, r1
 80047b6:	6593      	str	r3, [r2, #88]	; 0x58
 80047b8:	e006      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 80047ba:	bf00      	nop
 80047bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80047d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80047de:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80047e2:	460b      	mov	r3, r1
 80047e4:	4313      	orrs	r3, r2
 80047e6:	d055      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80047e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80047f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047f4:	d033      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80047f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047fa:	d82c      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	d02f      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004806:	d826      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004808:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800480c:	d02b      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800480e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004812:	d820      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004818:	d012      	beq.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800481a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800481e:	d81a      	bhi.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 8004820:	2b00      	cmp	r3, #0
 8004822:	d022      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 8004824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004828:	d115      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800482a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800482e:	3308      	adds	r3, #8
 8004830:	2100      	movs	r1, #0
 8004832:	4618      	mov	r0, r3
 8004834:	f001 fc18 	bl	8006068 <RCCEx_PLL2_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800483e:	e015      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004840:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004844:	3328      	adds	r3, #40	; 0x28
 8004846:	2102      	movs	r1, #2
 8004848:	4618      	mov	r0, r3
 800484a:	f001 fcbf 	bl	80061cc <RCCEx_PLL3_Config>
 800484e:	4603      	mov	r3, r0
 8004850:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004854:	e00a      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800485c:	e006      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800485e:	bf00      	nop
 8004860:	e004      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004862:	bf00      	nop
 8004864:	e002      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 8004866:	bf00      	nop
 8004868:	e000      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800486a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004870:	2b00      	cmp	r3, #0
 8004872:	d10b      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004874:	4ba1      	ldr	r3, [pc, #644]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004878:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800487c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004880:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004884:	4a9d      	ldr	r2, [pc, #628]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004886:	430b      	orrs	r3, r1
 8004888:	6593      	str	r3, [r2, #88]	; 0x58
 800488a:	e003      	b.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004890:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004894:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	f002 0308 	and.w	r3, r2, #8
 80048a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80048a4:	2300      	movs	r3, #0
 80048a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80048aa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80048ae:	460b      	mov	r3, r1
 80048b0:	4313      	orrs	r3, r2
 80048b2:	d01e      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80048b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c0:	d10c      	bne.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80048c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048c6:	3328      	adds	r3, #40	; 0x28
 80048c8:	2102      	movs	r1, #2
 80048ca:	4618      	mov	r0, r3
 80048cc:	f001 fc7e 	bl	80061cc <RCCEx_PLL3_Config>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80048dc:	4b87      	ldr	r3, [pc, #540]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	4a83      	ldr	r2, [pc, #524]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80048ee:	430b      	orrs	r3, r1
 80048f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80048f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fa:	f002 0310 	and.w	r3, r2, #16
 80048fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004902:	2300      	movs	r3, #0
 8004904:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004908:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800490c:	460b      	mov	r3, r1
 800490e:	4313      	orrs	r3, r2
 8004910:	d01e      	beq.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004912:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004916:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800491a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800491e:	d10c      	bne.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004920:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004924:	3328      	adds	r3, #40	; 0x28
 8004926:	2102      	movs	r1, #2
 8004928:	4618      	mov	r0, r3
 800492a:	f001 fc4f 	bl	80061cc <RCCEx_PLL3_Config>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800493a:	4b70      	ldr	r3, [pc, #448]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800493c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800493e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004942:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004946:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800494a:	4a6c      	ldr	r2, [pc, #432]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800494c:	430b      	orrs	r3, r1
 800494e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004950:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800495c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004960:	2300      	movs	r3, #0
 8004962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004966:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800496a:	460b      	mov	r3, r1
 800496c:	4313      	orrs	r3, r2
 800496e:	d03e      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004970:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004974:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004978:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800497c:	d022      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800497e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004982:	d81b      	bhi.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 8004988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800498c:	d00b      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800498e:	e015      	b.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004990:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004994:	3308      	adds	r3, #8
 8004996:	2100      	movs	r1, #0
 8004998:	4618      	mov	r0, r3
 800499a:	f001 fb65 	bl	8006068 <RCCEx_PLL2_Config>
 800499e:	4603      	mov	r3, r0
 80049a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049a4:	e00f      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049aa:	3328      	adds	r3, #40	; 0x28
 80049ac:	2102      	movs	r1, #2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f001 fc0c 	bl	80061cc <RCCEx_PLL3_Config>
 80049b4:	4603      	mov	r3, r0
 80049b6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80049ba:	e004      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80049c2:	e000      	b.n	80049c6 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 80049c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10b      	bne.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049ce:	4b4b      	ldr	r3, [pc, #300]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049d2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80049d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80049de:	4a47      	ldr	r2, [pc, #284]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80049e0:	430b      	orrs	r3, r1
 80049e2:	6593      	str	r3, [r2, #88]	; 0x58
 80049e4:	e003      	b.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80049ea:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80049ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80049f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80049fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80049fc:	2300      	movs	r3, #0
 80049fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a00:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004a04:	460b      	mov	r3, r1
 8004a06:	4313      	orrs	r3, r2
 8004a08:	d03b      	beq.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a16:	d01f      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004a18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004a1c:	d818      	bhi.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a22:	d003      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xf10>
 8004a24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a28:	d007      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004a2a:	e011      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a2c:	4b33      	ldr	r3, [pc, #204]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a30:	4a32      	ldr	r2, [pc, #200]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a38:	e00f      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004a3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a3e:	3328      	adds	r3, #40	; 0x28
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f001 fbc2 	bl	80061cc <RCCEx_PLL3_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004a4e:	e004      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004a56:	e000      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10b      	bne.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a62:	4b26      	ldr	r3, [pc, #152]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a66:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004a6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	4a22      	ldr	r2, [pc, #136]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004a74:	430b      	orrs	r3, r1
 8004a76:	6553      	str	r3, [r2, #84]	; 0x54
 8004a78:	e003      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a7a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004a7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a8a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004a8e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a90:	2300      	movs	r3, #0
 8004a92:	677b      	str	r3, [r7, #116]	; 0x74
 8004a94:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	d034      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004a9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aac:	d007      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 8004aae:	e011      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab0:	4b12      	ldr	r3, [pc, #72]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab4:	4a11      	ldr	r2, [pc, #68]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ab6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004aba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004abc:	e00e      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004ac2:	3308      	adds	r3, #8
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f001 face 	bl	8006068 <RCCEx_PLL2_Config>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004ad2:	e003      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004adc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10d      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004ae4:	4b05      	ldr	r3, [pc, #20]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ae8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	4a02      	ldr	r2, [pc, #8]	; (8004afc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004af4:	430b      	orrs	r3, r1
 8004af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004af8:	e006      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8004afa:	bf00      	nop
 8004afc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004b04:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004b14:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b16:	2300      	movs	r3, #0
 8004b18:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b1a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4313      	orrs	r3, r2
 8004b22:	d00c      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b28:	3328      	adds	r3, #40	; 0x28
 8004b2a:	2102      	movs	r1, #2
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f001 fb4d 	bl	80061cc <RCCEx_PLL3_Config>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d002      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004b4a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	667b      	str	r3, [r7, #100]	; 0x64
 8004b50:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004b54:	460b      	mov	r3, r1
 8004b56:	4313      	orrs	r3, r2
 8004b58:	d038      	beq.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b66:	d018      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 8004b68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b6c:	d811      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004b6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b72:	d014      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b78:	d80b      	bhi.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d011      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 8004b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b82:	d106      	bne.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b84:	4bc3      	ldr	r3, [pc, #780]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	4ac2      	ldr	r2, [pc, #776]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004b8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004b90:	e008      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004b98:	e004      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 8004ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10b      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bac:	4bb9      	ldr	r3, [pc, #740]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004bb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bbc:	4ab5      	ldr	r2, [pc, #724]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	6553      	str	r3, [r2, #84]	; 0x54
 8004bc2:	e003      	b.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004bc8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004bcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bda:	2300      	movs	r3, #0
 8004bdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bde:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004be2:	460b      	mov	r3, r1
 8004be4:	4313      	orrs	r3, r2
 8004be6:	d009      	beq.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004be8:	4baa      	ldr	r3, [pc, #680]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004bf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004bf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bf6:	4aa7      	ldr	r2, [pc, #668]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c04:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004c08:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	657b      	str	r3, [r7, #84]	; 0x54
 8004c0e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004c12:	460b      	mov	r3, r1
 8004c14:	4313      	orrs	r3, r2
 8004c16:	d009      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c18:	4b9e      	ldr	r3, [pc, #632]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	4a9b      	ldr	r2, [pc, #620]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6513      	str	r3, [r2, #80]	; 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8004c2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c34:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8004c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c3e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004c42:	460b      	mov	r3, r1
 8004c44:	4313      	orrs	r3, r2
 8004c46:	d009      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8004c48:	4b92      	ldr	r3, [pc, #584]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	f023 6100 	bic.w	r1, r3, #134217728	; 0x8000000
 8004c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c56:	4a8f      	ldr	r2, [pc, #572]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c58:	430b      	orrs	r3, r1
 8004c5a:	6593      	str	r3, [r2, #88]	; 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004c5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004c68:	643b      	str	r3, [r7, #64]	; 0x40
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004c72:	460b      	mov	r3, r1
 8004c74:	4313      	orrs	r3, r2
 8004c76:	d00e      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004c78:	4b86      	ldr	r3, [pc, #536]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	4a85      	ldr	r2, [pc, #532]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c7e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c82:	6113      	str	r3, [r2, #16]
 8004c84:	4b83      	ldr	r3, [pc, #524]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c86:	6919      	ldr	r1, [r3, #16]
 8004c88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c8c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004c90:	4a80      	ldr	r2, [pc, #512]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004c92:	430b      	orrs	r3, r1
 8004c94:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004c96:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ca8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004cac:	460b      	mov	r3, r1
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	d009      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004cb2:	4b78      	ldr	r3, [pc, #480]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cb6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004cba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	4a74      	ldr	r2, [pc, #464]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cc2:	430b      	orrs	r3, r1
 8004cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cce:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004cd2:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004cdc:	460b      	mov	r3, r1
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	d00a      	beq.n	8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ce2:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf2:	4a68      	ldr	r2, [pc, #416]	; (8004e94 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 8004cf4:	430b      	orrs	r3, r1
 8004cf6:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d00:	2100      	movs	r1, #0
 8004d02:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4313      	orrs	r3, r2
 8004d12:	d011      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d18:	3308      	adds	r3, #8
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f001 f9a3 	bl	8006068 <RCCEx_PLL2_Config>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004d28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d003      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	2100      	movs	r1, #0
 8004d42:	6239      	str	r1, [r7, #32]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
 8004d4a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004d4e:	460b      	mov	r3, r1
 8004d50:	4313      	orrs	r3, r2
 8004d52:	d011      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d58:	3308      	adds	r3, #8
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f001 f983 	bl	8006068 <RCCEx_PLL2_Config>
 8004d62:	4603      	mov	r3, r0
 8004d64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004d68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004d74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004d78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	2100      	movs	r1, #0
 8004d82:	61b9      	str	r1, [r7, #24]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4313      	orrs	r3, r2
 8004d92:	d011      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004d98:	3308      	adds	r3, #8
 8004d9a:	2102      	movs	r1, #2
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f001 f963 	bl	8006068 <RCCEx_PLL2_Config>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004da8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d003      	beq.n	8004db8 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004db0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004db4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	2100      	movs	r1, #0
 8004dc2:	6139      	str	r1, [r7, #16]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	617b      	str	r3, [r7, #20]
 8004dca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	d011      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004dd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dd8:	3328      	adds	r3, #40	; 0x28
 8004dda:	2100      	movs	r1, #0
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 f9f5 	bl	80061cc <RCCEx_PLL3_Config>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004de8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004df0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004df4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	2100      	movs	r1, #0
 8004e02:	60b9      	str	r1, [r7, #8]
 8004e04:	f003 0310 	and.w	r3, r3, #16
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4313      	orrs	r3, r2
 8004e12:	d011      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e18:	3328      	adds	r3, #40	; 0x28
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f001 f9d5 	bl	80061cc <RCCEx_PLL3_Config>
 8004e22:	4603      	mov	r3, r0
 8004e24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e30:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e34:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004e38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e40:	2100      	movs	r1, #0
 8004e42:	6039      	str	r1, [r7, #0]
 8004e44:	f003 0320 	and.w	r3, r3, #32
 8004e48:	607b      	str	r3, [r7, #4]
 8004e4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4313      	orrs	r3, r2
 8004e52:	d011      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e54:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004e58:	3328      	adds	r3, #40	; 0x28
 8004e5a:	2102      	movs	r1, #2
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 f9b5 	bl	80061cc <RCCEx_PLL3_Config>
 8004e62:	4603      	mov	r3, r0
 8004e64:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004e68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d003      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e70:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004e74:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004e78:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d101      	bne.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	e000      	b.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e92:	bf00      	nop
 8004e94:	58024400 	.word	0x58024400

08004e98 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b090      	sub	sp, #64	; 0x40
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004ea2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004ea6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8004eaa:	430b      	orrs	r3, r1
 8004eac:	f040 8094 	bne.w	8004fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8004eb0:	4b97      	ldr	r3, [pc, #604]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	f200 8087 	bhi.w	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004ec2:	a201      	add	r2, pc, #4	; (adr r2, 8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8004ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec8:	08004edd 	.word	0x08004edd
 8004ecc:	08004f05 	.word	0x08004f05
 8004ed0:	08004f2d 	.word	0x08004f2d
 8004ed4:	08004fc9 	.word	0x08004fc9
 8004ed8:	08004f55 	.word	0x08004f55
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004edc:	4b8c      	ldr	r3, [pc, #560]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ee8:	d108      	bne.n	8004efc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004eea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 ff68 	bl	8005dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ef6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004ef8:	f000 bc97 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f00:	f000 bc93 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f04:	4b82      	ldr	r3, [pc, #520]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f10:	d108      	bne.n	8004f24 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f12:	f107 0318 	add.w	r3, r7, #24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fcac 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f20:	f000 bc83 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f28:	f000 bc7f 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004f2c:	4b78      	ldr	r3, [pc, #480]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f38:	d108      	bne.n	8004f4c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f3a:	f107 030c 	add.w	r3, r7, #12
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fdec 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004f48:	f000 bc6f 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f50:	f000 bc6b 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004f54:	4b6e      	ldr	r3, [pc, #440]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f5c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004f5e:	4b6c      	ldr	r3, [pc, #432]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d10c      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8004f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d109      	bne.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f70:	4b67      	ldr	r3, [pc, #412]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	08db      	lsrs	r3, r3, #3
 8004f76:	f003 0303 	and.w	r3, r3, #3
 8004f7a:	4a66      	ldr	r2, [pc, #408]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8004f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	e01f      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004f84:	4b62      	ldr	r3, [pc, #392]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f90:	d106      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f98:	d102      	bne.n	8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004f9a:	4b5f      	ldr	r3, [pc, #380]	; (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8004f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f9e:	e011      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004fa0:	4b5b      	ldr	r3, [pc, #364]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fac:	d106      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8004fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fb4:	d102      	bne.n	8004fbc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004fb6:	4b59      	ldr	r3, [pc, #356]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8004fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fba:	e003      	b.n	8004fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8004fc0:	f000 bc33 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8004fc4:	f000 bc31 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004fc8:	4b55      	ldr	r3, [pc, #340]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8004fca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fcc:	f000 bc2d 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004fd4:	f000 bc29 	b.w	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 8004fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fdc:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	f040 809f 	bne.w	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 8004fe6:	4b4a      	ldr	r3, [pc, #296]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8004fe8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fea:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8004fee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ff6:	d04d      	beq.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ffe:	f200 8084 	bhi.w	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	2bc0      	cmp	r3, #192	; 0xc0
 8005006:	d07d      	beq.n	8005104 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 8005008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800500a:	2bc0      	cmp	r3, #192	; 0xc0
 800500c:	d87d      	bhi.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d02d      	beq.n	8005070 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	2b80      	cmp	r3, #128	; 0x80
 8005018:	d877      	bhi.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 8005020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005022:	2b40      	cmp	r3, #64	; 0x40
 8005024:	d012      	beq.n	800504c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8005026:	e070      	b.n	800510a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005028:	4b39      	ldr	r3, [pc, #228]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005030:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005034:	d107      	bne.n	8005046 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800503a:	4618      	mov	r0, r3
 800503c:	f000 fec2 	bl	8005dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005044:	e3f1      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005046:	2300      	movs	r3, #0
 8005048:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800504a:	e3ee      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800504c:	4b30      	ldr	r3, [pc, #192]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005058:	d107      	bne.n	800506a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800505a:	f107 0318 	add.w	r3, r7, #24
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fc08 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005068:	e3df      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800506e:	e3dc      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005070:	4b27      	ldr	r3, [pc, #156]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005078:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507c:	d107      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800507e:	f107 030c 	add.w	r3, r7, #12
 8005082:	4618      	mov	r0, r3
 8005084:	f000 fd4a 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800508c:	e3cd      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800508e:	2300      	movs	r3, #0
 8005090:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005092:	e3ca      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005094:	4b1e      	ldr	r3, [pc, #120]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8005096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005098:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800509c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800509e:	4b1c      	ldr	r3, [pc, #112]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0304 	and.w	r3, r3, #4
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d10c      	bne.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 80050aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d109      	bne.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050b0:	4b17      	ldr	r3, [pc, #92]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	08db      	lsrs	r3, r3, #3
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	4a16      	ldr	r2, [pc, #88]	; (8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80050bc:	fa22 f303 	lsr.w	r3, r2, r3
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c2:	e01e      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050c4:	4b12      	ldr	r3, [pc, #72]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050d0:	d106      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80050d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050d8:	d102      	bne.n	80050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80050da:	4b0f      	ldr	r3, [pc, #60]	; (8005118 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80050dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050de:	e010      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050ec:	d106      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80050ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050f4:	d102      	bne.n	80050fc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80050f6:	4b09      	ldr	r3, [pc, #36]	; (800511c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80050f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050fa:	e002      	b.n	8005102 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80050fc:	2300      	movs	r3, #0
 80050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005100:	e393      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005102:	e392      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005104:	4b06      	ldr	r3, [pc, #24]	; (8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 8005106:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005108:	e38f      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800510a:	2300      	movs	r3, #0
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800510e:	e38c      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005110:	58024400 	.word	0x58024400
 8005114:	03d09000 	.word	0x03d09000
 8005118:	003d0900 	.word	0x003d0900
 800511c:	007a1200 	.word	0x007a1200
 8005120:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 8005124:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005128:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800512c:	430b      	orrs	r3, r1
 800512e:	f040 809c 	bne.w	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 8005132:	4b9e      	ldr	r3, [pc, #632]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	f403 6360 	and.w	r3, r3, #3584	; 0xe00
 800513a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800513c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005142:	d054      	beq.n	80051ee <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 8005144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005146:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800514a:	f200 808b 	bhi.w	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005154:	f000 8083 	beq.w	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 8005158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800515e:	f200 8081 	bhi.w	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005168:	d02f      	beq.n	80051ca <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005170:	d878      	bhi.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800517e:	d012      	beq.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 8005180:	e070      	b.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005182:	4b8a      	ldr	r3, [pc, #552]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800518e:	d107      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005190:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fe15 	bl	8005dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800519a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800519e:	e344      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051a4:	e341      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051a6:	4b81      	ldr	r3, [pc, #516]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b2:	d107      	bne.n	80051c4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051b4:	f107 0318 	add.w	r3, r7, #24
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fb5b 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051c2:	e332      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051c8:	e32f      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051ca:	4b78      	ldr	r3, [pc, #480]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80051d6:	d107      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051d8:	f107 030c 	add.w	r3, r7, #12
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fc9d 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051e6:	e320      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80051ec:	e31d      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80051ee:	4b6f      	ldr	r3, [pc, #444]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051f6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80051f8:	4b6c      	ldr	r3, [pc, #432]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b04      	cmp	r3, #4
 8005202:	d10c      	bne.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 8005204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005206:	2b00      	cmp	r3, #0
 8005208:	d109      	bne.n	800521e <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800520a:	4b68      	ldr	r3, [pc, #416]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	08db      	lsrs	r3, r3, #3
 8005210:	f003 0303 	and.w	r3, r3, #3
 8005214:	4a66      	ldr	r2, [pc, #408]	; (80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 8005216:	fa22 f303 	lsr.w	r3, r2, r3
 800521a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800521c:	e01e      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800521e:	4b63      	ldr	r3, [pc, #396]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800522a:	d106      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800522c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800522e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005232:	d102      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005234:	4b5f      	ldr	r3, [pc, #380]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 8005236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005238:	e010      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800523a:	4b5c      	ldr	r3, [pc, #368]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005246:	d106      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8005248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800524e:	d102      	bne.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005250:	4b59      	ldr	r3, [pc, #356]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 8005252:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005254:	e002      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        break;
 800525a:	e2e6      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800525c:	e2e5      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800525e:	4b57      	ldr	r3, [pc, #348]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 8005260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005262:	e2e2      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005264:	2300      	movs	r3, #0
 8005266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005268:	e2df      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800526a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800526e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005272:	430b      	orrs	r3, r1
 8005274:	f040 80a7 	bne.w	80053c6 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005278:	4b4c      	ldr	r3, [pc, #304]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800527a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800527c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005280:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005288:	d055      	beq.n	8005336 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800528a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005290:	f200 8096 	bhi.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 8005294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005296:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800529a:	f000 8084 	beq.w	80053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052a4:	f200 808c 	bhi.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052ae:	d030      	beq.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b6:	f200 8083 	bhi.w	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c6:	d012      	beq.n	80052ee <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 80052c8:	e07a      	b.n	80053c0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052ca:	4b38      	ldr	r3, [pc, #224]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052d6:	d107      	bne.n	80052e8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80052d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052dc:	4618      	mov	r0, r3
 80052de:	f000 fd71 	bl	8005dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80052e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052e6:	e2a0      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80052ec:	e29d      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80052ee:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052fa:	d107      	bne.n	800530c <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80052fc:	f107 0318 	add.w	r3, r7, #24
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fab7 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800530a:	e28e      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800530c:	2300      	movs	r3, #0
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005310:	e28b      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005312:	4b26      	ldr	r3, [pc, #152]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800531a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800531e:	d107      	bne.n	8005330 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005320:	f107 030c 	add.w	r3, r7, #12
 8005324:	4618      	mov	r0, r3
 8005326:	f000 fbf9 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800532e:	e27c      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005334:	e279      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005336:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800533e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005340:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d10c      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800534c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800534e:	2b00      	cmp	r3, #0
 8005350:	d109      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005352:	4b16      	ldr	r3, [pc, #88]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	08db      	lsrs	r3, r3, #3
 8005358:	f003 0303 	and.w	r3, r3, #3
 800535c:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800535e:	fa22 f303 	lsr.w	r3, r2, r3
 8005362:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005364:	e01e      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005366:	4b11      	ldr	r3, [pc, #68]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800536e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005372:	d106      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537a:	d102      	bne.n	8005382 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800537c:	4b0d      	ldr	r3, [pc, #52]	; (80053b4 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800537e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005380:	e010      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005382:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800538e:	d106      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005396:	d102      	bne.n	800539e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005398:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800539a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800539c:	e002      	b.n	80053a4 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800539e:	2300      	movs	r3, #0
 80053a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80053a2:	e242      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80053a4:	e241      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80053a6:	4b05      	ldr	r3, [pc, #20]	; (80053bc <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 80053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053aa:	e23e      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80053ac:	58024400 	.word	0x58024400
 80053b0:	03d09000 	.word	0x03d09000
 80053b4:	003d0900 	.word	0x003d0900
 80053b8:	007a1200 	.word	0x007a1200
 80053bc:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053c4:	e231      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80053c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053ca:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80053ce:	430b      	orrs	r3, r1
 80053d0:	f040 8085 	bne.w	80054de <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80053d4:	4b9c      	ldr	r3, [pc, #624]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80053d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80053dc:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80053de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e4:	d06b      	beq.n	80054be <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053ec:	d874      	bhi.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80053ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053f4:	d056      	beq.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 80053f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80053fc:	d86c      	bhi.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005404:	d03b      	beq.n	800547e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800540c:	d864      	bhi.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005414:	d021      	beq.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 8005416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800541c:	d85c      	bhi.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	2b00      	cmp	r3, #0
 8005422:	d004      	beq.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800542a:	d004      	beq.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800542c:	e054      	b.n	80054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800542e:	f7fe fb49 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8005432:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005434:	e1f9      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005436:	4b84      	ldr	r3, [pc, #528]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800543e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005442:	d107      	bne.n	8005454 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005444:	f107 0318 	add.w	r3, r7, #24
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fa13 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800544e:	69fb      	ldr	r3, [r7, #28]
 8005450:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005452:	e1ea      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005454:	2300      	movs	r3, #0
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005458:	e1e7      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800545a:	4b7b      	ldr	r3, [pc, #492]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005462:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005466:	d107      	bne.n	8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005468:	f107 030c 	add.w	r3, r7, #12
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fb55 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005476:	e1d8      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005478:	2300      	movs	r3, #0
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800547c:	e1d5      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800547e:	4b72      	ldr	r3, [pc, #456]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b04      	cmp	r3, #4
 8005488:	d109      	bne.n	800549e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800548a:	4b6f      	ldr	r3, [pc, #444]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	08db      	lsrs	r3, r3, #3
 8005490:	f003 0303 	and.w	r3, r3, #3
 8005494:	4a6d      	ldr	r2, [pc, #436]	; (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800549c:	e1c5      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800549e:	2300      	movs	r3, #0
 80054a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054a2:	e1c2      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80054a4:	4b68      	ldr	r3, [pc, #416]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b0:	d102      	bne.n	80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 80054b2:	4b67      	ldr	r3, [pc, #412]	; (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054b6:	e1b8      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054b8:	2300      	movs	r3, #0
 80054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054bc:	e1b5      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80054be:	4b62      	ldr	r3, [pc, #392]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054ca:	d102      	bne.n	80054d2 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 80054cc:	4b61      	ldr	r3, [pc, #388]	; (8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80054ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054d0:	e1ab      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054d6:	e1a8      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 80054d8:	2300      	movs	r3, #0
 80054da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80054dc:	e1a5      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80054de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054e2:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80054e6:	430b      	orrs	r3, r1
 80054e8:	d173      	bne.n	80055d2 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80054ea:	4b57      	ldr	r3, [pc, #348]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80054ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80054f2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80054fa:	d02f      	beq.n	800555c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005502:	d863      	bhi.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d004      	beq.n	8005514 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800550a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005510:	d012      	beq.n	8005538 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 8005512:	e05b      	b.n	80055cc <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005514:	4b4c      	ldr	r3, [pc, #304]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800551c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005520:	d107      	bne.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005522:	f107 0318 	add.w	r3, r7, #24
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f9a4 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005530:	e17b      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005536:	e178      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005538:	4b43      	ldr	r3, [pc, #268]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005544:	d107      	bne.n	8005556 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005546:	f107 030c 	add.w	r3, r7, #12
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fae6 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005554:	e169      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005556:	2300      	movs	r3, #0
 8005558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800555a:	e166      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800555c:	4b3a      	ldr	r3, [pc, #232]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800555e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005560:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005564:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005566:	4b38      	ldr	r3, [pc, #224]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b04      	cmp	r3, #4
 8005570:	d10c      	bne.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 8005572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005574:	2b00      	cmp	r3, #0
 8005576:	d109      	bne.n	800558c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005578:	4b33      	ldr	r3, [pc, #204]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	08db      	lsrs	r3, r3, #3
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	4a32      	ldr	r2, [pc, #200]	; (800564c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558a:	e01e      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800558c:	4b2e      	ldr	r3, [pc, #184]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005598:	d106      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800559a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800559c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055a0:	d102      	bne.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055a2:	4b2b      	ldr	r3, [pc, #172]	; (8005650 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a6:	e010      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055a8:	4b27      	ldr	r3, [pc, #156]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055b4:	d106      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 80055b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055bc:	d102      	bne.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055be:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055c2:	e002      	b.n	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80055c8:	e12f      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 80055ca:	e12e      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 80055cc:	2300      	movs	r3, #0
 80055ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055d0:	e12b      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80055d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055d6:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80055da:	430b      	orrs	r3, r1
 80055dc:	d13c      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80055de:	4b1a      	ldr	r3, [pc, #104]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80055e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055e6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80055e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d004      	beq.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80055ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f4:	d012      	beq.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 80055f6:	e023      	b.n	8005640 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055f8:	4b13      	ldr	r3, [pc, #76]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005600:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005604:	d107      	bne.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fbda 	bl	8005dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005614:	e109      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005616:	2300      	movs	r3, #0
 8005618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800561a:	e106      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005624:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005628:	d107      	bne.n	800563a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800562a:	f107 0318 	add.w	r3, r7, #24
 800562e:	4618      	mov	r0, r3
 8005630:	f000 f920 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005634:	6a3b      	ldr	r3, [r7, #32]
 8005636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005638:	e0f7      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800563a:	2300      	movs	r3, #0
 800563c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800563e:	e0f4      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 8005640:	2300      	movs	r3, #0
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005644:	e0f1      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 8005646:	bf00      	nop
 8005648:	58024400 	.word	0x58024400
 800564c:	03d09000 	.word	0x03d09000
 8005650:	003d0900 	.word	0x003d0900
 8005654:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800565c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005660:	430b      	orrs	r3, r1
 8005662:	f040 8091 	bne.w	8005788 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005666:	4b73      	ldr	r3, [pc, #460]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800566e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005676:	f000 8081 	beq.w	800577c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f1b3 4fc0 	cmp.w	r3, #1610612736	; 0x60000000
 8005680:	d87f      	bhi.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005688:	d06b      	beq.n	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800568a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800568c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005690:	d877      	bhi.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8005692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005698:	d056      	beq.n	8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d86f      	bhi.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80056a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056a8:	d03b      	beq.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80056aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80056b0:	d867      	bhi.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80056b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056b8:	d021      	beq.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80056ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056c0:	d85f      	bhi.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80056c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80056c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056ce:	d004      	beq.n	80056da <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 80056d0:	e057      	b.n	8005782 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80056d2:	f000 f8b9 	bl	8005848 <HAL_RCCEx_GetD3PCLK1Freq>
 80056d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056d8:	e0a7      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80056da:	4b56      	ldr	r3, [pc, #344]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e6:	d107      	bne.n	80056f8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80056e8:	f107 0318 	add.w	r3, r7, #24
 80056ec:	4618      	mov	r0, r3
 80056ee:	f000 f8c1 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056f6:	e098      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056fc:	e095      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056fe:	4b4d      	ldr	r3, [pc, #308]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005706:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800570a:	d107      	bne.n	800571c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800570c:	f107 030c 	add.w	r3, r7, #12
 8005710:	4618      	mov	r0, r3
 8005712:	f000 fa03 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800571a:	e086      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800571c:	2300      	movs	r3, #0
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005720:	e083      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005722:	4b44      	ldr	r3, [pc, #272]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0304 	and.w	r3, r3, #4
 800572a:	2b04      	cmp	r3, #4
 800572c:	d109      	bne.n	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800572e:	4b41      	ldr	r3, [pc, #260]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	08db      	lsrs	r3, r3, #3
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	4a3f      	ldr	r2, [pc, #252]	; (8005838 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005740:	e073      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005742:	2300      	movs	r3, #0
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005746:	e070      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005748:	4b3a      	ldr	r3, [pc, #232]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005754:	d102      	bne.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 8005756:	4b39      	ldr	r3, [pc, #228]	; (800583c <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800575a:	e066      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005760:	e063      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005762:	4b34      	ldr	r3, [pc, #208]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800576a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800576e:	d102      	bne.n	8005776 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 8005770:	4b33      	ldr	r3, [pc, #204]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005774:	e059      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 8005776:	2300      	movs	r3, #0
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800577a:	e056      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800577c:	4b31      	ldr	r3, [pc, #196]	; (8005844 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800577e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005780:	e053      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005782:	2300      	movs	r3, #0
 8005784:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005786:	e050      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005788:	e9d7 2300 	ldrd	r2, r3, [r7]
 800578c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005790:	430b      	orrs	r3, r1
 8005792:	d148      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005794:	4b27      	ldr	r3, [pc, #156]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8005796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005798:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800579c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057a4:	d02a      	beq.n	80057fc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057ac:	d838      	bhi.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d004      	beq.n	80057be <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80057b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057ba:	d00d      	beq.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 80057bc:	e030      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80057be:	4b1d      	ldr	r3, [pc, #116]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80057ca:	d102      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 80057cc:	4b1c      	ldr	r3, [pc, #112]	; (8005840 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 80057ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057d0:	e02b      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d6:	e028      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057d8:	4b16      	ldr	r3, [pc, #88]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80057e4:	d107      	bne.n	80057f6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057ea:	4618      	mov	r0, r3
 80057ec:	f000 faea 	bl	8005dc4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057f4:	e019      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057fa:	e016      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057fc:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005804:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005808:	d107      	bne.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800580a:	f107 0318 	add.w	r3, r7, #24
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f830 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005818:	e007      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800581a:	2300      	movs	r3, #0
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800581e:	e004      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 8005820:	2300      	movs	r3, #0
 8005822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005824:	e001      	b.n	800582a <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800582a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800582c:	4618      	mov	r0, r3
 800582e:	3740      	adds	r7, #64	; 0x40
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}
 8005834:	58024400 	.word	0x58024400
 8005838:	03d09000 	.word	0x03d09000
 800583c:	003d0900 	.word	0x003d0900
 8005840:	007a1200 	.word	0x007a1200
 8005844:	00bb8000 	.word	0x00bb8000

08005848 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800584c:	f7fe f90a 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	091b      	lsrs	r3, r3, #4
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4904      	ldr	r1, [pc, #16]	; (8005870 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8005868:	4618      	mov	r0, r3
 800586a:	bd80      	pop	{r7, pc}
 800586c:	58024400 	.word	0x58024400
 8005870:	08008294 	.word	0x08008294

08005874 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005874:	b480      	push	{r7}
 8005876:	b089      	sub	sp, #36	; 0x24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800587c:	4ba1      	ldr	r3, [pc, #644]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800587e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005880:	f003 0303 	and.w	r3, r3, #3
 8005884:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005886:	4b9f      	ldr	r3, [pc, #636]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800588a:	0b1b      	lsrs	r3, r3, #12
 800588c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005890:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005892:	4b9c      	ldr	r3, [pc, #624]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005896:	091b      	lsrs	r3, r3, #4
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800589e:	4b99      	ldr	r3, [pc, #612]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	08db      	lsrs	r3, r3, #3
 80058a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	fb02 f303 	mul.w	r3, r2, r3
 80058ae:	ee07 3a90 	vmov	s15, r3
 80058b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 8111 	beq.w	8005ae4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	f000 8083 	beq.w	80059d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	f200 80a1 	bhi.w	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d003      	beq.n	80058e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d056      	beq.n	800598c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80058de:	e099      	b.n	8005a14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058e0:	4b88      	ldr	r3, [pc, #544]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d02d      	beq.n	8005948 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058ec:	4b85      	ldr	r3, [pc, #532]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	08db      	lsrs	r3, r3, #3
 80058f2:	f003 0303 	and.w	r3, r3, #3
 80058f6:	4a84      	ldr	r2, [pc, #528]	; (8005b08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
 80058fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	ee07 3a90 	vmov	s15, r3
 8005904:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	ee07 3a90 	vmov	s15, r3
 800590e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005916:	4b7b      	ldr	r3, [pc, #492]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800591e:	ee07 3a90 	vmov	s15, r3
 8005922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005926:	ed97 6a03 	vldr	s12, [r7, #12]
 800592a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800592e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800593a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800593e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005942:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005946:	e087      	b.n	8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	ee07 3a90 	vmov	s15, r3
 800594e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005952:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005b10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800595a:	4b6a      	ldr	r3, [pc, #424]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800595c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005962:	ee07 3a90 	vmov	s15, r3
 8005966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800596a:	ed97 6a03 	vldr	s12, [r7, #12]
 800596e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800597a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800597e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005986:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800598a:	e065      	b.n	8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005996:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800599a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800599e:	4b59      	ldr	r3, [pc, #356]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059a6:	ee07 3a90 	vmov	s15, r3
 80059aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ce:	e043      	b.n	8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	ee07 3a90 	vmov	s15, r3
 80059d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005b18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80059de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e2:	4b48      	ldr	r3, [pc, #288]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ea:	ee07 3a90 	vmov	s15, r3
 80059ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80059fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a12:	e021      	b.n	8005a58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	ee07 3a90 	vmov	s15, r3
 8005a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a1e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005b14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a26:	4b37      	ldr	r3, [pc, #220]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a3a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005b0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005a58:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	0a5b      	lsrs	r3, r3, #9
 8005a5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a62:	ee07 3a90 	vmov	s15, r3
 8005a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a72:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a7e:	ee17 2a90 	vmov	r2, s15
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005a86:	4b1f      	ldr	r3, [pc, #124]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8a:	0c1b      	lsrs	r3, r3, #16
 8005a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005a9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aac:	ee17 2a90 	vmov	r2, s15
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ab4:	4b13      	ldr	r3, [pc, #76]	; (8005b04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	0e1b      	lsrs	r3, r3, #24
 8005aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005abe:	ee07 3a90 	vmov	s15, r3
 8005ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ada:	ee17 2a90 	vmov	r2, s15
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ae2:	e008      	b.n	8005af6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	609a      	str	r2, [r3, #8]
}
 8005af6:	bf00      	nop
 8005af8:	3724      	adds	r7, #36	; 0x24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	58024400 	.word	0x58024400
 8005b08:	03d09000 	.word	0x03d09000
 8005b0c:	46000000 	.word	0x46000000
 8005b10:	4c742400 	.word	0x4c742400
 8005b14:	4a742400 	.word	0x4a742400
 8005b18:	4af42400 	.word	0x4af42400

08005b1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b089      	sub	sp, #36	; 0x24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005b24:	4ba1      	ldr	r3, [pc, #644]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005b2e:	4b9f      	ldr	r3, [pc, #636]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b32:	0d1b      	lsrs	r3, r3, #20
 8005b34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005b3a:	4b9c      	ldr	r3, [pc, #624]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3e:	0a1b      	lsrs	r3, r3, #8
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005b46:	4b99      	ldr	r3, [pc, #612]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b4a:	08db      	lsrs	r3, r3, #3
 8005b4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005b50:	693a      	ldr	r2, [r7, #16]
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	ee07 3a90 	vmov	s15, r3
 8005b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 8111 	beq.w	8005d8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	2b02      	cmp	r3, #2
 8005b6e:	f000 8083 	beq.w	8005c78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	2b02      	cmp	r3, #2
 8005b76:	f200 80a1 	bhi.w	8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005b7a:	69bb      	ldr	r3, [r7, #24]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d056      	beq.n	8005c34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005b86:	e099      	b.n	8005cbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005b88:	4b88      	ldr	r3, [pc, #544]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0320 	and.w	r3, r3, #32
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d02d      	beq.n	8005bf0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b94:	4b85      	ldr	r3, [pc, #532]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	08db      	lsrs	r3, r3, #3
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	4a84      	ldr	r2, [pc, #528]	; (8005db0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ba4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	ee07 3a90 	vmov	s15, r3
 8005bac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	ee07 3a90 	vmov	s15, r3
 8005bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bbe:	4b7b      	ldr	r3, [pc, #492]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bce:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bd2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005be2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005bee:	e087      	b.n	8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	ee07 3a90 	vmov	s15, r3
 8005bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bfa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005db8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c02:	4b6a      	ldr	r3, [pc, #424]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c0a:	ee07 3a90 	vmov	s15, r3
 8005c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c12:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c16:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c32:	e065      	b.n	8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c3e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c46:	4b59      	ldr	r3, [pc, #356]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c4e:	ee07 3a90 	vmov	s15, r3
 8005c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c56:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c5a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005c66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005c76:	e043      	b.n	8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c82:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c8a:	4b48      	ldr	r3, [pc, #288]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c92:	ee07 3a90 	vmov	s15, r3
 8005c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005c9e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005caa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cba:	e021      	b.n	8005d00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cc6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005dbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cce:	4b37      	ldr	r3, [pc, #220]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cd6:	ee07 3a90 	vmov	s15, r3
 8005cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cde:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ce2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005db4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005cfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005cfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005d00:	4b2a      	ldr	r3, [pc, #168]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d04:	0a5b      	lsrs	r3, r3, #9
 8005d06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d26:	ee17 2a90 	vmov	r2, s15
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005d2e:	4b1f      	ldr	r3, [pc, #124]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	0c1b      	lsrs	r3, r3, #16
 8005d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d38:	ee07 3a90 	vmov	s15, r3
 8005d3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d48:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d54:	ee17 2a90 	vmov	r2, s15
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005d5c:	4b13      	ldr	r3, [pc, #76]	; (8005dac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d60:	0e1b      	lsrs	r3, r3, #24
 8005d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d66:	ee07 3a90 	vmov	s15, r3
 8005d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005d72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005d76:	edd7 6a07 	vldr	s13, [r7, #28]
 8005d7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005d7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005d82:	ee17 2a90 	vmov	r2, s15
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005d8a:	e008      	b.n	8005d9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	609a      	str	r2, [r3, #8]
}
 8005d9e:	bf00      	nop
 8005da0:	3724      	adds	r7, #36	; 0x24
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	58024400 	.word	0x58024400
 8005db0:	03d09000 	.word	0x03d09000
 8005db4:	46000000 	.word	0x46000000
 8005db8:	4c742400 	.word	0x4c742400
 8005dbc:	4a742400 	.word	0x4a742400
 8005dc0:	4af42400 	.word	0x4af42400

08005dc4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b089      	sub	sp, #36	; 0x24
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005dcc:	4ba0      	ldr	r3, [pc, #640]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005dd6:	4b9e      	ldr	r3, [pc, #632]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dda:	091b      	lsrs	r3, r3, #4
 8005ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005de0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005de2:	4b9b      	ldr	r3, [pc, #620]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005dec:	4b98      	ldr	r3, [pc, #608]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005df0:	08db      	lsrs	r3, r3, #3
 8005df2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	fb02 f303 	mul.w	r3, r2, r3
 8005dfc:	ee07 3a90 	vmov	s15, r3
 8005e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 8111 	beq.w	8006032 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	f000 8083 	beq.w	8005f1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	2b02      	cmp	r3, #2
 8005e1c:	f200 80a1 	bhi.w	8005f62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d003      	beq.n	8005e2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d056      	beq.n	8005eda <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8005e2c:	e099      	b.n	8005f62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e2e:	4b88      	ldr	r3, [pc, #544]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0320 	and.w	r3, r3, #32
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d02d      	beq.n	8005e96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e3a:	4b85      	ldr	r3, [pc, #532]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	08db      	lsrs	r3, r3, #3
 8005e40:	f003 0303 	and.w	r3, r3, #3
 8005e44:	4a83      	ldr	r2, [pc, #524]	; (8006054 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005e46:	fa22 f303 	lsr.w	r3, r2, r3
 8005e4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	ee07 3a90 	vmov	s15, r3
 8005e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e64:	4b7a      	ldr	r3, [pc, #488]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e74:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e78:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005e7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e94:	e087      	b.n	8005fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	ee07 3a90 	vmov	s15, r3
 8005e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800605c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ea4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ea8:	4b69      	ldr	r3, [pc, #420]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eb0:	ee07 3a90 	vmov	s15, r3
 8005eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eb8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ebc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ed8:	e065      	b.n	8005fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	ee07 3a90 	vmov	s15, r3
 8005ee0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ee4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006060 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005ee8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eec:	4b58      	ldr	r3, [pc, #352]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef4:	ee07 3a90 	vmov	s15, r3
 8005ef8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005efc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f00:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f1c:	e043      	b.n	8005fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	ee07 3a90 	vmov	s15, r3
 8005f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006064 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005f2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f30:	4b47      	ldr	r3, [pc, #284]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f38:	ee07 3a90 	vmov	s15, r3
 8005f3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f44:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f60:	e021      	b.n	8005fa6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	ee07 3a90 	vmov	s15, r3
 8005f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800605c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005f70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f74:	4b36      	ldr	r3, [pc, #216]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f7c:	ee07 3a90 	vmov	s15, r3
 8005f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f84:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f88:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006058 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005f8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fa0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005fa4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005fa6:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	0a5b      	lsrs	r3, r3, #9
 8005fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb0:	ee07 3a90 	vmov	s15, r3
 8005fb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fcc:	ee17 2a90 	vmov	r2, s15
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005fd4:	4b1e      	ldr	r3, [pc, #120]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fd8:	0c1b      	lsrs	r3, r3, #16
 8005fda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fde:	ee07 3a90 	vmov	s15, r3
 8005fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005fea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005fee:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ff2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ff6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ffa:	ee17 2a90 	vmov	r2, s15
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006002:	4b13      	ldr	r3, [pc, #76]	; (8006050 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006006:	0e1b      	lsrs	r3, r3, #24
 8006008:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800600c:	ee07 3a90 	vmov	s15, r3
 8006010:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006014:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006018:	ee37 7a87 	vadd.f32	s14, s15, s14
 800601c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006028:	ee17 2a90 	vmov	r2, s15
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006030:	e008      	b.n	8006044 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	609a      	str	r2, [r3, #8]
}
 8006044:	bf00      	nop
 8006046:	3724      	adds	r7, #36	; 0x24
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	58024400 	.word	0x58024400
 8006054:	03d09000 	.word	0x03d09000
 8006058:	46000000 	.word	0x46000000
 800605c:	4c742400 	.word	0x4c742400
 8006060:	4a742400 	.word	0x4a742400
 8006064:	4af42400 	.word	0x4af42400

08006068 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006076:	4b53      	ldr	r3, [pc, #332]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607a:	f003 0303 	and.w	r3, r3, #3
 800607e:	2b03      	cmp	r3, #3
 8006080:	d101      	bne.n	8006086 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	e099      	b.n	80061ba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006086:	4b4f      	ldr	r3, [pc, #316]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a4e      	ldr	r2, [pc, #312]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800608c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006092:	f7fb f9e7 	bl	8001464 <HAL_GetTick>
 8006096:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006098:	e008      	b.n	80060ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800609a:	f7fb f9e3 	bl	8001464 <HAL_GetTick>
 800609e:	4602      	mov	r2, r0
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d901      	bls.n	80060ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060a8:	2303      	movs	r3, #3
 80060aa:	e086      	b.n	80061ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80060ac:	4b45      	ldr	r3, [pc, #276]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1f0      	bne.n	800609a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80060b8:	4b42      	ldr	r3, [pc, #264]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80060ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	031b      	lsls	r3, r3, #12
 80060c6:	493f      	ldr	r1, [pc, #252]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	628b      	str	r3, [r1, #40]	; 0x28
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	3b01      	subs	r3, #1
 80060d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	3b01      	subs	r3, #1
 80060dc:	025b      	lsls	r3, r3, #9
 80060de:	b29b      	uxth	r3, r3
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	68db      	ldr	r3, [r3, #12]
 80060e6:	3b01      	subs	r3, #1
 80060e8:	041b      	lsls	r3, r3, #16
 80060ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	061b      	lsls	r3, r3, #24
 80060f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80060fc:	4931      	ldr	r1, [pc, #196]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80060fe:	4313      	orrs	r3, r2
 8006100:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006102:	4b30      	ldr	r3, [pc, #192]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	492d      	ldr	r1, [pc, #180]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006110:	4313      	orrs	r3, r2
 8006112:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006114:	4b2b      	ldr	r3, [pc, #172]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006118:	f023 0220 	bic.w	r2, r3, #32
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	4928      	ldr	r1, [pc, #160]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006122:	4313      	orrs	r3, r2
 8006124:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006126:	4b27      	ldr	r3, [pc, #156]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	4a26      	ldr	r2, [pc, #152]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800612c:	f023 0310 	bic.w	r3, r3, #16
 8006130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006132:	4b24      	ldr	r3, [pc, #144]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006134:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006136:	4b24      	ldr	r3, [pc, #144]	; (80061c8 <RCCEx_PLL2_Config+0x160>)
 8006138:	4013      	ands	r3, r2
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	69d2      	ldr	r2, [r2, #28]
 800613e:	00d2      	lsls	r2, r2, #3
 8006140:	4920      	ldr	r1, [pc, #128]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006142:	4313      	orrs	r3, r2
 8006144:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006146:	4b1f      	ldr	r3, [pc, #124]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	4a1e      	ldr	r2, [pc, #120]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800614c:	f043 0310 	orr.w	r3, r3, #16
 8006150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d106      	bne.n	8006166 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006158:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800615a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800615c:	4a19      	ldr	r2, [pc, #100]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800615e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006164:	e00f      	b.n	8006186 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d106      	bne.n	800617a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800616c:	4b15      	ldr	r3, [pc, #84]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006172:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006178:	e005      	b.n	8006186 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800617a:	4b12      	ldr	r3, [pc, #72]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	4a11      	ldr	r2, [pc, #68]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006180:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006184:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006186:	4b0f      	ldr	r3, [pc, #60]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a0e      	ldr	r2, [pc, #56]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 800618c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006192:	f7fb f967 	bl	8001464 <HAL_GetTick>
 8006196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006198:	e008      	b.n	80061ac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800619a:	f7fb f963 	bl	8001464 <HAL_GetTick>
 800619e:	4602      	mov	r2, r0
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d901      	bls.n	80061ac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e006      	b.n	80061ba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <RCCEx_PLL2_Config+0x15c>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d0f0      	beq.n	800619a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80061b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	58024400 	.word	0x58024400
 80061c8:	ffff0007 	.word	0xffff0007

080061cc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80061da:	4b53      	ldr	r3, [pc, #332]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80061dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061de:	f003 0303 	and.w	r3, r3, #3
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d101      	bne.n	80061ea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80061e6:	2301      	movs	r3, #1
 80061e8:	e099      	b.n	800631e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80061ea:	4b4f      	ldr	r3, [pc, #316]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a4e      	ldr	r2, [pc, #312]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80061f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061f6:	f7fb f935 	bl	8001464 <HAL_GetTick>
 80061fa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80061fc:	e008      	b.n	8006210 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80061fe:	f7fb f931 	bl	8001464 <HAL_GetTick>
 8006202:	4602      	mov	r2, r0
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	1ad3      	subs	r3, r2, r3
 8006208:	2b02      	cmp	r3, #2
 800620a:	d901      	bls.n	8006210 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800620c:	2303      	movs	r3, #3
 800620e:	e086      	b.n	800631e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006210:	4b45      	ldr	r3, [pc, #276]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006218:	2b00      	cmp	r3, #0
 800621a:	d1f0      	bne.n	80061fe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800621c:	4b42      	ldr	r3, [pc, #264]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 800621e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006220:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	051b      	lsls	r3, r3, #20
 800622a:	493f      	ldr	r1, [pc, #252]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 800622c:	4313      	orrs	r3, r2
 800622e:	628b      	str	r3, [r1, #40]	; 0x28
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	3b01      	subs	r3, #1
 8006236:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	3b01      	subs	r3, #1
 8006240:	025b      	lsls	r3, r3, #9
 8006242:	b29b      	uxth	r3, r3
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	68db      	ldr	r3, [r3, #12]
 800624a:	3b01      	subs	r3, #1
 800624c:	041b      	lsls	r3, r3, #16
 800624e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006252:	431a      	orrs	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	3b01      	subs	r3, #1
 800625a:	061b      	lsls	r3, r3, #24
 800625c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006260:	4931      	ldr	r1, [pc, #196]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006262:	4313      	orrs	r3, r2
 8006264:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006266:	4b30      	ldr	r3, [pc, #192]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	492d      	ldr	r1, [pc, #180]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006274:	4313      	orrs	r3, r2
 8006276:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006278:	4b2b      	ldr	r3, [pc, #172]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 800627a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	4928      	ldr	r1, [pc, #160]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006286:	4313      	orrs	r3, r2
 8006288:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800628a:	4b27      	ldr	r3, [pc, #156]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628e:	4a26      	ldr	r2, [pc, #152]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006294:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006296:	4b24      	ldr	r3, [pc, #144]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629a:	4b24      	ldr	r3, [pc, #144]	; (800632c <RCCEx_PLL3_Config+0x160>)
 800629c:	4013      	ands	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	69d2      	ldr	r2, [r2, #28]
 80062a2:	00d2      	lsls	r2, r2, #3
 80062a4:	4920      	ldr	r1, [pc, #128]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80062aa:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ae:	4a1e      	ldr	r2, [pc, #120]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d106      	bne.n	80062ca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80062bc:	4b1a      	ldr	r3, [pc, #104]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	4a19      	ldr	r2, [pc, #100]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80062c6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062c8:	e00f      	b.n	80062ea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d106      	bne.n	80062de <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80062d0:	4b15      	ldr	r3, [pc, #84]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d4:	4a14      	ldr	r2, [pc, #80]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062d6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80062da:	62d3      	str	r3, [r2, #44]	; 0x2c
 80062dc:	e005      	b.n	80062ea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80062de:	4b12      	ldr	r3, [pc, #72]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	4a11      	ldr	r2, [pc, #68]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80062e8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80062ea:	4b0f      	ldr	r3, [pc, #60]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a0e      	ldr	r2, [pc, #56]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 80062f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062f6:	f7fb f8b5 	bl	8001464 <HAL_GetTick>
 80062fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80062fc:	e008      	b.n	8006310 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80062fe:	f7fb f8b1 	bl	8001464 <HAL_GetTick>
 8006302:	4602      	mov	r2, r0
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	1ad3      	subs	r3, r2, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	d901      	bls.n	8006310 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800630c:	2303      	movs	r3, #3
 800630e:	e006      	b.n	800631e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006310:	4b05      	ldr	r3, [pc, #20]	; (8006328 <RCCEx_PLL3_Config+0x15c>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d0f0      	beq.n	80062fe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800631c:	7bfb      	ldrb	r3, [r7, #15]
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}
 8006326:	bf00      	nop
 8006328:	58024400 	.word	0x58024400
 800632c:	ffff0007 	.word	0xffff0007

08006330 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b082      	sub	sp, #8
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d101      	bne.n	8006342 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e042      	b.n	80063c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	2b00      	cmp	r3, #0
 800634a:	d106      	bne.n	800635a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fa ff63 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2224      	movs	r2, #36	; 0x24
 800635e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f022 0201 	bic.w	r2, r2, #1
 8006370:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f8ba 	bl	80064ec <UART_SetConfig>
 8006378:	4603      	mov	r3, r0
 800637a:	2b01      	cmp	r3, #1
 800637c:	d101      	bne.n	8006382 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e022      	b.n	80063c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	2b00      	cmp	r3, #0
 8006388:	d002      	beq.n	8006390 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 ff1a 	bl	80071c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800639e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f042 0201 	orr.w	r2, r2, #1
 80063be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 ffa1 	bl	8007308 <UART_CheckIdleState>
 80063c6:	4603      	mov	r3, r0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b08a      	sub	sp, #40	; 0x28
 80063d4:	af02      	add	r7, sp, #8
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	4613      	mov	r3, r2
 80063de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	2b20      	cmp	r3, #32
 80063e8:	d17b      	bne.n	80064e2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <HAL_UART_Transmit+0x26>
 80063f0:	88fb      	ldrh	r3, [r7, #6]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d101      	bne.n	80063fa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	e074      	b.n	80064e4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2221      	movs	r2, #33	; 0x21
 8006406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800640a:	f7fb f82b 	bl	8001464 <HAL_GetTick>
 800640e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	88fa      	ldrh	r2, [r7, #6]
 8006414:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	88fa      	ldrh	r2, [r7, #6]
 800641c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006428:	d108      	bne.n	800643c <HAL_UART_Transmit+0x6c>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d104      	bne.n	800643c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006432:	2300      	movs	r3, #0
 8006434:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	61bb      	str	r3, [r7, #24]
 800643a:	e003      	b.n	8006444 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006444:	e030      	b.n	80064a8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	2200      	movs	r2, #0
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f001 f803 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d005      	beq.n	8006468 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2220      	movs	r2, #32
 8006460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e03d      	b.n	80064e4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006468:	69fb      	ldr	r3, [r7, #28]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10b      	bne.n	8006486 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	881b      	ldrh	r3, [r3, #0]
 8006472:	461a      	mov	r2, r3
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800647c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	3302      	adds	r3, #2
 8006482:	61bb      	str	r3, [r7, #24]
 8006484:	e007      	b.n	8006496 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	781a      	ldrb	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	3301      	adds	r3, #1
 8006494:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29a      	uxth	r2, r3
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1c8      	bne.n	8006446 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	9300      	str	r3, [sp, #0]
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2200      	movs	r2, #0
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 ffcc 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e006      	b.n	80064e4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2220      	movs	r2, #32
 80064da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80064de:	2300      	movs	r3, #0
 80064e0:	e000      	b.n	80064e4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80064e2:	2302      	movs	r3, #2
  }
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3720      	adds	r7, #32
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f0:	b092      	sub	sp, #72	; 0x48
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	431a      	orrs	r2, r3
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	695b      	ldr	r3, [r3, #20]
 800650a:	431a      	orrs	r2, r3
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	4313      	orrs	r3, r2
 8006512:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4bbe      	ldr	r3, [pc, #760]	; (8006814 <UART_SetConfig+0x328>)
 800651c:	4013      	ands	r3, r2
 800651e:	697a      	ldr	r2, [r7, #20]
 8006520:	6812      	ldr	r2, [r2, #0]
 8006522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006524:	430b      	orrs	r3, r1
 8006526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	68da      	ldr	r2, [r3, #12]
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	430a      	orrs	r2, r1
 800653c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	699b      	ldr	r3, [r3, #24]
 8006542:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4ab3      	ldr	r2, [pc, #716]	; (8006818 <UART_SetConfig+0x32c>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006554:	4313      	orrs	r3, r2
 8006556:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689a      	ldr	r2, [r3, #8]
 800655e:	4baf      	ldr	r3, [pc, #700]	; (800681c <UART_SetConfig+0x330>)
 8006560:	4013      	ands	r3, r2
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	6812      	ldr	r2, [r2, #0]
 8006566:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006568:	430b      	orrs	r3, r1
 800656a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006572:	f023 010f 	bic.w	r1, r3, #15
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4aa6      	ldr	r2, [pc, #664]	; (8006820 <UART_SetConfig+0x334>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d177      	bne.n	800667c <UART_SetConfig+0x190>
 800658c:	4ba5      	ldr	r3, [pc, #660]	; (8006824 <UART_SetConfig+0x338>)
 800658e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006594:	2b28      	cmp	r3, #40	; 0x28
 8006596:	d86d      	bhi.n	8006674 <UART_SetConfig+0x188>
 8006598:	a201      	add	r2, pc, #4	; (adr r2, 80065a0 <UART_SetConfig+0xb4>)
 800659a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659e:	bf00      	nop
 80065a0:	08006645 	.word	0x08006645
 80065a4:	08006675 	.word	0x08006675
 80065a8:	08006675 	.word	0x08006675
 80065ac:	08006675 	.word	0x08006675
 80065b0:	08006675 	.word	0x08006675
 80065b4:	08006675 	.word	0x08006675
 80065b8:	08006675 	.word	0x08006675
 80065bc:	08006675 	.word	0x08006675
 80065c0:	0800664d 	.word	0x0800664d
 80065c4:	08006675 	.word	0x08006675
 80065c8:	08006675 	.word	0x08006675
 80065cc:	08006675 	.word	0x08006675
 80065d0:	08006675 	.word	0x08006675
 80065d4:	08006675 	.word	0x08006675
 80065d8:	08006675 	.word	0x08006675
 80065dc:	08006675 	.word	0x08006675
 80065e0:	08006655 	.word	0x08006655
 80065e4:	08006675 	.word	0x08006675
 80065e8:	08006675 	.word	0x08006675
 80065ec:	08006675 	.word	0x08006675
 80065f0:	08006675 	.word	0x08006675
 80065f4:	08006675 	.word	0x08006675
 80065f8:	08006675 	.word	0x08006675
 80065fc:	08006675 	.word	0x08006675
 8006600:	0800665d 	.word	0x0800665d
 8006604:	08006675 	.word	0x08006675
 8006608:	08006675 	.word	0x08006675
 800660c:	08006675 	.word	0x08006675
 8006610:	08006675 	.word	0x08006675
 8006614:	08006675 	.word	0x08006675
 8006618:	08006675 	.word	0x08006675
 800661c:	08006675 	.word	0x08006675
 8006620:	08006665 	.word	0x08006665
 8006624:	08006675 	.word	0x08006675
 8006628:	08006675 	.word	0x08006675
 800662c:	08006675 	.word	0x08006675
 8006630:	08006675 	.word	0x08006675
 8006634:	08006675 	.word	0x08006675
 8006638:	08006675 	.word	0x08006675
 800663c:	08006675 	.word	0x08006675
 8006640:	0800666d 	.word	0x0800666d
 8006644:	2301      	movs	r3, #1
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e326      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800664c:	2304      	movs	r3, #4
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e322      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006654:	2308      	movs	r3, #8
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665a:	e31e      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800665c:	2310      	movs	r3, #16
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006662:	e31a      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006664:	2320      	movs	r3, #32
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666a:	e316      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800666c:	2340      	movs	r3, #64	; 0x40
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006672:	e312      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006674:	2380      	movs	r3, #128	; 0x80
 8006676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800667a:	e30e      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a69      	ldr	r2, [pc, #420]	; (8006828 <UART_SetConfig+0x33c>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d130      	bne.n	80066e8 <UART_SetConfig+0x1fc>
 8006686:	4b67      	ldr	r3, [pc, #412]	; (8006824 <UART_SetConfig+0x338>)
 8006688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b05      	cmp	r3, #5
 8006690:	d826      	bhi.n	80066e0 <UART_SetConfig+0x1f4>
 8006692:	a201      	add	r2, pc, #4	; (adr r2, 8006698 <UART_SetConfig+0x1ac>)
 8006694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006698:	080066b1 	.word	0x080066b1
 800669c:	080066b9 	.word	0x080066b9
 80066a0:	080066c1 	.word	0x080066c1
 80066a4:	080066c9 	.word	0x080066c9
 80066a8:	080066d1 	.word	0x080066d1
 80066ac:	080066d9 	.word	0x080066d9
 80066b0:	2300      	movs	r3, #0
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e2f0      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80066b8:	2304      	movs	r3, #4
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e2ec      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80066c0:	2308      	movs	r3, #8
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e2e8      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e2e4      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80066d0:	2320      	movs	r3, #32
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d6:	e2e0      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80066d8:	2340      	movs	r3, #64	; 0x40
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066de:	e2dc      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066e6:	e2d8      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a4f      	ldr	r2, [pc, #316]	; (800682c <UART_SetConfig+0x340>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d130      	bne.n	8006754 <UART_SetConfig+0x268>
 80066f2:	4b4c      	ldr	r3, [pc, #304]	; (8006824 <UART_SetConfig+0x338>)
 80066f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066f6:	f003 0307 	and.w	r3, r3, #7
 80066fa:	2b05      	cmp	r3, #5
 80066fc:	d826      	bhi.n	800674c <UART_SetConfig+0x260>
 80066fe:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <UART_SetConfig+0x218>)
 8006700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006704:	0800671d 	.word	0x0800671d
 8006708:	08006725 	.word	0x08006725
 800670c:	0800672d 	.word	0x0800672d
 8006710:	08006735 	.word	0x08006735
 8006714:	0800673d 	.word	0x0800673d
 8006718:	08006745 	.word	0x08006745
 800671c:	2300      	movs	r3, #0
 800671e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006722:	e2ba      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006724:	2304      	movs	r3, #4
 8006726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800672a:	e2b6      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800672c:	2308      	movs	r3, #8
 800672e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006732:	e2b2      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006734:	2310      	movs	r3, #16
 8006736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800673a:	e2ae      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800673c:	2320      	movs	r3, #32
 800673e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006742:	e2aa      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006744:	2340      	movs	r3, #64	; 0x40
 8006746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800674a:	e2a6      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800674c:	2380      	movs	r3, #128	; 0x80
 800674e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006752:	e2a2      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a35      	ldr	r2, [pc, #212]	; (8006830 <UART_SetConfig+0x344>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d130      	bne.n	80067c0 <UART_SetConfig+0x2d4>
 800675e:	4b31      	ldr	r3, [pc, #196]	; (8006824 <UART_SetConfig+0x338>)
 8006760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006762:	f003 0307 	and.w	r3, r3, #7
 8006766:	2b05      	cmp	r3, #5
 8006768:	d826      	bhi.n	80067b8 <UART_SetConfig+0x2cc>
 800676a:	a201      	add	r2, pc, #4	; (adr r2, 8006770 <UART_SetConfig+0x284>)
 800676c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006770:	08006789 	.word	0x08006789
 8006774:	08006791 	.word	0x08006791
 8006778:	08006799 	.word	0x08006799
 800677c:	080067a1 	.word	0x080067a1
 8006780:	080067a9 	.word	0x080067a9
 8006784:	080067b1 	.word	0x080067b1
 8006788:	2300      	movs	r3, #0
 800678a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800678e:	e284      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006790:	2304      	movs	r3, #4
 8006792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006796:	e280      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006798:	2308      	movs	r3, #8
 800679a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800679e:	e27c      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80067a0:	2310      	movs	r3, #16
 80067a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067a6:	e278      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80067a8:	2320      	movs	r3, #32
 80067aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067ae:	e274      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80067b0:	2340      	movs	r3, #64	; 0x40
 80067b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067b6:	e270      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80067b8:	2380      	movs	r3, #128	; 0x80
 80067ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067be:	e26c      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <UART_SetConfig+0x348>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d142      	bne.n	8006850 <UART_SetConfig+0x364>
 80067ca:	4b16      	ldr	r3, [pc, #88]	; (8006824 <UART_SetConfig+0x338>)
 80067cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ce:	f003 0307 	and.w	r3, r3, #7
 80067d2:	2b05      	cmp	r3, #5
 80067d4:	d838      	bhi.n	8006848 <UART_SetConfig+0x35c>
 80067d6:	a201      	add	r2, pc, #4	; (adr r2, 80067dc <UART_SetConfig+0x2f0>)
 80067d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067dc:	080067f5 	.word	0x080067f5
 80067e0:	080067fd 	.word	0x080067fd
 80067e4:	08006805 	.word	0x08006805
 80067e8:	0800680d 	.word	0x0800680d
 80067ec:	08006839 	.word	0x08006839
 80067f0:	08006841 	.word	0x08006841
 80067f4:	2300      	movs	r3, #0
 80067f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80067fa:	e24e      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80067fc:	2304      	movs	r3, #4
 80067fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006802:	e24a      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006804:	2308      	movs	r3, #8
 8006806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800680a:	e246      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800680c:	2310      	movs	r3, #16
 800680e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006812:	e242      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006814:	cfff69f3 	.word	0xcfff69f3
 8006818:	58000c00 	.word	0x58000c00
 800681c:	11fff4ff 	.word	0x11fff4ff
 8006820:	40011000 	.word	0x40011000
 8006824:	58024400 	.word	0x58024400
 8006828:	40004400 	.word	0x40004400
 800682c:	40004800 	.word	0x40004800
 8006830:	40004c00 	.word	0x40004c00
 8006834:	40005000 	.word	0x40005000
 8006838:	2320      	movs	r3, #32
 800683a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800683e:	e22c      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006840:	2340      	movs	r3, #64	; 0x40
 8006842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006846:	e228      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006848:	2380      	movs	r3, #128	; 0x80
 800684a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800684e:	e224      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4ab1      	ldr	r2, [pc, #708]	; (8006b1c <UART_SetConfig+0x630>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d176      	bne.n	8006948 <UART_SetConfig+0x45c>
 800685a:	4bb1      	ldr	r3, [pc, #708]	; (8006b20 <UART_SetConfig+0x634>)
 800685c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800685e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006862:	2b28      	cmp	r3, #40	; 0x28
 8006864:	d86c      	bhi.n	8006940 <UART_SetConfig+0x454>
 8006866:	a201      	add	r2, pc, #4	; (adr r2, 800686c <UART_SetConfig+0x380>)
 8006868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686c:	08006911 	.word	0x08006911
 8006870:	08006941 	.word	0x08006941
 8006874:	08006941 	.word	0x08006941
 8006878:	08006941 	.word	0x08006941
 800687c:	08006941 	.word	0x08006941
 8006880:	08006941 	.word	0x08006941
 8006884:	08006941 	.word	0x08006941
 8006888:	08006941 	.word	0x08006941
 800688c:	08006919 	.word	0x08006919
 8006890:	08006941 	.word	0x08006941
 8006894:	08006941 	.word	0x08006941
 8006898:	08006941 	.word	0x08006941
 800689c:	08006941 	.word	0x08006941
 80068a0:	08006941 	.word	0x08006941
 80068a4:	08006941 	.word	0x08006941
 80068a8:	08006941 	.word	0x08006941
 80068ac:	08006921 	.word	0x08006921
 80068b0:	08006941 	.word	0x08006941
 80068b4:	08006941 	.word	0x08006941
 80068b8:	08006941 	.word	0x08006941
 80068bc:	08006941 	.word	0x08006941
 80068c0:	08006941 	.word	0x08006941
 80068c4:	08006941 	.word	0x08006941
 80068c8:	08006941 	.word	0x08006941
 80068cc:	08006929 	.word	0x08006929
 80068d0:	08006941 	.word	0x08006941
 80068d4:	08006941 	.word	0x08006941
 80068d8:	08006941 	.word	0x08006941
 80068dc:	08006941 	.word	0x08006941
 80068e0:	08006941 	.word	0x08006941
 80068e4:	08006941 	.word	0x08006941
 80068e8:	08006941 	.word	0x08006941
 80068ec:	08006931 	.word	0x08006931
 80068f0:	08006941 	.word	0x08006941
 80068f4:	08006941 	.word	0x08006941
 80068f8:	08006941 	.word	0x08006941
 80068fc:	08006941 	.word	0x08006941
 8006900:	08006941 	.word	0x08006941
 8006904:	08006941 	.word	0x08006941
 8006908:	08006941 	.word	0x08006941
 800690c:	08006939 	.word	0x08006939
 8006910:	2301      	movs	r3, #1
 8006912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006916:	e1c0      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006918:	2304      	movs	r3, #4
 800691a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800691e:	e1bc      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006920:	2308      	movs	r3, #8
 8006922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006926:	e1b8      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006928:	2310      	movs	r3, #16
 800692a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800692e:	e1b4      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006930:	2320      	movs	r3, #32
 8006932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006936:	e1b0      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006938:	2340      	movs	r3, #64	; 0x40
 800693a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800693e:	e1ac      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006940:	2380      	movs	r3, #128	; 0x80
 8006942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006946:	e1a8      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a75      	ldr	r2, [pc, #468]	; (8006b24 <UART_SetConfig+0x638>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d130      	bne.n	80069b4 <UART_SetConfig+0x4c8>
 8006952:	4b73      	ldr	r3, [pc, #460]	; (8006b20 <UART_SetConfig+0x634>)
 8006954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006956:	f003 0307 	and.w	r3, r3, #7
 800695a:	2b05      	cmp	r3, #5
 800695c:	d826      	bhi.n	80069ac <UART_SetConfig+0x4c0>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <UART_SetConfig+0x478>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	0800697d 	.word	0x0800697d
 8006968:	08006985 	.word	0x08006985
 800696c:	0800698d 	.word	0x0800698d
 8006970:	08006995 	.word	0x08006995
 8006974:	0800699d 	.word	0x0800699d
 8006978:	080069a5 	.word	0x080069a5
 800697c:	2300      	movs	r3, #0
 800697e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006982:	e18a      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006984:	2304      	movs	r3, #4
 8006986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800698a:	e186      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800698c:	2308      	movs	r3, #8
 800698e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006992:	e182      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006994:	2310      	movs	r3, #16
 8006996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800699a:	e17e      	b.n	8006c9a <UART_SetConfig+0x7ae>
 800699c:	2320      	movs	r3, #32
 800699e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069a2:	e17a      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80069a4:	2340      	movs	r3, #64	; 0x40
 80069a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069aa:	e176      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80069ac:	2380      	movs	r3, #128	; 0x80
 80069ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069b2:	e172      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a5b      	ldr	r2, [pc, #364]	; (8006b28 <UART_SetConfig+0x63c>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d130      	bne.n	8006a20 <UART_SetConfig+0x534>
 80069be:	4b58      	ldr	r3, [pc, #352]	; (8006b20 <UART_SetConfig+0x634>)
 80069c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c2:	f003 0307 	and.w	r3, r3, #7
 80069c6:	2b05      	cmp	r3, #5
 80069c8:	d826      	bhi.n	8006a18 <UART_SetConfig+0x52c>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <UART_SetConfig+0x4e4>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069e9 	.word	0x080069e9
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	080069f9 	.word	0x080069f9
 80069dc:	08006a01 	.word	0x08006a01
 80069e0:	08006a09 	.word	0x08006a09
 80069e4:	08006a11 	.word	0x08006a11
 80069e8:	2300      	movs	r3, #0
 80069ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069ee:	e154      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069f6:	e150      	b.n	8006c9a <UART_SetConfig+0x7ae>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80069fe:	e14c      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a06:	e148      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006a08:	2320      	movs	r3, #32
 8006a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a0e:	e144      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006a10:	2340      	movs	r3, #64	; 0x40
 8006a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a16:	e140      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006a18:	2380      	movs	r3, #128	; 0x80
 8006a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006a1e:	e13c      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a41      	ldr	r2, [pc, #260]	; (8006b2c <UART_SetConfig+0x640>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	f040 8082 	bne.w	8006b30 <UART_SetConfig+0x644>
 8006a2c:	4b3c      	ldr	r3, [pc, #240]	; (8006b20 <UART_SetConfig+0x634>)
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a34:	2b28      	cmp	r3, #40	; 0x28
 8006a36:	d86d      	bhi.n	8006b14 <UART_SetConfig+0x628>
 8006a38:	a201      	add	r2, pc, #4	; (adr r2, 8006a40 <UART_SetConfig+0x554>)
 8006a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3e:	bf00      	nop
 8006a40:	08006ae5 	.word	0x08006ae5
 8006a44:	08006b15 	.word	0x08006b15
 8006a48:	08006b15 	.word	0x08006b15
 8006a4c:	08006b15 	.word	0x08006b15
 8006a50:	08006b15 	.word	0x08006b15
 8006a54:	08006b15 	.word	0x08006b15
 8006a58:	08006b15 	.word	0x08006b15
 8006a5c:	08006b15 	.word	0x08006b15
 8006a60:	08006aed 	.word	0x08006aed
 8006a64:	08006b15 	.word	0x08006b15
 8006a68:	08006b15 	.word	0x08006b15
 8006a6c:	08006b15 	.word	0x08006b15
 8006a70:	08006b15 	.word	0x08006b15
 8006a74:	08006b15 	.word	0x08006b15
 8006a78:	08006b15 	.word	0x08006b15
 8006a7c:	08006b15 	.word	0x08006b15
 8006a80:	08006af5 	.word	0x08006af5
 8006a84:	08006b15 	.word	0x08006b15
 8006a88:	08006b15 	.word	0x08006b15
 8006a8c:	08006b15 	.word	0x08006b15
 8006a90:	08006b15 	.word	0x08006b15
 8006a94:	08006b15 	.word	0x08006b15
 8006a98:	08006b15 	.word	0x08006b15
 8006a9c:	08006b15 	.word	0x08006b15
 8006aa0:	08006afd 	.word	0x08006afd
 8006aa4:	08006b15 	.word	0x08006b15
 8006aa8:	08006b15 	.word	0x08006b15
 8006aac:	08006b15 	.word	0x08006b15
 8006ab0:	08006b15 	.word	0x08006b15
 8006ab4:	08006b15 	.word	0x08006b15
 8006ab8:	08006b15 	.word	0x08006b15
 8006abc:	08006b15 	.word	0x08006b15
 8006ac0:	08006b05 	.word	0x08006b05
 8006ac4:	08006b15 	.word	0x08006b15
 8006ac8:	08006b15 	.word	0x08006b15
 8006acc:	08006b15 	.word	0x08006b15
 8006ad0:	08006b15 	.word	0x08006b15
 8006ad4:	08006b15 	.word	0x08006b15
 8006ad8:	08006b15 	.word	0x08006b15
 8006adc:	08006b15 	.word	0x08006b15
 8006ae0:	08006b0d 	.word	0x08006b0d
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006aea:	e0d6      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006aec:	2304      	movs	r3, #4
 8006aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006af2:	e0d2      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006af4:	2308      	movs	r3, #8
 8006af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006afa:	e0ce      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006afc:	2310      	movs	r3, #16
 8006afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b02:	e0ca      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006b04:	2320      	movs	r3, #32
 8006b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b0a:	e0c6      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006b0c:	2340      	movs	r3, #64	; 0x40
 8006b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b12:	e0c2      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006b14:	2380      	movs	r3, #128	; 0x80
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006b1a:	e0be      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006b1c:	40011400 	.word	0x40011400
 8006b20:	58024400 	.word	0x58024400
 8006b24:	40007800 	.word	0x40007800
 8006b28:	40007c00 	.word	0x40007c00
 8006b2c:	40011800 	.word	0x40011800
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4aad      	ldr	r2, [pc, #692]	; (8006dec <UART_SetConfig+0x900>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d176      	bne.n	8006c28 <UART_SetConfig+0x73c>
 8006b3a:	4bad      	ldr	r3, [pc, #692]	; (8006df0 <UART_SetConfig+0x904>)
 8006b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b42:	2b28      	cmp	r3, #40	; 0x28
 8006b44:	d86c      	bhi.n	8006c20 <UART_SetConfig+0x734>
 8006b46:	a201      	add	r2, pc, #4	; (adr r2, 8006b4c <UART_SetConfig+0x660>)
 8006b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b4c:	08006bf1 	.word	0x08006bf1
 8006b50:	08006c21 	.word	0x08006c21
 8006b54:	08006c21 	.word	0x08006c21
 8006b58:	08006c21 	.word	0x08006c21
 8006b5c:	08006c21 	.word	0x08006c21
 8006b60:	08006c21 	.word	0x08006c21
 8006b64:	08006c21 	.word	0x08006c21
 8006b68:	08006c21 	.word	0x08006c21
 8006b6c:	08006bf9 	.word	0x08006bf9
 8006b70:	08006c21 	.word	0x08006c21
 8006b74:	08006c21 	.word	0x08006c21
 8006b78:	08006c21 	.word	0x08006c21
 8006b7c:	08006c21 	.word	0x08006c21
 8006b80:	08006c21 	.word	0x08006c21
 8006b84:	08006c21 	.word	0x08006c21
 8006b88:	08006c21 	.word	0x08006c21
 8006b8c:	08006c01 	.word	0x08006c01
 8006b90:	08006c21 	.word	0x08006c21
 8006b94:	08006c21 	.word	0x08006c21
 8006b98:	08006c21 	.word	0x08006c21
 8006b9c:	08006c21 	.word	0x08006c21
 8006ba0:	08006c21 	.word	0x08006c21
 8006ba4:	08006c21 	.word	0x08006c21
 8006ba8:	08006c21 	.word	0x08006c21
 8006bac:	08006c09 	.word	0x08006c09
 8006bb0:	08006c21 	.word	0x08006c21
 8006bb4:	08006c21 	.word	0x08006c21
 8006bb8:	08006c21 	.word	0x08006c21
 8006bbc:	08006c21 	.word	0x08006c21
 8006bc0:	08006c21 	.word	0x08006c21
 8006bc4:	08006c21 	.word	0x08006c21
 8006bc8:	08006c21 	.word	0x08006c21
 8006bcc:	08006c11 	.word	0x08006c11
 8006bd0:	08006c21 	.word	0x08006c21
 8006bd4:	08006c21 	.word	0x08006c21
 8006bd8:	08006c21 	.word	0x08006c21
 8006bdc:	08006c21 	.word	0x08006c21
 8006be0:	08006c21 	.word	0x08006c21
 8006be4:	08006c21 	.word	0x08006c21
 8006be8:	08006c21 	.word	0x08006c21
 8006bec:	08006c19 	.word	0x08006c19
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bf6:	e050      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006bf8:	2304      	movs	r3, #4
 8006bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006bfe:	e04c      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c00:	2308      	movs	r3, #8
 8006c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c06:	e048      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c08:	2310      	movs	r3, #16
 8006c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c0e:	e044      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c10:	2320      	movs	r3, #32
 8006c12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c16:	e040      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c18:	2340      	movs	r3, #64	; 0x40
 8006c1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c1e:	e03c      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c20:	2380      	movs	r3, #128	; 0x80
 8006c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c26:	e038      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a71      	ldr	r2, [pc, #452]	; (8006df4 <UART_SetConfig+0x908>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d130      	bne.n	8006c94 <UART_SetConfig+0x7a8>
 8006c32:	4b6f      	ldr	r3, [pc, #444]	; (8006df0 <UART_SetConfig+0x904>)
 8006c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	d826      	bhi.n	8006c8c <UART_SetConfig+0x7a0>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <UART_SetConfig+0x758>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c5d 	.word	0x08006c5d
 8006c48:	08006c65 	.word	0x08006c65
 8006c4c:	08006c6d 	.word	0x08006c6d
 8006c50:	08006c75 	.word	0x08006c75
 8006c54:	08006c7d 	.word	0x08006c7d
 8006c58:	08006c85 	.word	0x08006c85
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c62:	e01a      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6a:	e016      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c72:	e012      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7a:	e00e      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c7c:	2320      	movs	r3, #32
 8006c7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c82:	e00a      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c84:	2340      	movs	r3, #64	; 0x40
 8006c86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8a:	e006      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c8c:	2380      	movs	r3, #128	; 0x80
 8006c8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c92:	e002      	b.n	8006c9a <UART_SetConfig+0x7ae>
 8006c94:	2380      	movs	r3, #128	; 0x80
 8006c96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a55      	ldr	r2, [pc, #340]	; (8006df4 <UART_SetConfig+0x908>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	f040 80f8 	bne.w	8006e96 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006ca6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006caa:	2b20      	cmp	r3, #32
 8006cac:	dc46      	bgt.n	8006d3c <UART_SetConfig+0x850>
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	db75      	blt.n	8006d9e <UART_SetConfig+0x8b2>
 8006cb2:	3b02      	subs	r3, #2
 8006cb4:	2b1e      	cmp	r3, #30
 8006cb6:	d872      	bhi.n	8006d9e <UART_SetConfig+0x8b2>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0x7d4>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006d43 	.word	0x08006d43
 8006cc4:	08006d9f 	.word	0x08006d9f
 8006cc8:	08006d4b 	.word	0x08006d4b
 8006ccc:	08006d9f 	.word	0x08006d9f
 8006cd0:	08006d9f 	.word	0x08006d9f
 8006cd4:	08006d9f 	.word	0x08006d9f
 8006cd8:	08006d5b 	.word	0x08006d5b
 8006cdc:	08006d9f 	.word	0x08006d9f
 8006ce0:	08006d9f 	.word	0x08006d9f
 8006ce4:	08006d9f 	.word	0x08006d9f
 8006ce8:	08006d9f 	.word	0x08006d9f
 8006cec:	08006d9f 	.word	0x08006d9f
 8006cf0:	08006d9f 	.word	0x08006d9f
 8006cf4:	08006d9f 	.word	0x08006d9f
 8006cf8:	08006d6b 	.word	0x08006d6b
 8006cfc:	08006d9f 	.word	0x08006d9f
 8006d00:	08006d9f 	.word	0x08006d9f
 8006d04:	08006d9f 	.word	0x08006d9f
 8006d08:	08006d9f 	.word	0x08006d9f
 8006d0c:	08006d9f 	.word	0x08006d9f
 8006d10:	08006d9f 	.word	0x08006d9f
 8006d14:	08006d9f 	.word	0x08006d9f
 8006d18:	08006d9f 	.word	0x08006d9f
 8006d1c:	08006d9f 	.word	0x08006d9f
 8006d20:	08006d9f 	.word	0x08006d9f
 8006d24:	08006d9f 	.word	0x08006d9f
 8006d28:	08006d9f 	.word	0x08006d9f
 8006d2c:	08006d9f 	.word	0x08006d9f
 8006d30:	08006d9f 	.word	0x08006d9f
 8006d34:	08006d9f 	.word	0x08006d9f
 8006d38:	08006d91 	.word	0x08006d91
 8006d3c:	2b40      	cmp	r3, #64	; 0x40
 8006d3e:	d02a      	beq.n	8006d96 <UART_SetConfig+0x8aa>
 8006d40:	e02d      	b.n	8006d9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006d42:	f7fe fd81 	bl	8005848 <HAL_RCCEx_GetD3PCLK1Freq>
 8006d46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006d48:	e02f      	b.n	8006daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fd90 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d58:	e027      	b.n	8006daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006d5a:	f107 0318 	add.w	r3, r7, #24
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fe fedc 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d68:	e01f      	b.n	8006daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d6a:	4b21      	ldr	r3, [pc, #132]	; (8006df0 <UART_SetConfig+0x904>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f003 0320 	and.w	r3, r3, #32
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d009      	beq.n	8006d8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006d76:	4b1e      	ldr	r3, [pc, #120]	; (8006df0 <UART_SetConfig+0x904>)
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	08db      	lsrs	r3, r3, #3
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	4a1d      	ldr	r2, [pc, #116]	; (8006df8 <UART_SetConfig+0x90c>)
 8006d82:	fa22 f303 	lsr.w	r3, r2, r3
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d88:	e00f      	b.n	8006daa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006d8a:	4b1b      	ldr	r3, [pc, #108]	; (8006df8 <UART_SetConfig+0x90c>)
 8006d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d8e:	e00c      	b.n	8006daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006d90:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <UART_SetConfig+0x910>)
 8006d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d94:	e009      	b.n	8006daa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006d9c:	e005      	b.n	8006daa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006da8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 81ee 	beq.w	800718e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	4a12      	ldr	r2, [pc, #72]	; (8006e00 <UART_SetConfig+0x914>)
 8006db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dc4:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	4613      	mov	r3, r2
 8006dcc:	005b      	lsls	r3, r3, #1
 8006dce:	4413      	add	r3, r2
 8006dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d305      	bcc.n	8006de2 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d910      	bls.n	8006e04 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8006de2:	2301      	movs	r3, #1
 8006de4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006de8:	e1d1      	b.n	800718e <UART_SetConfig+0xca2>
 8006dea:	bf00      	nop
 8006dec:	40011c00 	.word	0x40011c00
 8006df0:	58024400 	.word	0x58024400
 8006df4:	58000c00 	.word	0x58000c00
 8006df8:	03d09000 	.word	0x03d09000
 8006dfc:	003d0900 	.word	0x003d0900
 8006e00:	080082a4 	.word	0x080082a4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e06:	2200      	movs	r2, #0
 8006e08:	60bb      	str	r3, [r7, #8]
 8006e0a:	60fa      	str	r2, [r7, #12]
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e10:	4ac0      	ldr	r2, [pc, #768]	; (8007114 <UART_SetConfig+0xc28>)
 8006e12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	2200      	movs	r2, #0
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	607a      	str	r2, [r7, #4]
 8006e1e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e22:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e26:	f7f9 fa61 	bl	80002ec <__aeabi_uldivmod>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	4610      	mov	r0, r2
 8006e30:	4619      	mov	r1, r3
 8006e32:	f04f 0200 	mov.w	r2, #0
 8006e36:	f04f 0300 	mov.w	r3, #0
 8006e3a:	020b      	lsls	r3, r1, #8
 8006e3c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e40:	0202      	lsls	r2, r0, #8
 8006e42:	6979      	ldr	r1, [r7, #20]
 8006e44:	6849      	ldr	r1, [r1, #4]
 8006e46:	0849      	lsrs	r1, r1, #1
 8006e48:	2000      	movs	r0, #0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	4605      	mov	r5, r0
 8006e4e:	eb12 0804 	adds.w	r8, r2, r4
 8006e52:	eb43 0905 	adc.w	r9, r3, r5
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	469a      	mov	sl, r3
 8006e5e:	4693      	mov	fp, r2
 8006e60:	4652      	mov	r2, sl
 8006e62:	465b      	mov	r3, fp
 8006e64:	4640      	mov	r0, r8
 8006e66:	4649      	mov	r1, r9
 8006e68:	f7f9 fa40 	bl	80002ec <__aeabi_uldivmod>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4613      	mov	r3, r2
 8006e72:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e7a:	d308      	bcc.n	8006e8e <UART_SetConfig+0x9a2>
 8006e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e82:	d204      	bcs.n	8006e8e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e8a:	60da      	str	r2, [r3, #12]
 8006e8c:	e17f      	b.n	800718e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006e94:	e17b      	b.n	800718e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e9e:	f040 80bd 	bne.w	800701c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8006ea2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006ea6:	2b20      	cmp	r3, #32
 8006ea8:	dc48      	bgt.n	8006f3c <UART_SetConfig+0xa50>
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	db7b      	blt.n	8006fa6 <UART_SetConfig+0xaba>
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d879      	bhi.n	8006fa6 <UART_SetConfig+0xaba>
 8006eb2:	a201      	add	r2, pc, #4	; (adr r2, 8006eb8 <UART_SetConfig+0x9cc>)
 8006eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eb8:	08006f43 	.word	0x08006f43
 8006ebc:	08006f4b 	.word	0x08006f4b
 8006ec0:	08006fa7 	.word	0x08006fa7
 8006ec4:	08006fa7 	.word	0x08006fa7
 8006ec8:	08006f53 	.word	0x08006f53
 8006ecc:	08006fa7 	.word	0x08006fa7
 8006ed0:	08006fa7 	.word	0x08006fa7
 8006ed4:	08006fa7 	.word	0x08006fa7
 8006ed8:	08006f63 	.word	0x08006f63
 8006edc:	08006fa7 	.word	0x08006fa7
 8006ee0:	08006fa7 	.word	0x08006fa7
 8006ee4:	08006fa7 	.word	0x08006fa7
 8006ee8:	08006fa7 	.word	0x08006fa7
 8006eec:	08006fa7 	.word	0x08006fa7
 8006ef0:	08006fa7 	.word	0x08006fa7
 8006ef4:	08006fa7 	.word	0x08006fa7
 8006ef8:	08006f73 	.word	0x08006f73
 8006efc:	08006fa7 	.word	0x08006fa7
 8006f00:	08006fa7 	.word	0x08006fa7
 8006f04:	08006fa7 	.word	0x08006fa7
 8006f08:	08006fa7 	.word	0x08006fa7
 8006f0c:	08006fa7 	.word	0x08006fa7
 8006f10:	08006fa7 	.word	0x08006fa7
 8006f14:	08006fa7 	.word	0x08006fa7
 8006f18:	08006fa7 	.word	0x08006fa7
 8006f1c:	08006fa7 	.word	0x08006fa7
 8006f20:	08006fa7 	.word	0x08006fa7
 8006f24:	08006fa7 	.word	0x08006fa7
 8006f28:	08006fa7 	.word	0x08006fa7
 8006f2c:	08006fa7 	.word	0x08006fa7
 8006f30:	08006fa7 	.word	0x08006fa7
 8006f34:	08006fa7 	.word	0x08006fa7
 8006f38:	08006f99 	.word	0x08006f99
 8006f3c:	2b40      	cmp	r3, #64	; 0x40
 8006f3e:	d02e      	beq.n	8006f9e <UART_SetConfig+0xab2>
 8006f40:	e031      	b.n	8006fa6 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f42:	f7fc fdbf 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 8006f46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f48:	e033      	b.n	8006fb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f4a:	f7fc fdd1 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 8006f4e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006f50:	e02f      	b.n	8006fb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fe fc8c 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f60:	e027      	b.n	8006fb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f62:	f107 0318 	add.w	r3, r7, #24
 8006f66:	4618      	mov	r0, r3
 8006f68:	f7fe fdd8 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f70:	e01f      	b.n	8006fb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f72:	4b69      	ldr	r3, [pc, #420]	; (8007118 <UART_SetConfig+0xc2c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0320 	and.w	r3, r3, #32
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d009      	beq.n	8006f92 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006f7e:	4b66      	ldr	r3, [pc, #408]	; (8007118 <UART_SetConfig+0xc2c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	08db      	lsrs	r3, r3, #3
 8006f84:	f003 0303 	and.w	r3, r3, #3
 8006f88:	4a64      	ldr	r2, [pc, #400]	; (800711c <UART_SetConfig+0xc30>)
 8006f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006f90:	e00f      	b.n	8006fb2 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8006f92:	4b62      	ldr	r3, [pc, #392]	; (800711c <UART_SetConfig+0xc30>)
 8006f94:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f96:	e00c      	b.n	8006fb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006f98:	4b61      	ldr	r3, [pc, #388]	; (8007120 <UART_SetConfig+0xc34>)
 8006f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006f9c:	e009      	b.n	8006fb2 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006fa4:	e005      	b.n	8006fb2 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006fb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 80ea 	beq.w	800718e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	4a55      	ldr	r2, [pc, #340]	; (8007114 <UART_SetConfig+0xc28>)
 8006fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fcc:	005a      	lsls	r2, r3, #1
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	085b      	lsrs	r3, r3, #1
 8006fd4:	441a      	add	r2, r3
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fde:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe2:	2b0f      	cmp	r3, #15
 8006fe4:	d916      	bls.n	8007014 <UART_SetConfig+0xb28>
 8006fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fec:	d212      	bcs.n	8007014 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f023 030f 	bic.w	r3, r3, #15
 8006ff6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	b29a      	uxth	r2, r3
 8007004:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007006:	4313      	orrs	r3, r2
 8007008:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8007010:	60da      	str	r2, [r3, #12]
 8007012:	e0bc      	b.n	800718e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800701a:	e0b8      	b.n	800718e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 800701c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007020:	2b20      	cmp	r3, #32
 8007022:	dc4b      	bgt.n	80070bc <UART_SetConfig+0xbd0>
 8007024:	2b00      	cmp	r3, #0
 8007026:	f2c0 8087 	blt.w	8007138 <UART_SetConfig+0xc4c>
 800702a:	2b20      	cmp	r3, #32
 800702c:	f200 8084 	bhi.w	8007138 <UART_SetConfig+0xc4c>
 8007030:	a201      	add	r2, pc, #4	; (adr r2, 8007038 <UART_SetConfig+0xb4c>)
 8007032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007036:	bf00      	nop
 8007038:	080070c3 	.word	0x080070c3
 800703c:	080070cb 	.word	0x080070cb
 8007040:	08007139 	.word	0x08007139
 8007044:	08007139 	.word	0x08007139
 8007048:	080070d3 	.word	0x080070d3
 800704c:	08007139 	.word	0x08007139
 8007050:	08007139 	.word	0x08007139
 8007054:	08007139 	.word	0x08007139
 8007058:	080070e3 	.word	0x080070e3
 800705c:	08007139 	.word	0x08007139
 8007060:	08007139 	.word	0x08007139
 8007064:	08007139 	.word	0x08007139
 8007068:	08007139 	.word	0x08007139
 800706c:	08007139 	.word	0x08007139
 8007070:	08007139 	.word	0x08007139
 8007074:	08007139 	.word	0x08007139
 8007078:	080070f3 	.word	0x080070f3
 800707c:	08007139 	.word	0x08007139
 8007080:	08007139 	.word	0x08007139
 8007084:	08007139 	.word	0x08007139
 8007088:	08007139 	.word	0x08007139
 800708c:	08007139 	.word	0x08007139
 8007090:	08007139 	.word	0x08007139
 8007094:	08007139 	.word	0x08007139
 8007098:	08007139 	.word	0x08007139
 800709c:	08007139 	.word	0x08007139
 80070a0:	08007139 	.word	0x08007139
 80070a4:	08007139 	.word	0x08007139
 80070a8:	08007139 	.word	0x08007139
 80070ac:	08007139 	.word	0x08007139
 80070b0:	08007139 	.word	0x08007139
 80070b4:	08007139 	.word	0x08007139
 80070b8:	0800712b 	.word	0x0800712b
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	d037      	beq.n	8007130 <UART_SetConfig+0xc44>
 80070c0:	e03a      	b.n	8007138 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c2:	f7fc fcff 	bl	8003ac4 <HAL_RCC_GetPCLK1Freq>
 80070c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070c8:	e03c      	b.n	8007144 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070ca:	f7fc fd11 	bl	8003af0 <HAL_RCC_GetPCLK2Freq>
 80070ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80070d0:	e038      	b.n	8007144 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7fe fbcc 	bl	8005874 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070e0:	e030      	b.n	8007144 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070e2:	f107 0318 	add.w	r3, r7, #24
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fe fd18 	bl	8005b1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80070f0:	e028      	b.n	8007144 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80070f2:	4b09      	ldr	r3, [pc, #36]	; (8007118 <UART_SetConfig+0xc2c>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0320 	and.w	r3, r3, #32
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d012      	beq.n	8007124 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80070fe:	4b06      	ldr	r3, [pc, #24]	; (8007118 <UART_SetConfig+0xc2c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	08db      	lsrs	r3, r3, #3
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	4a04      	ldr	r2, [pc, #16]	; (800711c <UART_SetConfig+0xc30>)
 800710a:	fa22 f303 	lsr.w	r3, r2, r3
 800710e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007110:	e018      	b.n	8007144 <UART_SetConfig+0xc58>
 8007112:	bf00      	nop
 8007114:	080082a4 	.word	0x080082a4
 8007118:	58024400 	.word	0x58024400
 800711c:	03d09000 	.word	0x03d09000
 8007120:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8007124:	4b24      	ldr	r3, [pc, #144]	; (80071b8 <UART_SetConfig+0xccc>)
 8007126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007128:	e00c      	b.n	8007144 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800712a:	4b24      	ldr	r3, [pc, #144]	; (80071bc <UART_SetConfig+0xcd0>)
 800712c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800712e:	e009      	b.n	8007144 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007134:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007136:	e005      	b.n	8007144 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8007138:	2300      	movs	r3, #0
 800713a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007142:	bf00      	nop
    }

    if (pclk != 0U)
 8007144:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d021      	beq.n	800718e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714e:	4a1c      	ldr	r2, [pc, #112]	; (80071c0 <UART_SetConfig+0xcd4>)
 8007150:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007154:	461a      	mov	r2, r3
 8007156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007158:	fbb3 f2f2 	udiv	r2, r3, r2
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	085b      	lsrs	r3, r3, #1
 8007162:	441a      	add	r2, r3
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	fbb2 f3f3 	udiv	r3, r2, r3
 800716c:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800716e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007170:	2b0f      	cmp	r3, #15
 8007172:	d909      	bls.n	8007188 <UART_SetConfig+0xc9c>
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800717a:	d205      	bcs.n	8007188 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	b29a      	uxth	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	60da      	str	r2, [r3, #12]
 8007186:	e002      	b.n	800718e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2201      	movs	r2, #1
 8007192:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2201      	movs	r2, #1
 800719a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2200      	movs	r2, #0
 80071a2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	2200      	movs	r2, #0
 80071a8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80071aa:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3748      	adds	r7, #72	; 0x48
 80071b2:	46bd      	mov	sp, r7
 80071b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071b8:	03d09000 	.word	0x03d09000
 80071bc:	003d0900 	.word	0x003d0900
 80071c0:	080082a4 	.word	0x080082a4

080071c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d0:	f003 0301 	and.w	r3, r3, #1
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00a      	beq.n	80071ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00a      	beq.n	8007210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	430a      	orrs	r2, r1
 800720e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007214:	f003 0304 	and.w	r3, r3, #4
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007236:	f003 0308 	and.w	r3, r3, #8
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007258:	f003 0310 	and.w	r3, r3, #16
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727a:	f003 0320 	and.w	r3, r3, #32
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d01a      	beq.n	80072da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072c2:	d10a      	bne.n	80072da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	430a      	orrs	r2, r1
 80072d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d00a      	beq.n	80072fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	605a      	str	r2, [r3, #4]
  }
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b098      	sub	sp, #96	; 0x60
 800730c:	af02      	add	r7, sp, #8
 800730e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2200      	movs	r2, #0
 8007314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007318:	f7fa f8a4 	bl	8001464 <HAL_GetTick>
 800731c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 0308 	and.w	r3, r3, #8
 8007328:	2b08      	cmp	r3, #8
 800732a:	d12f      	bne.n	800738c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800732c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007334:	2200      	movs	r2, #0
 8007336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f88e 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d022      	beq.n	800738c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	e853 3f00 	ldrex	r3, [r3]
 8007352:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007356:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800735a:	653b      	str	r3, [r7, #80]	; 0x50
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	461a      	mov	r2, r3
 8007362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007364:	647b      	str	r3, [r7, #68]	; 0x44
 8007366:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007368:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800736a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800736c:	e841 2300 	strex	r3, r2, [r1]
 8007370:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1e6      	bne.n	8007346 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2220      	movs	r2, #32
 800737c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e063      	b.n	8007454 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b04      	cmp	r3, #4
 8007398:	d149      	bne.n	800742e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800739a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800739e:	9300      	str	r3, [sp, #0]
 80073a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073a2:	2200      	movs	r2, #0
 80073a4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f857 	bl	800745c <UART_WaitOnFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d03c      	beq.n	800742e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	623b      	str	r3, [r7, #32]
   return(result);
 80073c2:	6a3b      	ldr	r3, [r7, #32]
 80073c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073d2:	633b      	str	r3, [r7, #48]	; 0x30
 80073d4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80073d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80073e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e6      	bne.n	80073b4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3308      	adds	r3, #8
 80073ec:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	60fb      	str	r3, [r7, #12]
   return(result);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007406:	61fa      	str	r2, [r7, #28]
 8007408:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	69b9      	ldr	r1, [r7, #24]
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	617b      	str	r3, [r7, #20]
   return(result);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e5      	bne.n	80073e6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2220      	movs	r2, #32
 800741e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e012      	b.n	8007454 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2220      	movs	r2, #32
 800743a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3758      	adds	r7, #88	; 0x58
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800746c:	e049      	b.n	8007502 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007474:	d045      	beq.n	8007502 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007476:	f7f9 fff5 	bl	8001464 <HAL_GetTick>
 800747a:	4602      	mov	r2, r0
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	1ad3      	subs	r3, r2, r3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	429a      	cmp	r2, r3
 8007484:	d302      	bcc.n	800748c <UART_WaitOnFlagUntilTimeout+0x30>
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d101      	bne.n	8007490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800748c:	2303      	movs	r3, #3
 800748e:	e048      	b.n	8007522 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f003 0304 	and.w	r3, r3, #4
 800749a:	2b00      	cmp	r3, #0
 800749c:	d031      	beq.n	8007502 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	69db      	ldr	r3, [r3, #28]
 80074a4:	f003 0308 	and.w	r3, r3, #8
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d110      	bne.n	80074ce <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2208      	movs	r2, #8
 80074b2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f839 	bl	800752c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2208      	movs	r2, #8
 80074be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2200      	movs	r2, #0
 80074c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e029      	b.n	8007522 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	69db      	ldr	r3, [r3, #28]
 80074d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074dc:	d111      	bne.n	8007502 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074e8:	68f8      	ldr	r0, [r7, #12]
 80074ea:	f000 f81f 	bl	800752c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e00f      	b.n	8007522 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	69da      	ldr	r2, [r3, #28]
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	4013      	ands	r3, r2
 800750c:	68ba      	ldr	r2, [r7, #8]
 800750e:	429a      	cmp	r2, r3
 8007510:	bf0c      	ite	eq
 8007512:	2301      	moveq	r3, #1
 8007514:	2300      	movne	r3, #0
 8007516:	b2db      	uxtb	r3, r3
 8007518:	461a      	mov	r2, r3
 800751a:	79fb      	ldrb	r3, [r7, #7]
 800751c:	429a      	cmp	r2, r3
 800751e:	d0a6      	beq.n	800746e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007520:	2300      	movs	r3, #0
}
 8007522:	4618      	mov	r0, r3
 8007524:	3710      	adds	r7, #16
 8007526:	46bd      	mov	sp, r7
 8007528:	bd80      	pop	{r7, pc}
	...

0800752c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800752c:	b480      	push	{r7}
 800752e:	b095      	sub	sp, #84	; 0x54
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753c:	e853 3f00 	ldrex	r3, [r3]
 8007540:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007548:	64fb      	str	r3, [r7, #76]	; 0x4c
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007552:	643b      	str	r3, [r7, #64]	; 0x40
 8007554:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007556:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007558:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007562:	2b00      	cmp	r3, #0
 8007564:	d1e6      	bne.n	8007534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3308      	adds	r3, #8
 800756c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	61fb      	str	r3, [r7, #28]
   return(result);
 8007576:	69fa      	ldr	r2, [r7, #28]
 8007578:	4b1e      	ldr	r3, [pc, #120]	; (80075f4 <UART_EndRxTransfer+0xc8>)
 800757a:	4013      	ands	r3, r2
 800757c:	64bb      	str	r3, [r7, #72]	; 0x48
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3308      	adds	r3, #8
 8007584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007588:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800758c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e5      	bne.n	8007566 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d118      	bne.n	80075d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	e853 3f00 	ldrex	r3, [r3]
 80075ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f023 0310 	bic.w	r3, r3, #16
 80075b6:	647b      	str	r3, [r7, #68]	; 0x44
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	461a      	mov	r2, r3
 80075be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075c0:	61bb      	str	r3, [r7, #24]
 80075c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c4:	6979      	ldr	r1, [r7, #20]
 80075c6:	69ba      	ldr	r2, [r7, #24]
 80075c8:	e841 2300 	strex	r3, r2, [r1]
 80075cc:	613b      	str	r3, [r7, #16]
   return(result);
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1e6      	bne.n	80075a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80075e8:	bf00      	nop
 80075ea:	3754      	adds	r7, #84	; 0x54
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr
 80075f4:	effffffe 	.word	0xeffffffe

080075f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007606:	2b01      	cmp	r3, #1
 8007608:	d101      	bne.n	800760e <HAL_UARTEx_DisableFifoMode+0x16>
 800760a:	2302      	movs	r3, #2
 800760c:	e027      	b.n	800765e <HAL_UARTEx_DisableFifoMode+0x66>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2201      	movs	r2, #1
 8007612:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2224      	movs	r2, #36	; 0x24
 800761a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 0201 	bic.w	r2, r2, #1
 8007634:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800763c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2200      	movs	r2, #0
 8007642:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3714      	adds	r7, #20
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr

0800766a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
 8007672:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800767a:	2b01      	cmp	r3, #1
 800767c:	d101      	bne.n	8007682 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800767e:	2302      	movs	r3, #2
 8007680:	e02d      	b.n	80076de <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2224      	movs	r2, #36	; 0x24
 800768e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	681a      	ldr	r2, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0201 	bic.w	r2, r2, #1
 80076a8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	683a      	ldr	r2, [r7, #0]
 80076ba:	430a      	orrs	r2, r1
 80076bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f850 	bl	8007764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2220      	movs	r2, #32
 80076d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80076f6:	2b01      	cmp	r3, #1
 80076f8:	d101      	bne.n	80076fe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80076fa:	2302      	movs	r3, #2
 80076fc:	e02d      	b.n	800775a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2224      	movs	r2, #36	; 0x24
 800770a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f022 0201 	bic.w	r2, r2, #1
 8007724:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	683a      	ldr	r2, [r7, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f812 	bl	8007764 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2220      	movs	r2, #32
 800774c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007770:	2b00      	cmp	r3, #0
 8007772:	d108      	bne.n	8007786 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2201      	movs	r2, #1
 8007778:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007784:	e031      	b.n	80077ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007786:	2310      	movs	r3, #16
 8007788:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800778a:	2310      	movs	r3, #16
 800778c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	0e5b      	lsrs	r3, r3, #25
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	689b      	ldr	r3, [r3, #8]
 80077a4:	0f5b      	lsrs	r3, r3, #29
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077ae:	7bbb      	ldrb	r3, [r7, #14]
 80077b0:	7b3a      	ldrb	r2, [r7, #12]
 80077b2:	4911      	ldr	r1, [pc, #68]	; (80077f8 <UARTEx_SetNbDataToProcess+0x94>)
 80077b4:	5c8a      	ldrb	r2, [r1, r2]
 80077b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80077ba:	7b3a      	ldrb	r2, [r7, #12]
 80077bc:	490f      	ldr	r1, [pc, #60]	; (80077fc <UARTEx_SetNbDataToProcess+0x98>)
 80077be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80077c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
 80077ce:	7b7a      	ldrb	r2, [r7, #13]
 80077d0:	4909      	ldr	r1, [pc, #36]	; (80077f8 <UARTEx_SetNbDataToProcess+0x94>)
 80077d2:	5c8a      	ldrb	r2, [r1, r2]
 80077d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80077d8:	7b7a      	ldrb	r2, [r7, #13]
 80077da:	4908      	ldr	r1, [pc, #32]	; (80077fc <UARTEx_SetNbDataToProcess+0x98>)
 80077dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80077de:	fb93 f3f2 	sdiv	r3, r3, r2
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80077ea:	bf00      	nop
 80077ec:	3714      	adds	r7, #20
 80077ee:	46bd      	mov	sp, r7
 80077f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f4:	4770      	bx	lr
 80077f6:	bf00      	nop
 80077f8:	080082bc 	.word	0x080082bc
 80077fc:	080082c4 	.word	0x080082c4

08007800 <__errno>:
 8007800:	4b01      	ldr	r3, [pc, #4]	; (8007808 <__errno+0x8>)
 8007802:	6818      	ldr	r0, [r3, #0]
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	24000010 	.word	0x24000010

0800780c <__libc_init_array>:
 800780c:	b570      	push	{r4, r5, r6, lr}
 800780e:	4d0d      	ldr	r5, [pc, #52]	; (8007844 <__libc_init_array+0x38>)
 8007810:	4c0d      	ldr	r4, [pc, #52]	; (8007848 <__libc_init_array+0x3c>)
 8007812:	1b64      	subs	r4, r4, r5
 8007814:	10a4      	asrs	r4, r4, #2
 8007816:	2600      	movs	r6, #0
 8007818:	42a6      	cmp	r6, r4
 800781a:	d109      	bne.n	8007830 <__libc_init_array+0x24>
 800781c:	4d0b      	ldr	r5, [pc, #44]	; (800784c <__libc_init_array+0x40>)
 800781e:	4c0c      	ldr	r4, [pc, #48]	; (8007850 <__libc_init_array+0x44>)
 8007820:	f000 fd1e 	bl	8008260 <_init>
 8007824:	1b64      	subs	r4, r4, r5
 8007826:	10a4      	asrs	r4, r4, #2
 8007828:	2600      	movs	r6, #0
 800782a:	42a6      	cmp	r6, r4
 800782c:	d105      	bne.n	800783a <__libc_init_array+0x2e>
 800782e:	bd70      	pop	{r4, r5, r6, pc}
 8007830:	f855 3b04 	ldr.w	r3, [r5], #4
 8007834:	4798      	blx	r3
 8007836:	3601      	adds	r6, #1
 8007838:	e7ee      	b.n	8007818 <__libc_init_array+0xc>
 800783a:	f855 3b04 	ldr.w	r3, [r5], #4
 800783e:	4798      	blx	r3
 8007840:	3601      	adds	r6, #1
 8007842:	e7f2      	b.n	800782a <__libc_init_array+0x1e>
 8007844:	08008338 	.word	0x08008338
 8007848:	08008338 	.word	0x08008338
 800784c:	08008338 	.word	0x08008338
 8007850:	0800833c 	.word	0x0800833c

08007854 <memset>:
 8007854:	4402      	add	r2, r0
 8007856:	4603      	mov	r3, r0
 8007858:	4293      	cmp	r3, r2
 800785a:	d100      	bne.n	800785e <memset+0xa>
 800785c:	4770      	bx	lr
 800785e:	f803 1b01 	strb.w	r1, [r3], #1
 8007862:	e7f9      	b.n	8007858 <memset+0x4>

08007864 <_puts_r>:
 8007864:	b570      	push	{r4, r5, r6, lr}
 8007866:	460e      	mov	r6, r1
 8007868:	4605      	mov	r5, r0
 800786a:	b118      	cbz	r0, 8007874 <_puts_r+0x10>
 800786c:	6983      	ldr	r3, [r0, #24]
 800786e:	b90b      	cbnz	r3, 8007874 <_puts_r+0x10>
 8007870:	f000 fa48 	bl	8007d04 <__sinit>
 8007874:	69ab      	ldr	r3, [r5, #24]
 8007876:	68ac      	ldr	r4, [r5, #8]
 8007878:	b913      	cbnz	r3, 8007880 <_puts_r+0x1c>
 800787a:	4628      	mov	r0, r5
 800787c:	f000 fa42 	bl	8007d04 <__sinit>
 8007880:	4b2c      	ldr	r3, [pc, #176]	; (8007934 <_puts_r+0xd0>)
 8007882:	429c      	cmp	r4, r3
 8007884:	d120      	bne.n	80078c8 <_puts_r+0x64>
 8007886:	686c      	ldr	r4, [r5, #4]
 8007888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800788a:	07db      	lsls	r3, r3, #31
 800788c:	d405      	bmi.n	800789a <_puts_r+0x36>
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	0598      	lsls	r0, r3, #22
 8007892:	d402      	bmi.n	800789a <_puts_r+0x36>
 8007894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007896:	f000 fad3 	bl	8007e40 <__retarget_lock_acquire_recursive>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	0719      	lsls	r1, r3, #28
 800789e:	d51d      	bpl.n	80078dc <_puts_r+0x78>
 80078a0:	6923      	ldr	r3, [r4, #16]
 80078a2:	b1db      	cbz	r3, 80078dc <_puts_r+0x78>
 80078a4:	3e01      	subs	r6, #1
 80078a6:	68a3      	ldr	r3, [r4, #8]
 80078a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80078ac:	3b01      	subs	r3, #1
 80078ae:	60a3      	str	r3, [r4, #8]
 80078b0:	bb39      	cbnz	r1, 8007902 <_puts_r+0x9e>
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	da38      	bge.n	8007928 <_puts_r+0xc4>
 80078b6:	4622      	mov	r2, r4
 80078b8:	210a      	movs	r1, #10
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f848 	bl	8007950 <__swbuf_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	d011      	beq.n	80078e8 <_puts_r+0x84>
 80078c4:	250a      	movs	r5, #10
 80078c6:	e011      	b.n	80078ec <_puts_r+0x88>
 80078c8:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <_puts_r+0xd4>)
 80078ca:	429c      	cmp	r4, r3
 80078cc:	d101      	bne.n	80078d2 <_puts_r+0x6e>
 80078ce:	68ac      	ldr	r4, [r5, #8]
 80078d0:	e7da      	b.n	8007888 <_puts_r+0x24>
 80078d2:	4b1a      	ldr	r3, [pc, #104]	; (800793c <_puts_r+0xd8>)
 80078d4:	429c      	cmp	r4, r3
 80078d6:	bf08      	it	eq
 80078d8:	68ec      	ldreq	r4, [r5, #12]
 80078da:	e7d5      	b.n	8007888 <_puts_r+0x24>
 80078dc:	4621      	mov	r1, r4
 80078de:	4628      	mov	r0, r5
 80078e0:	f000 f888 	bl	80079f4 <__swsetup_r>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	d0dd      	beq.n	80078a4 <_puts_r+0x40>
 80078e8:	f04f 35ff 	mov.w	r5, #4294967295
 80078ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078ee:	07da      	lsls	r2, r3, #31
 80078f0:	d405      	bmi.n	80078fe <_puts_r+0x9a>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	059b      	lsls	r3, r3, #22
 80078f6:	d402      	bmi.n	80078fe <_puts_r+0x9a>
 80078f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078fa:	f000 faa2 	bl	8007e42 <__retarget_lock_release_recursive>
 80078fe:	4628      	mov	r0, r5
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	2b00      	cmp	r3, #0
 8007904:	da04      	bge.n	8007910 <_puts_r+0xac>
 8007906:	69a2      	ldr	r2, [r4, #24]
 8007908:	429a      	cmp	r2, r3
 800790a:	dc06      	bgt.n	800791a <_puts_r+0xb6>
 800790c:	290a      	cmp	r1, #10
 800790e:	d004      	beq.n	800791a <_puts_r+0xb6>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	7019      	strb	r1, [r3, #0]
 8007918:	e7c5      	b.n	80078a6 <_puts_r+0x42>
 800791a:	4622      	mov	r2, r4
 800791c:	4628      	mov	r0, r5
 800791e:	f000 f817 	bl	8007950 <__swbuf_r>
 8007922:	3001      	adds	r0, #1
 8007924:	d1bf      	bne.n	80078a6 <_puts_r+0x42>
 8007926:	e7df      	b.n	80078e8 <_puts_r+0x84>
 8007928:	6823      	ldr	r3, [r4, #0]
 800792a:	250a      	movs	r5, #10
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	6022      	str	r2, [r4, #0]
 8007930:	701d      	strb	r5, [r3, #0]
 8007932:	e7db      	b.n	80078ec <_puts_r+0x88>
 8007934:	080082f0 	.word	0x080082f0
 8007938:	08008310 	.word	0x08008310
 800793c:	080082d0 	.word	0x080082d0

08007940 <puts>:
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <puts+0xc>)
 8007942:	4601      	mov	r1, r0
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	f7ff bf8d 	b.w	8007864 <_puts_r>
 800794a:	bf00      	nop
 800794c:	24000010 	.word	0x24000010

08007950 <__swbuf_r>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	460e      	mov	r6, r1
 8007954:	4614      	mov	r4, r2
 8007956:	4605      	mov	r5, r0
 8007958:	b118      	cbz	r0, 8007962 <__swbuf_r+0x12>
 800795a:	6983      	ldr	r3, [r0, #24]
 800795c:	b90b      	cbnz	r3, 8007962 <__swbuf_r+0x12>
 800795e:	f000 f9d1 	bl	8007d04 <__sinit>
 8007962:	4b21      	ldr	r3, [pc, #132]	; (80079e8 <__swbuf_r+0x98>)
 8007964:	429c      	cmp	r4, r3
 8007966:	d12b      	bne.n	80079c0 <__swbuf_r+0x70>
 8007968:	686c      	ldr	r4, [r5, #4]
 800796a:	69a3      	ldr	r3, [r4, #24]
 800796c:	60a3      	str	r3, [r4, #8]
 800796e:	89a3      	ldrh	r3, [r4, #12]
 8007970:	071a      	lsls	r2, r3, #28
 8007972:	d52f      	bpl.n	80079d4 <__swbuf_r+0x84>
 8007974:	6923      	ldr	r3, [r4, #16]
 8007976:	b36b      	cbz	r3, 80079d4 <__swbuf_r+0x84>
 8007978:	6923      	ldr	r3, [r4, #16]
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	1ac0      	subs	r0, r0, r3
 800797e:	6963      	ldr	r3, [r4, #20]
 8007980:	b2f6      	uxtb	r6, r6
 8007982:	4283      	cmp	r3, r0
 8007984:	4637      	mov	r7, r6
 8007986:	dc04      	bgt.n	8007992 <__swbuf_r+0x42>
 8007988:	4621      	mov	r1, r4
 800798a:	4628      	mov	r0, r5
 800798c:	f000 f926 	bl	8007bdc <_fflush_r>
 8007990:	bb30      	cbnz	r0, 80079e0 <__swbuf_r+0x90>
 8007992:	68a3      	ldr	r3, [r4, #8]
 8007994:	3b01      	subs	r3, #1
 8007996:	60a3      	str	r3, [r4, #8]
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	1c5a      	adds	r2, r3, #1
 800799c:	6022      	str	r2, [r4, #0]
 800799e:	701e      	strb	r6, [r3, #0]
 80079a0:	6963      	ldr	r3, [r4, #20]
 80079a2:	3001      	adds	r0, #1
 80079a4:	4283      	cmp	r3, r0
 80079a6:	d004      	beq.n	80079b2 <__swbuf_r+0x62>
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	07db      	lsls	r3, r3, #31
 80079ac:	d506      	bpl.n	80079bc <__swbuf_r+0x6c>
 80079ae:	2e0a      	cmp	r6, #10
 80079b0:	d104      	bne.n	80079bc <__swbuf_r+0x6c>
 80079b2:	4621      	mov	r1, r4
 80079b4:	4628      	mov	r0, r5
 80079b6:	f000 f911 	bl	8007bdc <_fflush_r>
 80079ba:	b988      	cbnz	r0, 80079e0 <__swbuf_r+0x90>
 80079bc:	4638      	mov	r0, r7
 80079be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c0:	4b0a      	ldr	r3, [pc, #40]	; (80079ec <__swbuf_r+0x9c>)
 80079c2:	429c      	cmp	r4, r3
 80079c4:	d101      	bne.n	80079ca <__swbuf_r+0x7a>
 80079c6:	68ac      	ldr	r4, [r5, #8]
 80079c8:	e7cf      	b.n	800796a <__swbuf_r+0x1a>
 80079ca:	4b09      	ldr	r3, [pc, #36]	; (80079f0 <__swbuf_r+0xa0>)
 80079cc:	429c      	cmp	r4, r3
 80079ce:	bf08      	it	eq
 80079d0:	68ec      	ldreq	r4, [r5, #12]
 80079d2:	e7ca      	b.n	800796a <__swbuf_r+0x1a>
 80079d4:	4621      	mov	r1, r4
 80079d6:	4628      	mov	r0, r5
 80079d8:	f000 f80c 	bl	80079f4 <__swsetup_r>
 80079dc:	2800      	cmp	r0, #0
 80079de:	d0cb      	beq.n	8007978 <__swbuf_r+0x28>
 80079e0:	f04f 37ff 	mov.w	r7, #4294967295
 80079e4:	e7ea      	b.n	80079bc <__swbuf_r+0x6c>
 80079e6:	bf00      	nop
 80079e8:	080082f0 	.word	0x080082f0
 80079ec:	08008310 	.word	0x08008310
 80079f0:	080082d0 	.word	0x080082d0

080079f4 <__swsetup_r>:
 80079f4:	4b32      	ldr	r3, [pc, #200]	; (8007ac0 <__swsetup_r+0xcc>)
 80079f6:	b570      	push	{r4, r5, r6, lr}
 80079f8:	681d      	ldr	r5, [r3, #0]
 80079fa:	4606      	mov	r6, r0
 80079fc:	460c      	mov	r4, r1
 80079fe:	b125      	cbz	r5, 8007a0a <__swsetup_r+0x16>
 8007a00:	69ab      	ldr	r3, [r5, #24]
 8007a02:	b913      	cbnz	r3, 8007a0a <__swsetup_r+0x16>
 8007a04:	4628      	mov	r0, r5
 8007a06:	f000 f97d 	bl	8007d04 <__sinit>
 8007a0a:	4b2e      	ldr	r3, [pc, #184]	; (8007ac4 <__swsetup_r+0xd0>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	d10f      	bne.n	8007a30 <__swsetup_r+0x3c>
 8007a10:	686c      	ldr	r4, [r5, #4]
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a18:	0719      	lsls	r1, r3, #28
 8007a1a:	d42c      	bmi.n	8007a76 <__swsetup_r+0x82>
 8007a1c:	06dd      	lsls	r5, r3, #27
 8007a1e:	d411      	bmi.n	8007a44 <__swsetup_r+0x50>
 8007a20:	2309      	movs	r3, #9
 8007a22:	6033      	str	r3, [r6, #0]
 8007a24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a28:	81a3      	strh	r3, [r4, #12]
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2e:	e03e      	b.n	8007aae <__swsetup_r+0xba>
 8007a30:	4b25      	ldr	r3, [pc, #148]	; (8007ac8 <__swsetup_r+0xd4>)
 8007a32:	429c      	cmp	r4, r3
 8007a34:	d101      	bne.n	8007a3a <__swsetup_r+0x46>
 8007a36:	68ac      	ldr	r4, [r5, #8]
 8007a38:	e7eb      	b.n	8007a12 <__swsetup_r+0x1e>
 8007a3a:	4b24      	ldr	r3, [pc, #144]	; (8007acc <__swsetup_r+0xd8>)
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	bf08      	it	eq
 8007a40:	68ec      	ldreq	r4, [r5, #12]
 8007a42:	e7e6      	b.n	8007a12 <__swsetup_r+0x1e>
 8007a44:	0758      	lsls	r0, r3, #29
 8007a46:	d512      	bpl.n	8007a6e <__swsetup_r+0x7a>
 8007a48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a4a:	b141      	cbz	r1, 8007a5e <__swsetup_r+0x6a>
 8007a4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a50:	4299      	cmp	r1, r3
 8007a52:	d002      	beq.n	8007a5a <__swsetup_r+0x66>
 8007a54:	4630      	mov	r0, r6
 8007a56:	f000 fa5b 	bl	8007f10 <_free_r>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6363      	str	r3, [r4, #52]	; 0x34
 8007a5e:	89a3      	ldrh	r3, [r4, #12]
 8007a60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a64:	81a3      	strh	r3, [r4, #12]
 8007a66:	2300      	movs	r3, #0
 8007a68:	6063      	str	r3, [r4, #4]
 8007a6a:	6923      	ldr	r3, [r4, #16]
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f043 0308 	orr.w	r3, r3, #8
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	b94b      	cbnz	r3, 8007a8e <__swsetup_r+0x9a>
 8007a7a:	89a3      	ldrh	r3, [r4, #12]
 8007a7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a84:	d003      	beq.n	8007a8e <__swsetup_r+0x9a>
 8007a86:	4621      	mov	r1, r4
 8007a88:	4630      	mov	r0, r6
 8007a8a:	f000 fa01 	bl	8007e90 <__smakebuf_r>
 8007a8e:	89a0      	ldrh	r0, [r4, #12]
 8007a90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a94:	f010 0301 	ands.w	r3, r0, #1
 8007a98:	d00a      	beq.n	8007ab0 <__swsetup_r+0xbc>
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60a3      	str	r3, [r4, #8]
 8007a9e:	6963      	ldr	r3, [r4, #20]
 8007aa0:	425b      	negs	r3, r3
 8007aa2:	61a3      	str	r3, [r4, #24]
 8007aa4:	6923      	ldr	r3, [r4, #16]
 8007aa6:	b943      	cbnz	r3, 8007aba <__swsetup_r+0xc6>
 8007aa8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007aac:	d1ba      	bne.n	8007a24 <__swsetup_r+0x30>
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
 8007ab0:	0781      	lsls	r1, r0, #30
 8007ab2:	bf58      	it	pl
 8007ab4:	6963      	ldrpl	r3, [r4, #20]
 8007ab6:	60a3      	str	r3, [r4, #8]
 8007ab8:	e7f4      	b.n	8007aa4 <__swsetup_r+0xb0>
 8007aba:	2000      	movs	r0, #0
 8007abc:	e7f7      	b.n	8007aae <__swsetup_r+0xba>
 8007abe:	bf00      	nop
 8007ac0:	24000010 	.word	0x24000010
 8007ac4:	080082f0 	.word	0x080082f0
 8007ac8:	08008310 	.word	0x08008310
 8007acc:	080082d0 	.word	0x080082d0

08007ad0 <__sflush_r>:
 8007ad0:	898a      	ldrh	r2, [r1, #12]
 8007ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ad6:	4605      	mov	r5, r0
 8007ad8:	0710      	lsls	r0, r2, #28
 8007ada:	460c      	mov	r4, r1
 8007adc:	d458      	bmi.n	8007b90 <__sflush_r+0xc0>
 8007ade:	684b      	ldr	r3, [r1, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	dc05      	bgt.n	8007af0 <__sflush_r+0x20>
 8007ae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dc02      	bgt.n	8007af0 <__sflush_r+0x20>
 8007aea:	2000      	movs	r0, #0
 8007aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007af0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007af2:	2e00      	cmp	r6, #0
 8007af4:	d0f9      	beq.n	8007aea <__sflush_r+0x1a>
 8007af6:	2300      	movs	r3, #0
 8007af8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007afc:	682f      	ldr	r7, [r5, #0]
 8007afe:	602b      	str	r3, [r5, #0]
 8007b00:	d032      	beq.n	8007b68 <__sflush_r+0x98>
 8007b02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	075a      	lsls	r2, r3, #29
 8007b08:	d505      	bpl.n	8007b16 <__sflush_r+0x46>
 8007b0a:	6863      	ldr	r3, [r4, #4]
 8007b0c:	1ac0      	subs	r0, r0, r3
 8007b0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b10:	b10b      	cbz	r3, 8007b16 <__sflush_r+0x46>
 8007b12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b14:	1ac0      	subs	r0, r0, r3
 8007b16:	2300      	movs	r3, #0
 8007b18:	4602      	mov	r2, r0
 8007b1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b1c:	6a21      	ldr	r1, [r4, #32]
 8007b1e:	4628      	mov	r0, r5
 8007b20:	47b0      	blx	r6
 8007b22:	1c43      	adds	r3, r0, #1
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	d106      	bne.n	8007b36 <__sflush_r+0x66>
 8007b28:	6829      	ldr	r1, [r5, #0]
 8007b2a:	291d      	cmp	r1, #29
 8007b2c:	d82c      	bhi.n	8007b88 <__sflush_r+0xb8>
 8007b2e:	4a2a      	ldr	r2, [pc, #168]	; (8007bd8 <__sflush_r+0x108>)
 8007b30:	40ca      	lsrs	r2, r1
 8007b32:	07d6      	lsls	r6, r2, #31
 8007b34:	d528      	bpl.n	8007b88 <__sflush_r+0xb8>
 8007b36:	2200      	movs	r2, #0
 8007b38:	6062      	str	r2, [r4, #4]
 8007b3a:	04d9      	lsls	r1, r3, #19
 8007b3c:	6922      	ldr	r2, [r4, #16]
 8007b3e:	6022      	str	r2, [r4, #0]
 8007b40:	d504      	bpl.n	8007b4c <__sflush_r+0x7c>
 8007b42:	1c42      	adds	r2, r0, #1
 8007b44:	d101      	bne.n	8007b4a <__sflush_r+0x7a>
 8007b46:	682b      	ldr	r3, [r5, #0]
 8007b48:	b903      	cbnz	r3, 8007b4c <__sflush_r+0x7c>
 8007b4a:	6560      	str	r0, [r4, #84]	; 0x54
 8007b4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b4e:	602f      	str	r7, [r5, #0]
 8007b50:	2900      	cmp	r1, #0
 8007b52:	d0ca      	beq.n	8007aea <__sflush_r+0x1a>
 8007b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b58:	4299      	cmp	r1, r3
 8007b5a:	d002      	beq.n	8007b62 <__sflush_r+0x92>
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f000 f9d7 	bl	8007f10 <_free_r>
 8007b62:	2000      	movs	r0, #0
 8007b64:	6360      	str	r0, [r4, #52]	; 0x34
 8007b66:	e7c1      	b.n	8007aec <__sflush_r+0x1c>
 8007b68:	6a21      	ldr	r1, [r4, #32]
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b0      	blx	r6
 8007b70:	1c41      	adds	r1, r0, #1
 8007b72:	d1c7      	bne.n	8007b04 <__sflush_r+0x34>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0c4      	beq.n	8007b04 <__sflush_r+0x34>
 8007b7a:	2b1d      	cmp	r3, #29
 8007b7c:	d001      	beq.n	8007b82 <__sflush_r+0xb2>
 8007b7e:	2b16      	cmp	r3, #22
 8007b80:	d101      	bne.n	8007b86 <__sflush_r+0xb6>
 8007b82:	602f      	str	r7, [r5, #0]
 8007b84:	e7b1      	b.n	8007aea <__sflush_r+0x1a>
 8007b86:	89a3      	ldrh	r3, [r4, #12]
 8007b88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b8c:	81a3      	strh	r3, [r4, #12]
 8007b8e:	e7ad      	b.n	8007aec <__sflush_r+0x1c>
 8007b90:	690f      	ldr	r7, [r1, #16]
 8007b92:	2f00      	cmp	r7, #0
 8007b94:	d0a9      	beq.n	8007aea <__sflush_r+0x1a>
 8007b96:	0793      	lsls	r3, r2, #30
 8007b98:	680e      	ldr	r6, [r1, #0]
 8007b9a:	bf08      	it	eq
 8007b9c:	694b      	ldreq	r3, [r1, #20]
 8007b9e:	600f      	str	r7, [r1, #0]
 8007ba0:	bf18      	it	ne
 8007ba2:	2300      	movne	r3, #0
 8007ba4:	eba6 0807 	sub.w	r8, r6, r7
 8007ba8:	608b      	str	r3, [r1, #8]
 8007baa:	f1b8 0f00 	cmp.w	r8, #0
 8007bae:	dd9c      	ble.n	8007aea <__sflush_r+0x1a>
 8007bb0:	6a21      	ldr	r1, [r4, #32]
 8007bb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bb4:	4643      	mov	r3, r8
 8007bb6:	463a      	mov	r2, r7
 8007bb8:	4628      	mov	r0, r5
 8007bba:	47b0      	blx	r6
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	dc06      	bgt.n	8007bce <__sflush_r+0xfe>
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007bcc:	e78e      	b.n	8007aec <__sflush_r+0x1c>
 8007bce:	4407      	add	r7, r0
 8007bd0:	eba8 0800 	sub.w	r8, r8, r0
 8007bd4:	e7e9      	b.n	8007baa <__sflush_r+0xda>
 8007bd6:	bf00      	nop
 8007bd8:	20400001 	.word	0x20400001

08007bdc <_fflush_r>:
 8007bdc:	b538      	push	{r3, r4, r5, lr}
 8007bde:	690b      	ldr	r3, [r1, #16]
 8007be0:	4605      	mov	r5, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	b913      	cbnz	r3, 8007bec <_fflush_r+0x10>
 8007be6:	2500      	movs	r5, #0
 8007be8:	4628      	mov	r0, r5
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	b118      	cbz	r0, 8007bf6 <_fflush_r+0x1a>
 8007bee:	6983      	ldr	r3, [r0, #24]
 8007bf0:	b90b      	cbnz	r3, 8007bf6 <_fflush_r+0x1a>
 8007bf2:	f000 f887 	bl	8007d04 <__sinit>
 8007bf6:	4b14      	ldr	r3, [pc, #80]	; (8007c48 <_fflush_r+0x6c>)
 8007bf8:	429c      	cmp	r4, r3
 8007bfa:	d11b      	bne.n	8007c34 <_fflush_r+0x58>
 8007bfc:	686c      	ldr	r4, [r5, #4]
 8007bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0ef      	beq.n	8007be6 <_fflush_r+0xa>
 8007c06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007c08:	07d0      	lsls	r0, r2, #31
 8007c0a:	d404      	bmi.n	8007c16 <_fflush_r+0x3a>
 8007c0c:	0599      	lsls	r1, r3, #22
 8007c0e:	d402      	bmi.n	8007c16 <_fflush_r+0x3a>
 8007c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c12:	f000 f915 	bl	8007e40 <__retarget_lock_acquire_recursive>
 8007c16:	4628      	mov	r0, r5
 8007c18:	4621      	mov	r1, r4
 8007c1a:	f7ff ff59 	bl	8007ad0 <__sflush_r>
 8007c1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c20:	07da      	lsls	r2, r3, #31
 8007c22:	4605      	mov	r5, r0
 8007c24:	d4e0      	bmi.n	8007be8 <_fflush_r+0xc>
 8007c26:	89a3      	ldrh	r3, [r4, #12]
 8007c28:	059b      	lsls	r3, r3, #22
 8007c2a:	d4dd      	bmi.n	8007be8 <_fflush_r+0xc>
 8007c2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c2e:	f000 f908 	bl	8007e42 <__retarget_lock_release_recursive>
 8007c32:	e7d9      	b.n	8007be8 <_fflush_r+0xc>
 8007c34:	4b05      	ldr	r3, [pc, #20]	; (8007c4c <_fflush_r+0x70>)
 8007c36:	429c      	cmp	r4, r3
 8007c38:	d101      	bne.n	8007c3e <_fflush_r+0x62>
 8007c3a:	68ac      	ldr	r4, [r5, #8]
 8007c3c:	e7df      	b.n	8007bfe <_fflush_r+0x22>
 8007c3e:	4b04      	ldr	r3, [pc, #16]	; (8007c50 <_fflush_r+0x74>)
 8007c40:	429c      	cmp	r4, r3
 8007c42:	bf08      	it	eq
 8007c44:	68ec      	ldreq	r4, [r5, #12]
 8007c46:	e7da      	b.n	8007bfe <_fflush_r+0x22>
 8007c48:	080082f0 	.word	0x080082f0
 8007c4c:	08008310 	.word	0x08008310
 8007c50:	080082d0 	.word	0x080082d0

08007c54 <std>:
 8007c54:	2300      	movs	r3, #0
 8007c56:	b510      	push	{r4, lr}
 8007c58:	4604      	mov	r4, r0
 8007c5a:	e9c0 3300 	strd	r3, r3, [r0]
 8007c5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c62:	6083      	str	r3, [r0, #8]
 8007c64:	8181      	strh	r1, [r0, #12]
 8007c66:	6643      	str	r3, [r0, #100]	; 0x64
 8007c68:	81c2      	strh	r2, [r0, #14]
 8007c6a:	6183      	str	r3, [r0, #24]
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	2208      	movs	r2, #8
 8007c70:	305c      	adds	r0, #92	; 0x5c
 8007c72:	f7ff fdef 	bl	8007854 <memset>
 8007c76:	4b05      	ldr	r3, [pc, #20]	; (8007c8c <std+0x38>)
 8007c78:	6263      	str	r3, [r4, #36]	; 0x24
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <std+0x3c>)
 8007c7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <std+0x40>)
 8007c80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <std+0x44>)
 8007c84:	6224      	str	r4, [r4, #32]
 8007c86:	6323      	str	r3, [r4, #48]	; 0x30
 8007c88:	bd10      	pop	{r4, pc}
 8007c8a:	bf00      	nop
 8007c8c:	080080f1 	.word	0x080080f1
 8007c90:	08008113 	.word	0x08008113
 8007c94:	0800814b 	.word	0x0800814b
 8007c98:	0800816f 	.word	0x0800816f

08007c9c <_cleanup_r>:
 8007c9c:	4901      	ldr	r1, [pc, #4]	; (8007ca4 <_cleanup_r+0x8>)
 8007c9e:	f000 b8af 	b.w	8007e00 <_fwalk_reent>
 8007ca2:	bf00      	nop
 8007ca4:	08007bdd 	.word	0x08007bdd

08007ca8 <__sfmoreglue>:
 8007ca8:	b570      	push	{r4, r5, r6, lr}
 8007caa:	2268      	movs	r2, #104	; 0x68
 8007cac:	1e4d      	subs	r5, r1, #1
 8007cae:	4355      	muls	r5, r2
 8007cb0:	460e      	mov	r6, r1
 8007cb2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cb6:	f000 f997 	bl	8007fe8 <_malloc_r>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	b140      	cbz	r0, 8007cd0 <__sfmoreglue+0x28>
 8007cbe:	2100      	movs	r1, #0
 8007cc0:	e9c0 1600 	strd	r1, r6, [r0]
 8007cc4:	300c      	adds	r0, #12
 8007cc6:	60a0      	str	r0, [r4, #8]
 8007cc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ccc:	f7ff fdc2 	bl	8007854 <memset>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	bd70      	pop	{r4, r5, r6, pc}

08007cd4 <__sfp_lock_acquire>:
 8007cd4:	4801      	ldr	r0, [pc, #4]	; (8007cdc <__sfp_lock_acquire+0x8>)
 8007cd6:	f000 b8b3 	b.w	8007e40 <__retarget_lock_acquire_recursive>
 8007cda:	bf00      	nop
 8007cdc:	240001a5 	.word	0x240001a5

08007ce0 <__sfp_lock_release>:
 8007ce0:	4801      	ldr	r0, [pc, #4]	; (8007ce8 <__sfp_lock_release+0x8>)
 8007ce2:	f000 b8ae 	b.w	8007e42 <__retarget_lock_release_recursive>
 8007ce6:	bf00      	nop
 8007ce8:	240001a5 	.word	0x240001a5

08007cec <__sinit_lock_acquire>:
 8007cec:	4801      	ldr	r0, [pc, #4]	; (8007cf4 <__sinit_lock_acquire+0x8>)
 8007cee:	f000 b8a7 	b.w	8007e40 <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	240001a6 	.word	0x240001a6

08007cf8 <__sinit_lock_release>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	; (8007d00 <__sinit_lock_release+0x8>)
 8007cfa:	f000 b8a2 	b.w	8007e42 <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	240001a6 	.word	0x240001a6

08007d04 <__sinit>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	4604      	mov	r4, r0
 8007d08:	f7ff fff0 	bl	8007cec <__sinit_lock_acquire>
 8007d0c:	69a3      	ldr	r3, [r4, #24]
 8007d0e:	b11b      	cbz	r3, 8007d18 <__sinit+0x14>
 8007d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d14:	f7ff bff0 	b.w	8007cf8 <__sinit_lock_release>
 8007d18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d1c:	6523      	str	r3, [r4, #80]	; 0x50
 8007d1e:	4b13      	ldr	r3, [pc, #76]	; (8007d6c <__sinit+0x68>)
 8007d20:	4a13      	ldr	r2, [pc, #76]	; (8007d70 <__sinit+0x6c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	bf04      	itt	eq
 8007d2a:	2301      	moveq	r3, #1
 8007d2c:	61a3      	streq	r3, [r4, #24]
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f000 f820 	bl	8007d74 <__sfp>
 8007d34:	6060      	str	r0, [r4, #4]
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 f81c 	bl	8007d74 <__sfp>
 8007d3c:	60a0      	str	r0, [r4, #8]
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f000 f818 	bl	8007d74 <__sfp>
 8007d44:	2200      	movs	r2, #0
 8007d46:	60e0      	str	r0, [r4, #12]
 8007d48:	2104      	movs	r1, #4
 8007d4a:	6860      	ldr	r0, [r4, #4]
 8007d4c:	f7ff ff82 	bl	8007c54 <std>
 8007d50:	68a0      	ldr	r0, [r4, #8]
 8007d52:	2201      	movs	r2, #1
 8007d54:	2109      	movs	r1, #9
 8007d56:	f7ff ff7d 	bl	8007c54 <std>
 8007d5a:	68e0      	ldr	r0, [r4, #12]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	2112      	movs	r1, #18
 8007d60:	f7ff ff78 	bl	8007c54 <std>
 8007d64:	2301      	movs	r3, #1
 8007d66:	61a3      	str	r3, [r4, #24]
 8007d68:	e7d2      	b.n	8007d10 <__sinit+0xc>
 8007d6a:	bf00      	nop
 8007d6c:	080082cc 	.word	0x080082cc
 8007d70:	08007c9d 	.word	0x08007c9d

08007d74 <__sfp>:
 8007d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d76:	4607      	mov	r7, r0
 8007d78:	f7ff ffac 	bl	8007cd4 <__sfp_lock_acquire>
 8007d7c:	4b1e      	ldr	r3, [pc, #120]	; (8007df8 <__sfp+0x84>)
 8007d7e:	681e      	ldr	r6, [r3, #0]
 8007d80:	69b3      	ldr	r3, [r6, #24]
 8007d82:	b913      	cbnz	r3, 8007d8a <__sfp+0x16>
 8007d84:	4630      	mov	r0, r6
 8007d86:	f7ff ffbd 	bl	8007d04 <__sinit>
 8007d8a:	3648      	adds	r6, #72	; 0x48
 8007d8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d90:	3b01      	subs	r3, #1
 8007d92:	d503      	bpl.n	8007d9c <__sfp+0x28>
 8007d94:	6833      	ldr	r3, [r6, #0]
 8007d96:	b30b      	cbz	r3, 8007ddc <__sfp+0x68>
 8007d98:	6836      	ldr	r6, [r6, #0]
 8007d9a:	e7f7      	b.n	8007d8c <__sfp+0x18>
 8007d9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007da0:	b9d5      	cbnz	r5, 8007dd8 <__sfp+0x64>
 8007da2:	4b16      	ldr	r3, [pc, #88]	; (8007dfc <__sfp+0x88>)
 8007da4:	60e3      	str	r3, [r4, #12]
 8007da6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007daa:	6665      	str	r5, [r4, #100]	; 0x64
 8007dac:	f000 f847 	bl	8007e3e <__retarget_lock_init_recursive>
 8007db0:	f7ff ff96 	bl	8007ce0 <__sfp_lock_release>
 8007db4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007db8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007dbc:	6025      	str	r5, [r4, #0]
 8007dbe:	61a5      	str	r5, [r4, #24]
 8007dc0:	2208      	movs	r2, #8
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007dc8:	f7ff fd44 	bl	8007854 <memset>
 8007dcc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dd0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dd8:	3468      	adds	r4, #104	; 0x68
 8007dda:	e7d9      	b.n	8007d90 <__sfp+0x1c>
 8007ddc:	2104      	movs	r1, #4
 8007dde:	4638      	mov	r0, r7
 8007de0:	f7ff ff62 	bl	8007ca8 <__sfmoreglue>
 8007de4:	4604      	mov	r4, r0
 8007de6:	6030      	str	r0, [r6, #0]
 8007de8:	2800      	cmp	r0, #0
 8007dea:	d1d5      	bne.n	8007d98 <__sfp+0x24>
 8007dec:	f7ff ff78 	bl	8007ce0 <__sfp_lock_release>
 8007df0:	230c      	movs	r3, #12
 8007df2:	603b      	str	r3, [r7, #0]
 8007df4:	e7ee      	b.n	8007dd4 <__sfp+0x60>
 8007df6:	bf00      	nop
 8007df8:	080082cc 	.word	0x080082cc
 8007dfc:	ffff0001 	.word	0xffff0001

08007e00 <_fwalk_reent>:
 8007e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e04:	4606      	mov	r6, r0
 8007e06:	4688      	mov	r8, r1
 8007e08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e0c:	2700      	movs	r7, #0
 8007e0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e12:	f1b9 0901 	subs.w	r9, r9, #1
 8007e16:	d505      	bpl.n	8007e24 <_fwalk_reent+0x24>
 8007e18:	6824      	ldr	r4, [r4, #0]
 8007e1a:	2c00      	cmp	r4, #0
 8007e1c:	d1f7      	bne.n	8007e0e <_fwalk_reent+0xe>
 8007e1e:	4638      	mov	r0, r7
 8007e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e24:	89ab      	ldrh	r3, [r5, #12]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d907      	bls.n	8007e3a <_fwalk_reent+0x3a>
 8007e2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	d003      	beq.n	8007e3a <_fwalk_reent+0x3a>
 8007e32:	4629      	mov	r1, r5
 8007e34:	4630      	mov	r0, r6
 8007e36:	47c0      	blx	r8
 8007e38:	4307      	orrs	r7, r0
 8007e3a:	3568      	adds	r5, #104	; 0x68
 8007e3c:	e7e9      	b.n	8007e12 <_fwalk_reent+0x12>

08007e3e <__retarget_lock_init_recursive>:
 8007e3e:	4770      	bx	lr

08007e40 <__retarget_lock_acquire_recursive>:
 8007e40:	4770      	bx	lr

08007e42 <__retarget_lock_release_recursive>:
 8007e42:	4770      	bx	lr

08007e44 <__swhatbuf_r>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	460e      	mov	r6, r1
 8007e48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	b096      	sub	sp, #88	; 0x58
 8007e50:	4614      	mov	r4, r2
 8007e52:	461d      	mov	r5, r3
 8007e54:	da08      	bge.n	8007e68 <__swhatbuf_r+0x24>
 8007e56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	602a      	str	r2, [r5, #0]
 8007e5e:	061a      	lsls	r2, r3, #24
 8007e60:	d410      	bmi.n	8007e84 <__swhatbuf_r+0x40>
 8007e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e66:	e00e      	b.n	8007e86 <__swhatbuf_r+0x42>
 8007e68:	466a      	mov	r2, sp
 8007e6a:	f000 f9a7 	bl	80081bc <_fstat_r>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	dbf1      	blt.n	8007e56 <__swhatbuf_r+0x12>
 8007e72:	9a01      	ldr	r2, [sp, #4]
 8007e74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e7c:	425a      	negs	r2, r3
 8007e7e:	415a      	adcs	r2, r3
 8007e80:	602a      	str	r2, [r5, #0]
 8007e82:	e7ee      	b.n	8007e62 <__swhatbuf_r+0x1e>
 8007e84:	2340      	movs	r3, #64	; 0x40
 8007e86:	2000      	movs	r0, #0
 8007e88:	6023      	str	r3, [r4, #0]
 8007e8a:	b016      	add	sp, #88	; 0x58
 8007e8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007e90 <__smakebuf_r>:
 8007e90:	898b      	ldrh	r3, [r1, #12]
 8007e92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e94:	079d      	lsls	r5, r3, #30
 8007e96:	4606      	mov	r6, r0
 8007e98:	460c      	mov	r4, r1
 8007e9a:	d507      	bpl.n	8007eac <__smakebuf_r+0x1c>
 8007e9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ea0:	6023      	str	r3, [r4, #0]
 8007ea2:	6123      	str	r3, [r4, #16]
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	6163      	str	r3, [r4, #20]
 8007ea8:	b002      	add	sp, #8
 8007eaa:	bd70      	pop	{r4, r5, r6, pc}
 8007eac:	ab01      	add	r3, sp, #4
 8007eae:	466a      	mov	r2, sp
 8007eb0:	f7ff ffc8 	bl	8007e44 <__swhatbuf_r>
 8007eb4:	9900      	ldr	r1, [sp, #0]
 8007eb6:	4605      	mov	r5, r0
 8007eb8:	4630      	mov	r0, r6
 8007eba:	f000 f895 	bl	8007fe8 <_malloc_r>
 8007ebe:	b948      	cbnz	r0, 8007ed4 <__smakebuf_r+0x44>
 8007ec0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec4:	059a      	lsls	r2, r3, #22
 8007ec6:	d4ef      	bmi.n	8007ea8 <__smakebuf_r+0x18>
 8007ec8:	f023 0303 	bic.w	r3, r3, #3
 8007ecc:	f043 0302 	orr.w	r3, r3, #2
 8007ed0:	81a3      	strh	r3, [r4, #12]
 8007ed2:	e7e3      	b.n	8007e9c <__smakebuf_r+0xc>
 8007ed4:	4b0d      	ldr	r3, [pc, #52]	; (8007f0c <__smakebuf_r+0x7c>)
 8007ed6:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	6020      	str	r0, [r4, #0]
 8007edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee0:	81a3      	strh	r3, [r4, #12]
 8007ee2:	9b00      	ldr	r3, [sp, #0]
 8007ee4:	6163      	str	r3, [r4, #20]
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	6120      	str	r0, [r4, #16]
 8007eea:	b15b      	cbz	r3, 8007f04 <__smakebuf_r+0x74>
 8007eec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	f000 f975 	bl	80081e0 <_isatty_r>
 8007ef6:	b128      	cbz	r0, 8007f04 <__smakebuf_r+0x74>
 8007ef8:	89a3      	ldrh	r3, [r4, #12]
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	f043 0301 	orr.w	r3, r3, #1
 8007f02:	81a3      	strh	r3, [r4, #12]
 8007f04:	89a0      	ldrh	r0, [r4, #12]
 8007f06:	4305      	orrs	r5, r0
 8007f08:	81a5      	strh	r5, [r4, #12]
 8007f0a:	e7cd      	b.n	8007ea8 <__smakebuf_r+0x18>
 8007f0c:	08007c9d 	.word	0x08007c9d

08007f10 <_free_r>:
 8007f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f12:	2900      	cmp	r1, #0
 8007f14:	d044      	beq.n	8007fa0 <_free_r+0x90>
 8007f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f1a:	9001      	str	r0, [sp, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8007f22:	bfb8      	it	lt
 8007f24:	18e4      	addlt	r4, r4, r3
 8007f26:	f000 f97d 	bl	8008224 <__malloc_lock>
 8007f2a:	4a1e      	ldr	r2, [pc, #120]	; (8007fa4 <_free_r+0x94>)
 8007f2c:	9801      	ldr	r0, [sp, #4]
 8007f2e:	6813      	ldr	r3, [r2, #0]
 8007f30:	b933      	cbnz	r3, 8007f40 <_free_r+0x30>
 8007f32:	6063      	str	r3, [r4, #4]
 8007f34:	6014      	str	r4, [r2, #0]
 8007f36:	b003      	add	sp, #12
 8007f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f3c:	f000 b978 	b.w	8008230 <__malloc_unlock>
 8007f40:	42a3      	cmp	r3, r4
 8007f42:	d908      	bls.n	8007f56 <_free_r+0x46>
 8007f44:	6825      	ldr	r5, [r4, #0]
 8007f46:	1961      	adds	r1, r4, r5
 8007f48:	428b      	cmp	r3, r1
 8007f4a:	bf01      	itttt	eq
 8007f4c:	6819      	ldreq	r1, [r3, #0]
 8007f4e:	685b      	ldreq	r3, [r3, #4]
 8007f50:	1949      	addeq	r1, r1, r5
 8007f52:	6021      	streq	r1, [r4, #0]
 8007f54:	e7ed      	b.n	8007f32 <_free_r+0x22>
 8007f56:	461a      	mov	r2, r3
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	b10b      	cbz	r3, 8007f60 <_free_r+0x50>
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	d9fa      	bls.n	8007f56 <_free_r+0x46>
 8007f60:	6811      	ldr	r1, [r2, #0]
 8007f62:	1855      	adds	r5, r2, r1
 8007f64:	42a5      	cmp	r5, r4
 8007f66:	d10b      	bne.n	8007f80 <_free_r+0x70>
 8007f68:	6824      	ldr	r4, [r4, #0]
 8007f6a:	4421      	add	r1, r4
 8007f6c:	1854      	adds	r4, r2, r1
 8007f6e:	42a3      	cmp	r3, r4
 8007f70:	6011      	str	r1, [r2, #0]
 8007f72:	d1e0      	bne.n	8007f36 <_free_r+0x26>
 8007f74:	681c      	ldr	r4, [r3, #0]
 8007f76:	685b      	ldr	r3, [r3, #4]
 8007f78:	6053      	str	r3, [r2, #4]
 8007f7a:	4421      	add	r1, r4
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	e7da      	b.n	8007f36 <_free_r+0x26>
 8007f80:	d902      	bls.n	8007f88 <_free_r+0x78>
 8007f82:	230c      	movs	r3, #12
 8007f84:	6003      	str	r3, [r0, #0]
 8007f86:	e7d6      	b.n	8007f36 <_free_r+0x26>
 8007f88:	6825      	ldr	r5, [r4, #0]
 8007f8a:	1961      	adds	r1, r4, r5
 8007f8c:	428b      	cmp	r3, r1
 8007f8e:	bf04      	itt	eq
 8007f90:	6819      	ldreq	r1, [r3, #0]
 8007f92:	685b      	ldreq	r3, [r3, #4]
 8007f94:	6063      	str	r3, [r4, #4]
 8007f96:	bf04      	itt	eq
 8007f98:	1949      	addeq	r1, r1, r5
 8007f9a:	6021      	streq	r1, [r4, #0]
 8007f9c:	6054      	str	r4, [r2, #4]
 8007f9e:	e7ca      	b.n	8007f36 <_free_r+0x26>
 8007fa0:	b003      	add	sp, #12
 8007fa2:	bd30      	pop	{r4, r5, pc}
 8007fa4:	240001a8 	.word	0x240001a8

08007fa8 <sbrk_aligned>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4e0e      	ldr	r6, [pc, #56]	; (8007fe4 <sbrk_aligned+0x3c>)
 8007fac:	460c      	mov	r4, r1
 8007fae:	6831      	ldr	r1, [r6, #0]
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	b911      	cbnz	r1, 8007fba <sbrk_aligned+0x12>
 8007fb4:	f000 f88c 	bl	80080d0 <_sbrk_r>
 8007fb8:	6030      	str	r0, [r6, #0]
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f000 f887 	bl	80080d0 <_sbrk_r>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	d00a      	beq.n	8007fdc <sbrk_aligned+0x34>
 8007fc6:	1cc4      	adds	r4, r0, #3
 8007fc8:	f024 0403 	bic.w	r4, r4, #3
 8007fcc:	42a0      	cmp	r0, r4
 8007fce:	d007      	beq.n	8007fe0 <sbrk_aligned+0x38>
 8007fd0:	1a21      	subs	r1, r4, r0
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 f87c 	bl	80080d0 <_sbrk_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d101      	bne.n	8007fe0 <sbrk_aligned+0x38>
 8007fdc:	f04f 34ff 	mov.w	r4, #4294967295
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	240001ac 	.word	0x240001ac

08007fe8 <_malloc_r>:
 8007fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fec:	1ccd      	adds	r5, r1, #3
 8007fee:	f025 0503 	bic.w	r5, r5, #3
 8007ff2:	3508      	adds	r5, #8
 8007ff4:	2d0c      	cmp	r5, #12
 8007ff6:	bf38      	it	cc
 8007ff8:	250c      	movcc	r5, #12
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	db01      	blt.n	8008004 <_malloc_r+0x1c>
 8008000:	42a9      	cmp	r1, r5
 8008002:	d905      	bls.n	8008010 <_malloc_r+0x28>
 8008004:	230c      	movs	r3, #12
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	2600      	movs	r6, #0
 800800a:	4630      	mov	r0, r6
 800800c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008010:	4e2e      	ldr	r6, [pc, #184]	; (80080cc <_malloc_r+0xe4>)
 8008012:	f000 f907 	bl	8008224 <__malloc_lock>
 8008016:	6833      	ldr	r3, [r6, #0]
 8008018:	461c      	mov	r4, r3
 800801a:	bb34      	cbnz	r4, 800806a <_malloc_r+0x82>
 800801c:	4629      	mov	r1, r5
 800801e:	4638      	mov	r0, r7
 8008020:	f7ff ffc2 	bl	8007fa8 <sbrk_aligned>
 8008024:	1c43      	adds	r3, r0, #1
 8008026:	4604      	mov	r4, r0
 8008028:	d14d      	bne.n	80080c6 <_malloc_r+0xde>
 800802a:	6834      	ldr	r4, [r6, #0]
 800802c:	4626      	mov	r6, r4
 800802e:	2e00      	cmp	r6, #0
 8008030:	d140      	bne.n	80080b4 <_malloc_r+0xcc>
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	4631      	mov	r1, r6
 8008036:	4638      	mov	r0, r7
 8008038:	eb04 0803 	add.w	r8, r4, r3
 800803c:	f000 f848 	bl	80080d0 <_sbrk_r>
 8008040:	4580      	cmp	r8, r0
 8008042:	d13a      	bne.n	80080ba <_malloc_r+0xd2>
 8008044:	6821      	ldr	r1, [r4, #0]
 8008046:	3503      	adds	r5, #3
 8008048:	1a6d      	subs	r5, r5, r1
 800804a:	f025 0503 	bic.w	r5, r5, #3
 800804e:	3508      	adds	r5, #8
 8008050:	2d0c      	cmp	r5, #12
 8008052:	bf38      	it	cc
 8008054:	250c      	movcc	r5, #12
 8008056:	4629      	mov	r1, r5
 8008058:	4638      	mov	r0, r7
 800805a:	f7ff ffa5 	bl	8007fa8 <sbrk_aligned>
 800805e:	3001      	adds	r0, #1
 8008060:	d02b      	beq.n	80080ba <_malloc_r+0xd2>
 8008062:	6823      	ldr	r3, [r4, #0]
 8008064:	442b      	add	r3, r5
 8008066:	6023      	str	r3, [r4, #0]
 8008068:	e00e      	b.n	8008088 <_malloc_r+0xa0>
 800806a:	6822      	ldr	r2, [r4, #0]
 800806c:	1b52      	subs	r2, r2, r5
 800806e:	d41e      	bmi.n	80080ae <_malloc_r+0xc6>
 8008070:	2a0b      	cmp	r2, #11
 8008072:	d916      	bls.n	80080a2 <_malloc_r+0xba>
 8008074:	1961      	adds	r1, r4, r5
 8008076:	42a3      	cmp	r3, r4
 8008078:	6025      	str	r5, [r4, #0]
 800807a:	bf18      	it	ne
 800807c:	6059      	strne	r1, [r3, #4]
 800807e:	6863      	ldr	r3, [r4, #4]
 8008080:	bf08      	it	eq
 8008082:	6031      	streq	r1, [r6, #0]
 8008084:	5162      	str	r2, [r4, r5]
 8008086:	604b      	str	r3, [r1, #4]
 8008088:	4638      	mov	r0, r7
 800808a:	f104 060b 	add.w	r6, r4, #11
 800808e:	f000 f8cf 	bl	8008230 <__malloc_unlock>
 8008092:	f026 0607 	bic.w	r6, r6, #7
 8008096:	1d23      	adds	r3, r4, #4
 8008098:	1af2      	subs	r2, r6, r3
 800809a:	d0b6      	beq.n	800800a <_malloc_r+0x22>
 800809c:	1b9b      	subs	r3, r3, r6
 800809e:	50a3      	str	r3, [r4, r2]
 80080a0:	e7b3      	b.n	800800a <_malloc_r+0x22>
 80080a2:	6862      	ldr	r2, [r4, #4]
 80080a4:	42a3      	cmp	r3, r4
 80080a6:	bf0c      	ite	eq
 80080a8:	6032      	streq	r2, [r6, #0]
 80080aa:	605a      	strne	r2, [r3, #4]
 80080ac:	e7ec      	b.n	8008088 <_malloc_r+0xa0>
 80080ae:	4623      	mov	r3, r4
 80080b0:	6864      	ldr	r4, [r4, #4]
 80080b2:	e7b2      	b.n	800801a <_malloc_r+0x32>
 80080b4:	4634      	mov	r4, r6
 80080b6:	6876      	ldr	r6, [r6, #4]
 80080b8:	e7b9      	b.n	800802e <_malloc_r+0x46>
 80080ba:	230c      	movs	r3, #12
 80080bc:	603b      	str	r3, [r7, #0]
 80080be:	4638      	mov	r0, r7
 80080c0:	f000 f8b6 	bl	8008230 <__malloc_unlock>
 80080c4:	e7a1      	b.n	800800a <_malloc_r+0x22>
 80080c6:	6025      	str	r5, [r4, #0]
 80080c8:	e7de      	b.n	8008088 <_malloc_r+0xa0>
 80080ca:	bf00      	nop
 80080cc:	240001a8 	.word	0x240001a8

080080d0 <_sbrk_r>:
 80080d0:	b538      	push	{r3, r4, r5, lr}
 80080d2:	4d06      	ldr	r5, [pc, #24]	; (80080ec <_sbrk_r+0x1c>)
 80080d4:	2300      	movs	r3, #0
 80080d6:	4604      	mov	r4, r0
 80080d8:	4608      	mov	r0, r1
 80080da:	602b      	str	r3, [r5, #0]
 80080dc:	f7f8 ffa6 	bl	800102c <_sbrk>
 80080e0:	1c43      	adds	r3, r0, #1
 80080e2:	d102      	bne.n	80080ea <_sbrk_r+0x1a>
 80080e4:	682b      	ldr	r3, [r5, #0]
 80080e6:	b103      	cbz	r3, 80080ea <_sbrk_r+0x1a>
 80080e8:	6023      	str	r3, [r4, #0]
 80080ea:	bd38      	pop	{r3, r4, r5, pc}
 80080ec:	240001b0 	.word	0x240001b0

080080f0 <__sread>:
 80080f0:	b510      	push	{r4, lr}
 80080f2:	460c      	mov	r4, r1
 80080f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f8:	f000 f8a0 	bl	800823c <_read_r>
 80080fc:	2800      	cmp	r0, #0
 80080fe:	bfab      	itete	ge
 8008100:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008102:	89a3      	ldrhlt	r3, [r4, #12]
 8008104:	181b      	addge	r3, r3, r0
 8008106:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800810a:	bfac      	ite	ge
 800810c:	6563      	strge	r3, [r4, #84]	; 0x54
 800810e:	81a3      	strhlt	r3, [r4, #12]
 8008110:	bd10      	pop	{r4, pc}

08008112 <__swrite>:
 8008112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008116:	461f      	mov	r7, r3
 8008118:	898b      	ldrh	r3, [r1, #12]
 800811a:	05db      	lsls	r3, r3, #23
 800811c:	4605      	mov	r5, r0
 800811e:	460c      	mov	r4, r1
 8008120:	4616      	mov	r6, r2
 8008122:	d505      	bpl.n	8008130 <__swrite+0x1e>
 8008124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008128:	2302      	movs	r3, #2
 800812a:	2200      	movs	r2, #0
 800812c:	f000 f868 	bl	8008200 <_lseek_r>
 8008130:	89a3      	ldrh	r3, [r4, #12]
 8008132:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800813a:	81a3      	strh	r3, [r4, #12]
 800813c:	4632      	mov	r2, r6
 800813e:	463b      	mov	r3, r7
 8008140:	4628      	mov	r0, r5
 8008142:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008146:	f000 b817 	b.w	8008178 <_write_r>

0800814a <__sseek>:
 800814a:	b510      	push	{r4, lr}
 800814c:	460c      	mov	r4, r1
 800814e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008152:	f000 f855 	bl	8008200 <_lseek_r>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	bf15      	itete	ne
 800815c:	6560      	strne	r0, [r4, #84]	; 0x54
 800815e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008162:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008166:	81a3      	strheq	r3, [r4, #12]
 8008168:	bf18      	it	ne
 800816a:	81a3      	strhne	r3, [r4, #12]
 800816c:	bd10      	pop	{r4, pc}

0800816e <__sclose>:
 800816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008172:	f000 b813 	b.w	800819c <_close_r>
	...

08008178 <_write_r>:
 8008178:	b538      	push	{r3, r4, r5, lr}
 800817a:	4d07      	ldr	r5, [pc, #28]	; (8008198 <_write_r+0x20>)
 800817c:	4604      	mov	r4, r0
 800817e:	4608      	mov	r0, r1
 8008180:	4611      	mov	r1, r2
 8008182:	2200      	movs	r2, #0
 8008184:	602a      	str	r2, [r5, #0]
 8008186:	461a      	mov	r2, r3
 8008188:	f7f8 feff 	bl	8000f8a <_write>
 800818c:	1c43      	adds	r3, r0, #1
 800818e:	d102      	bne.n	8008196 <_write_r+0x1e>
 8008190:	682b      	ldr	r3, [r5, #0]
 8008192:	b103      	cbz	r3, 8008196 <_write_r+0x1e>
 8008194:	6023      	str	r3, [r4, #0]
 8008196:	bd38      	pop	{r3, r4, r5, pc}
 8008198:	240001b0 	.word	0x240001b0

0800819c <_close_r>:
 800819c:	b538      	push	{r3, r4, r5, lr}
 800819e:	4d06      	ldr	r5, [pc, #24]	; (80081b8 <_close_r+0x1c>)
 80081a0:	2300      	movs	r3, #0
 80081a2:	4604      	mov	r4, r0
 80081a4:	4608      	mov	r0, r1
 80081a6:	602b      	str	r3, [r5, #0]
 80081a8:	f7f8 ff0b 	bl	8000fc2 <_close>
 80081ac:	1c43      	adds	r3, r0, #1
 80081ae:	d102      	bne.n	80081b6 <_close_r+0x1a>
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	b103      	cbz	r3, 80081b6 <_close_r+0x1a>
 80081b4:	6023      	str	r3, [r4, #0]
 80081b6:	bd38      	pop	{r3, r4, r5, pc}
 80081b8:	240001b0 	.word	0x240001b0

080081bc <_fstat_r>:
 80081bc:	b538      	push	{r3, r4, r5, lr}
 80081be:	4d07      	ldr	r5, [pc, #28]	; (80081dc <_fstat_r+0x20>)
 80081c0:	2300      	movs	r3, #0
 80081c2:	4604      	mov	r4, r0
 80081c4:	4608      	mov	r0, r1
 80081c6:	4611      	mov	r1, r2
 80081c8:	602b      	str	r3, [r5, #0]
 80081ca:	f7f8 ff06 	bl	8000fda <_fstat>
 80081ce:	1c43      	adds	r3, r0, #1
 80081d0:	d102      	bne.n	80081d8 <_fstat_r+0x1c>
 80081d2:	682b      	ldr	r3, [r5, #0]
 80081d4:	b103      	cbz	r3, 80081d8 <_fstat_r+0x1c>
 80081d6:	6023      	str	r3, [r4, #0]
 80081d8:	bd38      	pop	{r3, r4, r5, pc}
 80081da:	bf00      	nop
 80081dc:	240001b0 	.word	0x240001b0

080081e0 <_isatty_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d06      	ldr	r5, [pc, #24]	; (80081fc <_isatty_r+0x1c>)
 80081e4:	2300      	movs	r3, #0
 80081e6:	4604      	mov	r4, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	602b      	str	r3, [r5, #0]
 80081ec:	f7f8 ff05 	bl	8000ffa <_isatty>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_isatty_r+0x1a>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_isatty_r+0x1a>
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	240001b0 	.word	0x240001b0

08008200 <_lseek_r>:
 8008200:	b538      	push	{r3, r4, r5, lr}
 8008202:	4d07      	ldr	r5, [pc, #28]	; (8008220 <_lseek_r+0x20>)
 8008204:	4604      	mov	r4, r0
 8008206:	4608      	mov	r0, r1
 8008208:	4611      	mov	r1, r2
 800820a:	2200      	movs	r2, #0
 800820c:	602a      	str	r2, [r5, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	f7f8 fefe 	bl	8001010 <_lseek>
 8008214:	1c43      	adds	r3, r0, #1
 8008216:	d102      	bne.n	800821e <_lseek_r+0x1e>
 8008218:	682b      	ldr	r3, [r5, #0]
 800821a:	b103      	cbz	r3, 800821e <_lseek_r+0x1e>
 800821c:	6023      	str	r3, [r4, #0]
 800821e:	bd38      	pop	{r3, r4, r5, pc}
 8008220:	240001b0 	.word	0x240001b0

08008224 <__malloc_lock>:
 8008224:	4801      	ldr	r0, [pc, #4]	; (800822c <__malloc_lock+0x8>)
 8008226:	f7ff be0b 	b.w	8007e40 <__retarget_lock_acquire_recursive>
 800822a:	bf00      	nop
 800822c:	240001a4 	.word	0x240001a4

08008230 <__malloc_unlock>:
 8008230:	4801      	ldr	r0, [pc, #4]	; (8008238 <__malloc_unlock+0x8>)
 8008232:	f7ff be06 	b.w	8007e42 <__retarget_lock_release_recursive>
 8008236:	bf00      	nop
 8008238:	240001a4 	.word	0x240001a4

0800823c <_read_r>:
 800823c:	b538      	push	{r3, r4, r5, lr}
 800823e:	4d07      	ldr	r5, [pc, #28]	; (800825c <_read_r+0x20>)
 8008240:	4604      	mov	r4, r0
 8008242:	4608      	mov	r0, r1
 8008244:	4611      	mov	r1, r2
 8008246:	2200      	movs	r2, #0
 8008248:	602a      	str	r2, [r5, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	f7f8 fe80 	bl	8000f50 <_read>
 8008250:	1c43      	adds	r3, r0, #1
 8008252:	d102      	bne.n	800825a <_read_r+0x1e>
 8008254:	682b      	ldr	r3, [r5, #0]
 8008256:	b103      	cbz	r3, 800825a <_read_r+0x1e>
 8008258:	6023      	str	r3, [r4, #0]
 800825a:	bd38      	pop	{r3, r4, r5, pc}
 800825c:	240001b0 	.word	0x240001b0

08008260 <_init>:
 8008260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008262:	bf00      	nop
 8008264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008266:	bc08      	pop	{r3}
 8008268:	469e      	mov	lr, r3
 800826a:	4770      	bx	lr

0800826c <_fini>:
 800826c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826e:	bf00      	nop
 8008270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008272:	bc08      	pop	{r3}
 8008274:	469e      	mov	lr, r3
 8008276:	4770      	bx	lr
